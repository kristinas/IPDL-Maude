 lang IPDL

`` Sigma

 type msg .
 type key .
 type ctxt .

 function xor : bool * bool -> bool .

  distribution enc : msg * key -> ctxt .
  distribution mu_key : unit -> key .
  distribution flip : unit -> bool .

`` number of parties
  parameter N : nat .

`` genA
  hypothesis honest(N + 1) .
  hypothesis corrupt(N) .

  `` assumptions

  expression-assumption %automatic xorIdemRight using x y : 
   (x : bool) (y : bool) |= 
   xor(  (x, xor( (x, y) ) ) ) = y .

  reaction-assumption flipInvariantXorFixed using x y : 
   emptyCCtxt ; x : bool ; nil |= 
    y : bool <- samp flip (()) ; return  xor( (x, y) ) 
    = samp flip(()) .

``Delta

channel context delta =
  input AdvCommitAdvParty[bound N + 2] : bool ;
  input AdvOpenAdvParty[bound N + 2] : unit ;
  output Out[bound N + 2] : bool ;
  output LeakCommittedCommAdv[bound N + 2] : unit ;
  output LeakOpenedCommAdv[bound N + 2] : bool 
.

  `` protocols

 protocol idealPlusSim = 
new OkAdvId : unit in
newfamily LeakFlipIdAdv[bound N + 2] 
 indices: i bounds: bound N + 2 : bool in
ideal  || sim 
where 
sim = ( 
newfamily AllOpen[bound (N + 3)] 
 indices: j bounds: bound (N + 3) : unit in
newfamily Commit[bound (N + 1)] 
 indices: i bounds: bound (N + 1) : bool in
newfamily Committed[bound (N + 2)] 
 indices: i bounds: bound (N + 2): unit in
new LastCommit : bool in
newfamily Open[bound (N + 2)] 
 indices: i bounds: bound (N + 2) : unit in
newfamily Opened[bound (N + 2)] 
 indices: i bounds: bound (N + 2) : bool in
newfamily SumCommit[bound (N + 3)] 
 indices: j bounds: bound (N + 3) : bool in
( 
(family Commit[bound (N + 1)] 
 indices: i bounds: bound (N + 1) ::=
 (when (honest(i)) --> samp flip (()) )
 ;; 
 (when (corrupt(i)) --> 
  advCommit : bool <- read (AdvCommitAdvParty[i]) ; return advCommit 
 ) 
)
 || 
( LastCommit ::= 
 x : bool <- read (SumCommit [ N + 1 ]) ; 
 f : bool <- read (LeakFlipIdAdv [ N ]) ; 
 return xor( (x, f) ) 
)
 || 
(family SumCommit[bound (N + 3)] 
 indices: j bounds: bound (N + 3) ::=
 (when (j = 0) --> return False)
 ;; 
(when (j = N + 2) --> 
 x : bool <- read (SumCommit [ N + 1 ]) ; 
 f : bool <- read LastCommit ; 
 return xor( (x, f) ) 
)
 ;; 
(otherwise --> 
 x : bool <- read (SumCommit [j - 1]) ; 
 c : bool <- read (Commit [j - 1]) ; 
 return xor( (x, c) ) 
) 
)
 || 
(family Committed[bound (N + 2)] 
 indices: i bounds: bound (N + 2) ::=
 (when (i = N + 1) --> return () )
 ;; 
 (otherwise --> x : bool <- read (Commit [i]) ; return () ) 
)
 || 
(family LeakCommittedCommAdv[bound (N + 2)] 
 indices: i bounds: bound (N + 2) ::= 
  committed : unit <- read (Committed [i]) ; return committed 
)
 || 
(family Open[bound (N + 2)] 
 indices: i bounds: bound (N + 2) ::=
 (when (honest(i)) --> sc : bool <- read (SumCommit [N + 1]) ; return () )
 ;; 
 (when (corrupt(i)) --> 
  advOpen : unit <- read (AdvOpenAdvParty[i]) ; return advOpen 
 ) 
)
 || 
(family AllOpen[bound (N + 3)] 
 indices: j bounds: bound (N + 3) ::=
 (when (j = 0) --> return () )
 ;; 
(when (not (j = 0)) --> 
 x : unit <- read (AllOpen [j - 1]) ; 
 y : unit <- read (Open [j - 1]) ; 
 return () 
) 
)
 || 
(family Opened[bound (N + 2)] 
 indices: i bounds: bound (N + 2) ::=
 (when (i = N + 1) --> 
  x : unit <- read (Open [N + 1]) ; 
  commit : bool <- read LastCommit ; 
  return commit )
 ;; 
( when (not (i = N + 1))--> 
   x : unit <- read (Open [i]) ; 
   commit : bool <- read (Commit [i]) ; 
   return commit
 ) 
 )
 || 
(family LeakOpenedCommAdv[bound (N + 2)] 
 indices: i bounds: bound (N + 2) ::= 
  opened : bool <- read (Opened[i]) ; return opened 
 )
 || 
(OkAdvId ::= 
  ao : unit <- read (AllOpen[N + 2]) ; 
  sc : bool <- read (SumCommit[N + 1]) ; 
  return () 
) 
) 
) 
and 
ideal = 
 ( new Flip : bool in
( (Flip ::= samp flip (()) )
 || 
(family Out[bound N + 2] 
 indices: i bounds: bound N + 2 ::=
 (when (honest(i)) --> ok : unit <- read OkAdvId ; f : bool <- read Flip ; return f )
 ;; 
(when (corrupt(i)) --> out : bool <- read (Out [i]) ; return out ) )
 || 
(family LeakFlipIdAdv[bound (N + 2)] 
 indices: i bounds: bound (N + 2) ::= 
  ( (when (honest(i)) --> l : bool <- read (LeakFlipIdAdv[i]) ; return l)
    ;; 
    (when (corrupt(i)) --> f : bool <- read Flip ; return f) 
  ) 
) 
) 
) .

  protocol real = 
newfamily Commit[bound N + 2] 
 indices: i 
 bounds: bound N + 2 : bool
in
newfamily Committed[bound N + 2] 
 indices: i 
 bounds: bound N + 2 : unit
in
newfamily Open[bound N + 2] 
 indices: i 
 bounds: bound N + 2 : unit
in
newfamily Opened[bound N + 2] 
 indices: i 
 bounds: bound N + 2 : bool
in
( `` start new

(family Committed[bound N + 2] 
 indices: i 
 bounds: bound N + 2
::= x : bool <- read Commit[i] ; return ()
)
||
(family Opened[bound N + 2] 
 indices: i 
 bounds: bound N + 2
::= commit : bool <- read Commit[i] ; x : unit <- read Open[i] ; return commit
)
||
(family LeakCommittedCommAdv[bound N + 2] 
 indices: i 
 bounds: bound N + 2
::=  committed : unit <- read Committed[i] ; return committed
)
|| 
(family LeakOpenedCommAdv[bound N + 2] 
 indices: i 
 bounds: bound N + 2
::= opened : bool <- read Opened[i] ; return opened
)
||
(
family Party[bound N + 2] 
 indices: i 
 bounds: bound N + 2
::= (
(when (honest(i)) --> (
  newfamily AllCommitted[bound (N + 2) bound (N + 3)] 
 indices: i, j 
 bounds: bound (N + 2) bound (N + 3) : unit
in
newfamily SumOpened[bound N + 2 bound N + 3] 
 indices: i, j 
 bounds: bound N + 2 bound N + 3 : bool
in
( `` begin new
(family SumOpened[bound (N + 2) bound (N + 3)] 
  indices: i, j 
  bounds: bound (N + 2) bound (N + 3) 
  ::= ( (when (0 = j) --> return False ) 
         ;; 
         (when (not (0 = j)) --> 
           x : bool <- read SumOpened[i ,j - 1] ; 
           y : bool <- read Opened[j - 1] ; 
           return xor((x, y)) 
         ) 
      )
) 
||
(family AllCommitted[bound (N + 2) bound (N + 3)] 
 indices: i, j 
 bounds: bound (N + 2) bound (N + 3)
::= (
    (when (0 = j) --> return () )
    ;;
    (when (not (0 = j)) --> 
      x : unit <- read AllCommitted[i , j - 1] ; 
      y : unit <- read Committed[j - 1] ;
      return ()
    )   
    )
) 
||
 (family Open[bound N + 2] 
 indices: i 
 bounds: bound N + 2
::= x : unit <- read AllCommitted[i, N + 2] ;
 return ()) 
||
(family Commit[bound N + 2] 
 indices: i 
 bounds: bound N + 2
::= samp flip (())
)
||
(family Out[bound N + 2] 
 indices: i 
 bounds: bound N + 2
::= 
 sumOpened : bool <- read (SumOpened[i, N + 2]) ;
 return sumOpened
)
) `` end new
)) ``end when
;;
(when (corrupt(i)) --> (
 (family Commit[bound N + 2] 
 indices: i 
 bounds: bound N + 2
::=
 advCommit : bool <- read AdvCommitAdvParty[i] ; return advCommit
)
||
(family Open[bound N + 2] 
 indices: i 
 bounds: bound N + 2
::=
advOpen : unit <- read AdvOpenAdvParty[i] ; return advOpen
)
||
(family Out[bound N + 2] 
 indices: i 
 bounds: bound N + 2
::=
out : bool <- read Out[i] ; return out
)
)) ``end when

    )
)

) `` end new
.

``` proofs

start with idealPlusSim  over delta 

case distinction on family Out[bound N + 2](
  case: (
    subst chn OkAdvId into fam Out[bound (N + 2)]
  )
  case: (
    idle
  )
) then
absorb chn OkAdvId then
subst fam LeakFlipIdAdv[bound N + 2] into chn LastCommit then
absorb fam LeakFlipIdAdv[bound N + 2] then
case distinction on family Out[bound N + 2] (
  case: (  
sym from change fam Out[bound (N + 2)]
        with ao : unit <- read AllOpen[N + 2] ;
             sc : bool <- read SumCommit[N + 2] ; 
             return sc
         in currentProtocol (
subst fam SumCommit[bound (N + 3)] into fam Out[bound (N + 2)] then       
subst chn LastCommit into fam Out[bound (N + 2)] then
rename x to sc in fam Out[bound (N + 2)]
         )
  )
  case: (
    idle
  )  
) then
fold chn Flip into chn LastCommit then 
use assumption flipInvariantXorFixed on chn LastCommit then
sym from extend (change chn LastCommit
        with  x : bool <- read SumCommit[N + 1] ;
              commit : bool <- read Commit[N + 1] ;
              return commit
        in currentProtocol) 
        with internal channel Commit[N + 1]
        typed: bool 
        assigned: samp flip (()) (
 fold chn Commit[N + 1] into chn LastCommit
) then
case distinction on family Opened[bound N + 2] (
  case: (
    rename x to o in fam Opened[bound N + 2] then
    subst chn LastCommit into fam Opened[bound N + 2]
  )
  case: (
    idle
  )
) then
case distinction on family SumCommit[bound N + 3](
  case: (
    idle
  )
  case: (
    subst chn LastCommit into fam SumCommit[bound N + 3] then
    rename commit to c in fam SumCommit[bound N + 3]
  )
  case: (
    idle
  )
) then
absorb chn LastCommit then
merge case j = N + 2 with otherwise for fam SumCommit[bound N + 3] then
case distinction on family SumCommit[bound N + 3] (
  case: (
    idle
  ) 
  case: (
    rename c to cj, x to xj in fam SumCommit[bound N + 3]
 )
  ) then
on branch i = N + 1 of family Opened[bound N + 2] (
   subst fam Open[bound N + 2] into fam Opened[bound N + 2] then
   sym from change
         fam Opened[bound (N + 2)]
         with commit : bool <- read Commit[N + 1] ;
              o : unit <- read Open[N + 1] ;
              return commit
        in currentProtocol (
     subst fam Open[bound N + 2] into fam Opened[bound N + 2]
  ) then 
  rename o to x in fam Opened[bound N + 2]
) then
merge cases for fam Opened[bound N + 2]
 
