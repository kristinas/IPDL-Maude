lang IPDL

type msg .
type key .

function g : unit -> msg .
function mul : msg * msg -> msg .
function inv : msg -> msg .
function exp : msg * key -> msg .

distribution unif_key : unit -> key .
distribution unif_msg : unit -> msg .

parameter q : nat .

hypothesis 0 < q .

expression-assumption %automatic mulInv using x y : 
   (x : msg) (y : msg) |= 
   mul( (mul((x, y)), inv(y)) ) = x .

expression-assumption %manual commute using k l : 
   (k : key) (l : key) |= 
    exp( (exp ( (g (()), l)) , k))
    = 
    exp( (exp ( (g (()), k)) , l))
.   

reaction-assumption sampExp using k : 
   emptyCCtxt ; emptyTCtxt ; nil |= 
   k : key <- samp unif_key(()) ; return exp((g(()), k))
    = 
   samp unif_msg(()) 
     .

reaction-assumption mulFixedMsg using k m : 
   emptyCCtxt ; (m : msg) ; nil |= 
   k : msg <- samp unif_msg(()) ; return mul((m, k))
    = 
   samp unif_msg(()) 
     .     

approx-assumption ddh using ka kb : 
 (chn ddh :: msg * (msg * msg)) ; no inputs ; no assumptions |=
 ddh ::= ka : key <- samp unif_key(()) ; 
         kb : key <- samp unif_key(()) ; 
         return ( exp((g(()), ka)),
                  ( exp((g(()), kb)), 
                    exp( (exp((g(()), ka)), kb) ) 
                  )
                ) 
 =
 ddh ::= ka : key <- samp unif_key(()) ; 
         kb : key <- samp unif_key(()) ; 
         kr : key <- samp unif_key(()) ; 
         return ( exp((g(()), ka)),
                  (exp((g(()), kb)), 
                   exp((g(()), kr))
                  )
                )
 . 

channel context deltaDDH2 =
 output PublicKey : msg ;
 output DDH2 : (msg * msg) 
.           

protocol p = 
  (PublicKey ::= 
   preNF(nil, kb : key <- samp unif_key(()) ; return exp((g(()), kb)) )
  )
  ||
  (DDH2 ::= pb : msg <- read PublicKey ; 
            ka : key <- samp unif_key(()) ; 
            return ( exp((g(()), ka)), 
                     exp((pb, ka))
                   ) 
  )
   
.

approx subproof rewriteDDH2 = 
sym from change chn PublicKey with
 kb : key <- read SecretKey ; return exp((g(()), kb))
in (extend currentProtocol with 
internal channel SecretKey typed: key
assigned: samp unif_key(())
)(
  fold chn SecretKey into chn PublicKey
) then sym from change chn DDH2 with 
nf((pb : msg <- read PublicKey) (ka : key <- read SecretEphemeralKey ) , return(exp((g(()), ka)), exp((pb, ka))))
in (extend currentProtocol with 
internal channel SecretEphemeralKey typed: key
assigned: samp unif_key(())
)(
  fold chn SecretEphemeralKey into chn DDH2
) then
subst chn PublicKey into chn DDH2 then
sym from change chn PublicKey with
   nf((ka : key <- read SecretEphemeralKey) (kb : key <- read SecretKey), return exp((g(()), kb)))
in currentProtocol (
    drop read chn SecretEphemeralKey from chn PublicKey
) then
add internal channel DDH3 typed: (msg * (msg * msg))
assigned:
    ka : key <- read SecretEphemeralKey ; 
    kb : key <- read SecretKey ; 
    return ( exp((g(()), kb)),
                             ( exp((g(()), ka)), 
                               exp( (exp((g(()), kb)), ka) ) 
                             )
                           ) then
sym from change chn PublicKey with 
 x : (msg * (msg * msg)) <- read DDH3 ; return fst x
in currentProtocol (
    subst chn DDH3 into chn PublicKey
) then
sym from change chn DDH2 with 
 x : (msg * (msg * msg)) <- read DDH3 ; return snd x
in currentProtocol (
    subst chn DDH3 into chn DDH2
) then 
fold chn SecretEphemeralKey into chn DDH3 then
fold chn SecretKey into chn DDH3 then-approx
use approx assumption ddh on chn DDH3 then-approx
sym from 
change chn DDH3 with
 ka : key <- read SecretEphemeralKey ; 
 kb : key <- read SecretKey ;
 kr : key <- read Key ;
 return ( exp((g(()), kb)),
          ( exp((g(()), ka)), 
            exp((g(()), kr)) 
          ) 
        )
in
extend(
extend(
extend currentProtocol with 
internal channel SecretKey typed: key
assigned: samp unif_key(())
) with 
internal channel SecretEphemeralKey typed: key
assigned: samp unif_key(()) 
) with 
internal channel Key typed: key
assigned: samp unif_key(()) 
(
  fold chn Key into chn DDH3 then
  fold chn SecretEphemeralKey into chn DDH3 then
  fold chn SecretKey into chn DDH3 
) then
subst chn DDH3 into chn DDH2 then
fold chn DDH3 into chn PublicKey then 
drop read chn SecretKey from chn DDH2 then 
drop read chn SecretEphemeralKey from chn PublicKey then
drop read chn Key from chn PublicKey then 
fold chn Key into chn DDH2 then 
fold chn SecretEphemeralKey into chn DDH2 then
fold chn SecretKey into chn PublicKey
.

channel context delta = 
output PublicEphemeralKey[bound q] : msg ;
output LeakPublicKeyRecAdv : msg ; 
output Out[bound q] : msg ;
output LeakCtxtAdvNet[bound q] : (msg * msg) ;

input In[bound q] : msg ;
input OkCtxtAdvNet[bound q] : msg
.

protocol real = 
 newfamily Send[bound q] indices: i bounds: bound q : msg * msg in
 newfamily Recv[bound q] indices: i bounds: bound q : msg * msg in
 new PublicKey : msg in
 new SecretKey : key in
 newfamily SessionKey[bound q] indices: i bounds: bound q : msg in
 newfamily SecretEphemeralKey[bound q] indices: i bounds: bound q : key in
 alice || bob || autChannel
 where 
 alice = (
    (family SecretEphemeralKey[bound q] indices: i bounds: bound q ::= 
        samp unif_key (())
    )
    ||
    (family PublicEphemeralKey[bound q] indices: i bounds: bound q ::=
        ka : key <- read SecretEphemeralKey[i] ;
        return exp( (g(()), ka) ) 
    )
    ||
    (family SessionKey[bound q] indices: i bounds: bound q ::=
        pb : msg <- read PublicKey ;
        ka : key <- read SecretEphemeralKey[i] ;
        return exp( (pb, ka) ) 
    ) 
    ||
    (family Send [bound q] indices: i bounds: bound q ::=
        m : msg <- read In[i] ;
        k : msg <- read SessionKey[i] ;
        pa : msg <- read PublicEphemeralKey[i] ;
        return ( pa, mul((m, k)) ) 
    )  
 )
 and
 bob = 
 (
    ( SecretKey ::= samp unif_key (())
    )
    ||
    (PublicKey ::= 
        kb : key <- read SecretKey ; 
        return exp( (g(()), kb) )           
    )
    ||
    (LeakPublicKeyRecAdv ::=
        pk : msg <- read PublicKey ;
        return pk    
    )
    ||
    (family Out[bound q] indices: i bounds: bound q ::=
        r : msg * msg <- read Recv[i] ;
        kb : key <- read SecretKey ;       
        return mul( (snd r, inv( exp( (fst r, kb) ) )) )
    )
 )   
 and
 autChannel = 
 (
    (family LeakCtxtAdvNet[bound q] indices: i bounds: bound q ::=
        s : msg * msg <- read Send[i] ;
        return s       
    ) 
    ||
    (family Recv[bound q] indices: i bounds: bound q ::=
        okc : msg <- read OkCtxtAdvNet[i] ;
        s : msg * msg <- read Send[i] ;
        return s
    ) 
 )
  
.

protocol idealPlusSim =
   newfamily LeakMsgRcvdIdAdv[bound q] indices: i bounds: bound q : unit in
   newfamily OkMsgAdvId[bound q] indices: i bounds: bound q : msg in
   new PublicKey : msg in
   new SecretKey : key in
   newfamily SecretEphemeralKey[bound q] indices: i bounds: bound q : key in
   ideal || sim
   where
   ideal = (
    (family LeakMsgRcvdIdAdv[bound q] indices: i bounds: bound q ::=
        m : msg <- read In[i] ;
        return ()
    )
    ||
    (family Out[bound q] indices: i bounds: bound q ::=
        okm : msg <- read OkMsgAdvId[i] ;
        m : msg <- read In[i] ;
        return m
    )
   )
   and
   sim = (
    (family OkMsgAdvId[bound q] indices: i bounds: bound q ::=
        okc : msg <- read OkCtxtAdvNet[i] ;
        return okc 
    )
     ||
    ( SecretKey ::= samp unif_key (())
    )
    ||
    (PublicKey ::= 
        kb : key <- read SecretKey ; 
        return exp( (g(()), kb) )           
    )
    ||
    (LeakPublicKeyRecAdv ::=
        pk : msg <- read PublicKey ;
        return pk    
    )
    ||
    (family SecretEphemeralKey[bound q] indices: i bounds: bound q ::= 
        samp unif_key (())
    )
    ||
    (family PublicEphemeralKey[bound q] indices: i bounds: bound q ::=
        ka : key <- read SecretEphemeralKey[i] ;
        return exp( (g(()), ka) ) 
    )
    ||
    (family LeakCtxtAdvNet[bound q] indices: i bounds: bound q ::=
        lmr : unit <- read LeakMsgRcvdIdAdv[i] ;
        pa : msg <- read PublicEphemeralKey[i] ;
        c : msg <- samp unif_msg (()) ;
        return (pa, c)
    )
   )
.

`` start with p over deltaDDH2

`` call-approx rewriteDDH2

`` current-protocol

start with real over delta

subst fam Send[bound q] into fam Recv[bound q] then
fold fam Send[bound q] into fam LeakCtxtAdvNet[bound q] then
fold fam Recv[bound q] into fam Out[bound q] then 
subst fam SessionKey[bound q] into fam Out[bound q] then
subst chn PublicKey into fam Out[bound q] then
subst fam PublicEphemeralKey[bound q] into fam Out[bound q] then
use expression assumption commute on fam Out[bound q] at 1 then
drop read chn SecretKey from fam Out[bound q] then
drop read fam SecretEphemeralKey[bound q] from fam Out[bound q] then
fold chn SecretKey into chn PublicKey then 
sym from change fam PublicEphemeralKey[bound q] with 
  pb : msg <- read PublicKey ; ka : key <- read SecretEphemeralKey[i] ; return exp((g(()), ka))
in currentProtocol (
    drop read chn PublicKey from fam PublicEphemeralKey[bound q]
) then 
add internal family DDH2 indices: i bounds: bound q typed: msg * msg 
assigned: 
 pb : msg <- read PublicKey ;
 ka : key <- read SecretEphemeralKey[i] ;
 return ( exp((g(()), ka)) ,  exp((pb, ka)) ) then
 sym from change fam PublicEphemeralKey[bound q] with 
  x : msg * msg <- read DDH2[i] ; return fst x
 in currentProtocol (
    subst fam DDH2[bound q] into fam PublicEphemeralKey[bound q]
 ) then
 sym from change fam SessionKey[bound q] with 
  x : msg * msg <- read DDH2[i] ; return snd x
 in currentProtocol (
    subst fam DDH2[bound q] into fam SessionKey[bound q]
 ) then
 fold fam SecretEphemeralKey[bound q] into fam DDH2[bound q] then-approx
 in the presence of chn PublicKey 
 rewrite family DDH2[bound q] to
 preNF(nil, 
   ka : key <- samp unif_key(()) ; 
   kr : key <- samp unif_key(()) ; 
   return(exp((g(()), ka)), exp((g(()), kr)))
   )
  by generalization of rewriteDDH2 then-approx
sym from 
change fam DDH2[bound q] with 
 ka : key <- read SecretEphemeralKey[i] ; 
 kr : key <- read Key[i] ; 
 return(exp((g(()), ka)), exp((g(()), kr)))
in 
extend (
    extend currentProtocol with internal family SecretEphemeralKey indices: i bounds: bound q typed: key
assigned: samp unif_key(())
)
with internal family Key indices: i bounds: bound q typed: key
assigned: samp unif_key(()) (
    fold fam Key[bound q] into fam DDH2[bound q] then
    fold fam SecretEphemeralKey[bound q]  into fam DDH2[bound q]
) then
subst fam DDH2[bound q] into fam PublicEphemeralKey[bound q] then
fold fam DDH2[bound q] into fam SessionKey[bound q] then 
drop read fam Key[bound q] from fam PublicEphemeralKey[bound q] then
drop read fam SecretEphemeralKey[bound q] from fam SessionKey[bound q] then
sym from change chn PublicKey
with kb : key <- read SecretKey ; return exp((g(()), kb)) 
in extend currentProtocol with 
internal channel SecretKey typed: key
assigned: samp unif_key(()) (
    fold chn SecretKey into chn PublicKey
) then 
fold fam Key[bound q] into fam SessionKey[bound q] then
use assumption sampExp on fam SessionKey[bound q] then
add internal family Enc  indices: i bounds: bound q typed: msg
assigned: 
 k : msg <- read SessionKey[i] ; 
 m : msg <- read In[i] ;
 return mul((m, k)) then 
sym from change fam LeakCtxtAdvNet[bound q] 
with 
 c : msg <- read Enc[i] ;
 pa : msg <- read PublicEphemeralKey[i] ; 
 return(pa, c)
in currentProtocol(
    subst fam Enc[bound q] into fam LeakCtxtAdvNet[bound q]
) then
fold fam SessionKey[bound q] into fam Enc[bound q] then 
use assumption mulFixedMsg on fam Enc[bound q] then 
fold fam Enc[bound q] into fam LeakCtxtAdvNet[bound q] then 
sym from idealPlusSim(
    fold fam OkMsgAdvId[bound q] into fam Out[bound q] then
    fold fam LeakMsgRcvdIdAdv[bound q] into fam LeakCtxtAdvNet[bound q]
) 

check-proof idealPlusSim
    
current-protocol
eof





