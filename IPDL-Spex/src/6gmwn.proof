on branch isSemiHonest(n) 
 of family InShare$[bound (N + 1) bound (N + 2) dependentBound I](
   subst fam InIdAdv[bound N + 2 dependentBound I] 
    into fam InShare$[bound (N + 1) bound (N + 2) dependentBound I]
 ) 
 
 on branch isSemiHonest(n)
  of family InPartyAdv[bound (N + 2) dependentBound I] (
  subst fam InIdAdv[bound N + 2 dependentBound I] 
   into fam InPartyAdv[bound (N + 2) dependentBound I]
  )
  
 on branch isSemiHonest(n)
  of family InShare$PartyAdv[fixedBound N + 1 bound (N + 2) dependentBound I] ( 
  subst fam InIdAdv[bound N + 2 dependentBound I] 
   into fam InShare$PartyAdv[fixedBound N + 1 bound (N + 2) dependentBound I] then
   rename in to x in fam InShare$PartyAdv[fixedBound N + 1 bound (N + 2) dependentBound I]
 )
 
 on branch isSemiHonest(n)
  of family SendInSharePartyAdv[fixedBound (N + 1) bound (N + 2) dependentBound I] (
   subst fam InIdAdv[bound N + 2 dependentBound I] 
    into fam SendInSharePartyAdv[fixedBound (N + 1) bound (N + 2) dependentBound I] then
   rename in to x in fam SendInSharePartyAdv[fixedBound (N + 1) bound (N + 2) dependentBound I] 
 ) 
 
 on branch isHonest(n) 
  of family InShare$[bound (N + 1) bound (N + 2) dependentBound I] (
   subst fam InRcvdIdAdv[bound (N + 2) dependentBound I]
    into fam InShare$[bound (N + 1) bound (N + 2) dependentBound I]
 )
 
 on branch isHonest(n)
  of family InRcvdPartyAdv[bound (N + 2) dependentBound I] (
   subst fam InRcvdIdAdv[bound (N + 2) dependentBound I]
    into fam InRcvdPartyAdv[bound (N + 2) dependentBound I] then
    rename in to x in fam InRcvdPartyAdv[bound (N + 2) dependentBound I]
 ) 
 
 on branch isSemiHonest(n)
  of family OutPartyAdv[bound N + 2 bound K] (
  subst fam OutIdAdv[bound N + 2 bound K]
   into fam OutPartyAdv[bound N + 2 bound K] then
  rename out to s in fam OutPartyAdv[bound N + 2 bound K]
 ) 
 
 on branch (isSemiHonest(n) and isOutputWire(k))
  of family OutSharePartyAdv[bound (N + 2) fixedBound (N + 1) bound K] (
  subst fam OutIdAdv[bound N + 2 bound K]
   into fam OutSharePartyAdv[bound (N + 2) fixedBound (N + 1) bound K] 
 ) 
 
 on branch (isSemiHonest(n) and isOutputWire(k))
  of family OutShareSumPartyAdv[bound (N + 2) fixedBound (N + 1) bound K] (
  subst fam OutIdAdv[bound N + 2 bound K]
   into fam OutShareSumPartyAdv[bound (N + 2) fixedBound (N + 1) bound K]
 ) 
 
 on branch (isSemiHonest(n) and isOutputWire(k))
  of family RcvdOutSharePartyAdv[bound (N + 2) fixedBound (N + 1) bound K] (
   subst fam OutIdAdv[bound N + 2 bound K]
    into fam RcvdOutSharePartyAdv[bound (N + 2) fixedBound (N + 1) bound K]
  ) 
  
 on branch isOutputWire(k)
  of family Out [bound (N + 2) bound K] (
  rename out to w in fam Out [bound (N + 2) bound K] 
 )
 
 merge cases for fam InShare$[bound (N + 1) bound (N + 2) dependentBound I] 
 
 rename in to x in fam InShare$[bound (N + 1) bound (N + 2) dependentBound I] 
 
 absorb fam OutIdAdv[bound (N + 2) bound K]
 
 absorb fam InRcvdIdAdv[bound (N + 2) dependentBound I] 
 
 absorb fam InIdAdv[bound (N + 2) dependentBound I] 
 
 on branch isAndGate(k) of group Circ[bound K] (
 fix index for fam RcvdBit[bound N + 1 fixedBound N + 1 bound K ]
 )
