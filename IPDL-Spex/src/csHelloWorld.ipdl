 lang IPDL

 function xor : bool * bool -> bool .
   
 distribution flip : unit -> bool .

channel context delta = 
 input In : bool ;
 input X : bool ;
 output LeakCtxtAliceAdv : bool 
.

reaction-assumption flipInvariantXorFixed using x : 
   emptyCCtxt ; x : bool ; nil |= 
    y : bool <- samp flip (()) ; return  xor( (x, y) ) 
    = samp flip(()) .

expression-assumption %automatic xorIdemLeft using x y : (x : bool) (y : bool) |= xor( ( xor( (x, y) ) , y) ) = y .

protocol real =
    new Ctxt : bool in
    new Key : bool in
    (
    (Key ::= samp flip (()) ) 
    ||
    (Ctxt ::= m : bool <- read In ;                
       k : bool <- read Key ; 
       return xor((m, k)) )
    ||
    (LeakCtxtAliceAdv ::= c : bool <- read Ctxt ; return c)
    )
      .
    
protocol idealPlusSim =
 new LeakCtxtIdAdv : bool in
  (
   (LeakCtxtAliceAdv ::= c : bool <- read LeakCtxtIdAdv ; return c)
 ||
 (new Ctxt : bool
 in
   ((Ctxt ::= m : bool <- read In ; samp flip (()) )
  ||
  (LeakCtxtIdAdv ::= c : bool <- read Ctxt ; return c ) )
   )
  )
 .

start with real over delta then 
fold chn Key into chn Ctxt then
fold chn Ctxt into chn LeakCtxtAliceAdv then
use assumption flipInvariantXorFixed on LeakCtxtAliceAdv then 
sym from idealPlusSim (
   fold chn LeakCtxtIdAdv into chn LeakCtxtAliceAdv then 
   fold chn Ctxt into chn LeakCtxtAliceAdv
)   

check-proof idealPlusSim

 eof
 protocol test = 
 LeakCtxtAliceAdv ::= x : bool <- read X ; y : bool <- read In ; return  xor( ( xor( (x, y) ) , y) ) .

start with test over delta
current-protocol

eof


