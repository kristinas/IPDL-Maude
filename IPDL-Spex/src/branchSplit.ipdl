lang IPDL

import BASEGMWN .

parameter N : nat .
parameter K : nat .

`` Sigma

function xor : bool * bool -> bool .
function ** : bool * bool  -> bool .
function neg : bool -> bool .
distribution flip : unit -> bool .

`` assumptions

assumption %automatic andFalseLeft using x : 
   (x : bool)  |= 
   **( (False, x) ) = False .

    assumption %automatic andFalseRight using x : 
   (x : bool)  |= 
   **( (x, False) ) = False . 

   assumption %automatic andTrueLeft using x : 
   (x : bool)  |= 
   **( (True, x) ) = x .

    assumption %automatic andTrueRight using x : 
   (x : bool)  |= 
   **( (x, True) ) = x .
   
    assumption %automatic xorFalseLeft using x : 
   (x : bool)  |= 
   xor( (False, x) ) = x .

    assumption %automatic xorFalseRight using x : 
   (x : bool)  |= 
   xor( (x, False) ) = x . 
   
    assumption %automatic xorFalse using x : 
   (x : bool)  |= 
   xor( (x, x) ) = False . 
   
   assumption %automatic falseXor using x : 
   (x : bool)  |= 
   xor( (False, False) ) = False . 


hypothesis not (isNotGate(0)) .
hypothesis not (isXorGate(0)) .
hypothesis not (isAndGate(0)) .
hypothesis isHonest(N + 1) .

`` deltaReal 

channel context deltaReal =

input Share[bound N + 2 bound K] : bool ;
output OTChcRcvd-1OtAdv[bound N + 2 fixedBound N + 1 bound K] : unit ;
output ShareOK[bound N + 2 bound K]  : unit

.

protocol P = 
 new d : bool in
  (family ShareOK[bound N + 2 bound K] 
 indices: n, k 
 bounds: bound N + 2 bound K ::= 
  nf(x : bool <- read Share[n, k], return ())
) 
||
family Adv[bound K] indices: k bounds: bound K ::=
(
 
 (when isInputGate(k) --> 
  (
  (d ::= return True)
  ||
  (family OTChcRcvd-1OtAdv[bound N + 2 fixedBound N + 1 bound K] 
 indices: n, m, k 
 bounds: bound N + 2 fixedBound N + 1 bound K ::= 
  oc : unit <- read OTChcRcvd-1OtAdv[n, N + 1, k] ; return oc
  )
  )
 ) 
 ;;
 (when isAndGate(k) --> 
  (
  (d ::= return False)
  ||
  (family OTChcRcvd-1OtAdv[bound N + 2 fixedBound N + 1 bound K] 
 indices: n, m, k 
 bounds: bound N + 2 fixedBound N + 1 bound K ::= 
 (
 (when (n < N + 1) --> 
  nf(x : bool <- read Share[N + 1, wire1(k)], return ())
 ) 
 ;;
 (when (n = N + 1) -->
        oc : unit <- read OTChcRcvd-1OtAdv[n, N + 1, k] ; return oc
 ) 
 )
)
  )
 )


 
)    
.

start with P over deltaReal

on branch isAndGate(k) of group Adv[bound K](

sym from (change fam OTChcRcvd-1OtAdv[bound N + 2 fixedBound N + 1 bound K]  
    with 
       (when (n < N + 1) -->
         x : unit <- read ShareOK[N + 1, wire1(k)] ; return ()
       )
       ;;
       (when (n = N + 1) -->
        oc : unit <- read OTChcRcvd-1OtAdv[n, N + 1, k] ; return oc
       ) 
    in currentProtocol)(

on branch n < N + 1 of family OTChcRcvd-1OtAdv[bound N + 2 fixedBound N + 1 bound K](
subst fam ShareOK[bound N + 2 bound K]
into fam OTChcRcvd-1OtAdv[bound N + 2 fixedBound N + 1 bound K] 
)

)
)

current-protocol
eof

protocol P = 
 (d ::= return True)
||
family Adv[bound K] indices: k bounds: bound K ::=
(
 (when isInputGate(k) -->
( `` when
  (family ShareOK[bound N + 2 bound K] 
 indices: n, k 
 bounds: bound N + 2 bound K ::= 
  nf(x : bool <- read Share[n, k], return ())
) 
||
(family OTChcRcvd-1OtAdv[bound N + 2 fixedBound N + 1 bound K] 
 indices: n, m, k 
 bounds: bound N + 2 fixedBound N + 1 bound K ::= 
  nf(x : unit <- read ShareOK[N + 1, wire1(k)], return ())
)   
) `` when
) `` input gate
;;
(when isAndGate(k) -->
( `` when
  (family ShareOK[bound N + 2 bound K] 
 indices: n, k 
 bounds: bound N + 2 bound K ::= 
  nf(x : bool <- read Share[n, k], return ())
) 
||
(family OTChcRcvd-1OtAdv[bound N + 2 fixedBound N + 1 bound K] 
 indices: n, m, k 
 bounds: bound N + 2 fixedBound N + 1 bound K ::= 
  nf(x : unit <- read ShareOK[N + 1, wire1(k)], return ())
)   
) `` when
) `` input gate
).

start with P over deltaReal 

on branch isAndGate(k) of group Adv[bound K](
subst fam ShareOK[bound N + 2 bound K]
into fam OTChcRcvd-1OtAdv[bound N + 2 fixedBound N + 1 bound K] 
)

current-protocol
quit 

eof

    
   
  
