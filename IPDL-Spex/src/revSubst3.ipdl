lang IPDL

parameter N : nat .
parameter K : nat .

channel context Delta = 
 output RcvdBit[bound N + 2 bound N + 2 bound K] : bool ;
 output OTOutOtAdv[bound N + 2 bound N + 2 bound K] : bool ;
 output OTOut[bound N + 2 bound N + 2 bound K] : bool
.

protocol P = 
 (family RcvdBit[bound N + 2 bound N + 2 bound K] indices: m, n, k
    bounds: bound N + 2 bound N + 2 bound K ::= 
    nf(out : bool <- read OTOut[n, m, k], return out)
)
||
(    
family OTOutOtAdv[bound N + 2 bound N + 2 bound K] 
 indices: n, m, k bounds: bound N + 2 bound N + 2 bound K ::= 
  (when (isSemiHonest(m)) --> nf(out : bool <- read OTOut[n, m, k], return out) )
   ;; 
  (when (isHonest(m)) --> nf(out : bool <- read OTOutOtAdv[n, m, k], return out) )
)   
|| 
(family OTOut[bound N + 2 bound N + 2 bound K] 
 indices: n, m, k bounds:  bound N + 2 bound N + 2 bound K ::= 
  return True
) 
.

start with P over Delta then
on branch isSemiHonest(m) of family OTOutOtAdv[bound N + 2 bound N + 2 bound K](
reverse subst fam RcvdBit[bound N + 2 bound N + 2 bound K]
           in fam OTOutOtAdv[bound N + 2 bound N + 2 bound K]
        using fam OTOut[bound N + 2 bound N + 2 bound K] 
)
        
current-protocol   

eof

protocol P = 
 (family RcvdBit[bound N + 2 bound N + 2 bound K] indices: m, n, k
    bounds: bound N + 2 bound N + 2 bound K ::= 
    nf(out : bool <- read OTOut[n, m, k], return out)
)
||
(    
family OTOutOtAdv[bound N + 2 bound N + 2 bound K] 
 indices: n, m, k bounds: bound N + 2 bound N + 2 bound K ::= 
 nf(out : bool <- read OTOut[n, m, k], return out) 

)   
|| 
(family OTOut[bound N + 2 bound N + 2 bound K] 
 indices: n, m, k bounds:  bound N + 2 bound N + 2 bound K ::= 
  return True
) 
.

start with P over Delta then
reverse subst fam RcvdBit[bound N + 2 bound N + 2 bound K]
           in fam OTOutOtAdv[bound N + 2 bound N + 2 bound K]
        using fam OTOut[bound N + 2 bound N + 2 bound K] 

        
current-protocol 



eof     
