lang IPDL

import BASEGMWN .

parameter N : nat .
parameter K : nat .

`` Sigma

function xor : bool * bool -> bool .
function ** : bool * bool  -> bool .
function neg : bool -> bool .
distribution flip : unit -> bool .

`` assumptions

assumption %automatic andFalseLeft using x : 
   (x : bool)  |= 
   **( (False, x) ) = False .

    assumption %automatic andFalseRight using x : 
   (x : bool)  |= 
   **( (x, False) ) = False . 

   assumption %automatic andTrueLeft using x : 
   (x : bool)  |= 
   **( (True, x) ) = x .

    assumption %automatic andTrueRight using x : 
   (x : bool)  |= 
   **( (x, True) ) = x .
   
    assumption %automatic xorFalseLeft using x : 
   (x : bool)  |= 
   xor( (False, x) ) = x .

    assumption %automatic xorFalseRight using x : 
   (x : bool)  |= 
   xor( (x, False) ) = x . 
   
    assumption %automatic xorFalse using x : 
   (x : bool)  |= 
   xor( (x, x) ) = False . 
   
   assumption %automatic falseXor using x : 
   (x : bool)  |= 
   xor( (False, False) ) = False . 


hypothesis not (isNotGate(0)) .
hypothesis not (isXorGate(0)) .
hypothesis not (isAndGate(0)) .
hypothesis isHonest(N + 1) .

channel context delta = 

input In[bound N + 2 dependentBound I] : bool ;


output InShare[bound N + 2 bound N + 2 dependentBound I] : bool ;
output InPartyAdv[bound N + 2 dependentBound I] : bool ;
output InRcvdPartyAdv[bound N + 2 dependentBound I] : bool ;
output InSharePartyAdv[bound N + 2 bound N + 2 dependentBound I] : bool ;
output InShare$PartyAdv[bound N + 2 bound N + 2   dependentBound I] : bool ;
output InShare$-SumPartyAdv[bound N + 1 bound N + 2 dependentBound I] : bool ;
output RcvdInSharePartyAdv[bound N + 2 bound N + 2 dependentBound I] : bool ;
output SendInSharePartyAdv[bound N + 2 bound N + 2 dependentBound I] : bool ;
output   Out[bound N + 2 bound K] : bool ;
output   OutPartyAdv[bound N + 2 bound K] : bool ;
output   OutSharePartyAdv[bound N + 2 bound N + 2 bound K] : bool ;
output   OutShareSumPartyAdv[bound N + 2 bound N + 2 bound K] : bool ;
output   RcvdOutSharePartyAdv[bound N + 2 bound N + 2 bound K] : bool ;
output   SendOutSharePartyAdv[bound N + 2 bound N + 2 bound K] : bool


.

protocol test = 
   newfamily InShare[bound N + 2 bound N + 2 dependentBound I] 
              indices: n, m, i 
             bounds: bound N + 2 bound N + 2 dependentBound I : bool in   
   newfamily Share[bound N + 2 bound K]  
              indices: n, k 
             bounds: bound N + 2 bound K : bool in
 simplRestrInitial || restrFinal
where
 simplRestrInitial =
 ( newfamily InShare$[bound N + 2 bound N + 2 dependentBound I] 
  indices: m, n, i 
  bounds: bound N + 2 bound N + 2 dependentBound I : bool in
 newfamily InShare$-Sum[bound N + 1 bound N + 2 dependentBound I] 
  indices: m, n, i 
  bounds: bound N + 1 bound N + 2 dependentBound I : bool in
  (
  (family InPartyAdv[bound N + 2 dependentBound I]
  indices: n, i bounds: bound N + 2 dependentBound I ::= 
   (when (isSemiHonest(n)) --> 
     nf(in : bool <- read In[n, i], return in) 
   )  ;; 
   (when (isHonest(n)) --> nf(in : bool <- read InPartyAdv[n, i], return in)
   )
)
||
(
family InRcvdPartyAdv[bound N + 2 dependentBound I]
  indices: n, i bounds: bound N + 2 dependentBound I ::= 
  (when (isHonest(n)) --> 
    nf(x : bool <- read In[n, i], return () )
  ) ;;
  ( when (isSemiHonest(n)) --> nf(in : unit <- read InRcvdPartyAdv[n, i], return in)
  )
)
||
(
family InShare[bound N + 2 bound N + 2 dependentBound I]
  indices: n, m, i bounds: bound N + 2 bound N + 2 dependentBound I ::= 
 nf(in : bool <- read InShare$[n, m, i], return in)
)
||
(
family InShare$[bound N + 2 bound N + 2 dependentBound I]
  indices: m, n, i bounds: bound N + 2 bound N + 2 dependentBound I ::= 
  (when (m = N + 1) --> 
    nf((s : bool <- read InShare$-Sum[N, n, i]) 
        x : bool <- read In[n, i], 
        return xor((x, s)))
  ) ;; 
  (otherwise --> nf(x : bool <- read In[n, i], samp flip (()) )
  )
)
||
(
family InShare$-Sum[bound N + 1 bound N + 2 dependentBound I]
  indices: m, n, i bounds: bound N + 1 bound N + 2 dependentBound I ::= 
  (when (0 = m) --> 
    nf(in : bool <- read InShare$[0, n, i], return in) 
  ) ;; 
  (otherwise --> 
    nf((s : bool <- read InShare$-Sum[m - 1, n, i]) 
        x : bool <- read InShare$[m, n, i], 
        return xor((s, x)))
  )      
)
||
(
family InShare$-SumPartyAdv[bound N + 1 bound N + 2 dependentBound I]
  indices: m, n, i bounds: bound N + 1 bound N + 2 dependentBound I ::= 
  (when (isSemiHonest(n)) --> 
    nf(s : bool <- read InShare$-Sum[m, n, i], return s) 
  ) ;;
  (when (isHonest(n)) --> 
    nf(s : bool <- read InShare$-SumPartyAdv[m, n, i], return s)
  )  
)
||
(
family InShare$PartyAdv[bound N + 2 bound N + 2 dependentBound I]
  indices: m, n, i bounds: bound N + 2 bound N + 2 dependentBound I ::= 
 (when (isSemiHonest(n)) --> 
    nf(in : bool <- read InShare$[m, n, i], return in) 
 ) ;; 
 (when (isHonest(n)) --> 
   nf(in : bool <- read InShare$PartyAdv[m, n, i], return in)
 )  
)
||
(
family InSharePartyAdv[bound N + 2 bound N + 2 dependentBound I]
  indices: n, m, i bounds: bound N + 2 bound N + 2 dependentBound I ::= 
  (when (isSemiHonest(n)) --> nf(s : bool <- read InShare[n, m, i], return s)
  ) 
  ;; 
  (when (isHonest(n)) --> nf(s : bool <- read InSharePartyAdv[n, m, i], return s))
)
||
(
family RcvdInSharePartyAdv[bound N + 2 bound N + 2 dependentBound I]
  indices: n, m, i bounds: bound N + 2 bound N + 2 dependentBound I ::= 
  (when (isSemiHonest(n)) --> nf(in : bool <- read InShare$[n, m, i], return in) 
  ) ;; 
  (when (isHonest(n)) --> 
    nf(s : bool <- read RcvdInSharePartyAdv[n, m, i], return s)
  )  
)
||
(
family SendInSharePartyAdv[bound N + 2 bound N + 2 dependentBound I]
  indices: m, n, i bounds: bound N + 2 bound N + 2 dependentBound I ::= 
  (when (isSemiHonest(n)) --> 
    nf(in : bool <- read InShare$[m, n, i], return in)
  ) ;; 
  (when (isHonest(n)) --> 
    nf(s : bool <- read SendInSharePartyAdv[m, n, i], return s)
  )  
)
  )
)`` end simplRestrInitial  
and 
restrFinal = 
(
   newfamily SendOutShare[bound N + 2 bound N + 2 bound K ] 
              indices: m, n,  k 
             bounds: bound N + 2 bound N + 2 bound K : bool in          
   newfamily OutShare[bound N + 2 bound N + 2 bound K ] 
              indices: n, m, k
             bounds: bound N + 2 bound N + 2 bound K : bool in
   newfamily OutShareSum[bound N + 2 bound N + 2 bound K ] 
              indices: n, m, k
             bounds: bound N + 2 bound N + 2 bound K : bool in
   ( 
     (family SendOutShare[bound N + 2 bound N + 2 bound K ]  indices: m, n,  k
             bounds: bound N + 2 bound N + 2 bound K ::=
       (when (isOutputWire(k)) --> 
         s : bool <- read Share[n, k] ; return s
       ) 
       ;; 
       (when (not (isOutputWire(k))) --> 
         s : bool <- read SendOutShare[m, n, k] ; return s
       )       
     )
     ||
    (family SendOutSharePartyAdv
               [bound N + 2 bound N + 2 bound K ] 
              indices: m, n,  k
             bounds: bound N + 2 bound N + 2 bound K ::=
       (when (isSemiHonest(n)) --> 
         s : bool <- read SendOutShare[m, n, k] ; return s
       ) 
       ;; 
       (when (isHonest(n))  --> 
         s : bool <- read SendOutSharePartyAdv[m, n, k] ;
         return s
       )       
     )
     ||
     (family RcvdOutSharePartyAdv
               [bound N + 2 bound N + 2 bound K ] 
              indices: n, m, k
             bounds: bound N + 2 bound N + 2 bound K ::=
       (when (isSemiHonest(n)) --> 
         s : bool <- read SendOutShare[n, m, k] ; return s
       ) 
       ;; 
       (when (isHonest(n))  --> 
         s : bool <- read RcvdOutSharePartyAdv[n, m, k] ;
         return s
       )       
     )
     || 
     (family OutShare[bound N + 2 bound N + 2 bound K ]  indices: n, m, k
             bounds: bound N + 2 bound N + 2 bound K ::=
       s : bool <- read SendOutShare[n, m, k] ; return s       
     )
     ||
     (family OutSharePartyAdv[bound N + 2 bound N + 2 bound K ] 
              indices: n, m, k
             bounds: bound N + 2 bound N + 2 bound K ::=
       (when (isSemiHonest(n)) --> 
         s : bool <- read OutShare[n, m, k] ; return s
       ) 
       ;; 
       (when (isHonest(n))  --> 
         s : bool <- read OutSharePartyAdv[n, m, k] ;
         return s
       )       
     )
     ||
     (family OutShareSum[bound N + 2 bound N + 2 bound K ]  indices: n, m, k
             bounds: bound N + 2 bound N + 2 bound K ::=
       (when (m = 0) --> 
         s : bool <- read OutShare[n, 0, k] ;
         return s
       )
       ;;
       (otherwise -->
         s : bool <- read OutShareSum[n, m - 1, k] ;
         x : bool <- read OutShare[n, m, k] ;
         return xor((s, x))
       )
     )        
     ||
     (family OutShareSumPartyAdv
              [bound N + 2 bound N + 2 bound K ]  indices: n, m, k
             bounds: bound N + 2 bound N + 2 bound K ::=
       (when (isSemiHonest(n)) --> 
         s : bool <- read OutShareSum[n, m, k] ; return s
       ) 
       ;; 
       (when (isHonest(n))  --> 
         s : bool <- read OutShareSumPartyAdv[n, m, k] ;
         return s
       )       
     )
     ||
     (family Out[bound N + 2 bound K]  indices: n, k
            bounds: bound N + 2 bound K ::=
       s : bool <- read OutShareSum[n, N + 1, k] ;
       return s
     )
     ||
     (family OutPartyAdv[bound N + 2 bound K]  indices: n, k
             bounds: bound N + 2 bound K  ::=
       (when (isSemiHonest(n)) --> 
         s : bool <- read Out[n, k] ; return s
       ) 
       ;; 
       (when (isHonest(n))  --> 
         s : bool <- read OutPartyAdv[n, k] ;
         return s
       )       
     )
   ) `` end new

) `` ends restrFinal
.
