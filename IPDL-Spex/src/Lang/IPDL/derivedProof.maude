sload ./strategies.maude

mod SAME-REACTION-IF-SOUND is
 pr APPROX-EQUALITY .
 
 op Sigma : -> Signature .
 op Delta : -> ChannelContext .
 op Gamma : -> TypeContext .
 op I : -> Set{CNameBound} .
 op A : -> Set{BoolTerm} .
 
 op R : -> Reaction .
 op M : -> IPDLExpression .
 op T : -> IPDLType .
 
 eq typeOf(Sigma, Delta, Gamma, I, A, R) = T .  
 eq typeOf(Sigma, Gamma, M) = bool .
 
 
 var e : IPDLExpression .
 op q : -> Qid .
 eq R[q / e] = R . *** ensure that q is new for R 
 
endm 
 
 srew [1]
  rConfig(Sigma, Delta, Gamma, R, I, A, T)
 using react-subst[Gamma2:TypeContext <- Gamma (q : bool),
                   theta:IPDLSubst <- (q .> M), 
                   R1:Reaction <- R]{if-intro-ext} .
                   
mod ALPHA-SOUND is
 including APPROX-EQUALITY . 
 
 *** constants without definitions
 *** will be interpreted as any value of that type 
 
 op Sigma : -> Signature .
 op Delta : -> ChannelContext .
 op Gamma : -> TypeContext .
 ops vx vy : -> Qid .
 ops R1 R2 : -> Reaction .
 op I : -> Set{CNameBound} .
 op A : -> Set{BoolTerm} .
 ops T1 T2 : -> IPDLType .
 
 ***  I need this because I want
 ***  R2 to typecheck if the type context
 ***  has more than Gamma and (vx : T1)
 var Gamma' : TypeContext .
 
 *** assumptions 
 eq typeOf(Sigma, Delta, Gamma, I, A, R1) = T1 .
 eq typeOf(Sigma, Delta, 
           Gamma (vx : T1) Gamma', 
           I, A, R2) = T2 .
 
endm

srew [1] 
 rConfig(Sigma, Delta, Gamma, 
         vx : T1 <- R1 ; R2,
         I, A, T2)
 using sym[R1:Reaction <- 
            vx : T1 <- (vy : T1 <- R1 ; 
                        return vy) ; 
                        R2
          ]
       {cong-bind{bind-ret, idle}}  
     ; bind-bind  
     ; cong-bind{idle, ret-bind}         
 . 
 
mod IF-OVER-BIND-SOUND is
 pr APPROX-EQUALITY .
 
 op Sigma : -> Signature .
 op Delta : -> ChannelContext .
 op Gamma : -> TypeContext .
 op I : -> Set{CNameBound} .
 op A : -> Set{BoolTerm} .
 
 ops R R1 R2 : -> Reaction .
 op M : -> IPDLExpression .
 ops T T1 : -> IPDLType .
 
 op x : -> Qid . 
 
 var e : IPDLExpression .
 var Gamma' : TypeContext .
 op q : -> Qid .
 eq R1[q / e] = R1 . *** ensure that q is new
 eq R2[q / e] = R2 .
 eq R[q / e]  = R . 
 
 eq typeOf(Sigma, Delta, Gamma Gamma', I, A, R1) = T1 . 
 eq typeOf(Sigma, Delta, Gamma Gamma', I, A, R2) = T1 . 
 eq typeOf(Sigma, Delta, Gamma (x : T1) Gamma', I, A, R) = T .  
 eq typeOf(Sigma, Gamma Gamma', M) = bool .             

endm        
                
 srew [1]
  rConfig(Sigma, Delta, Gamma, 
             x : T1 <- if M then R1 else R2 ; 
             R , I, A, T) 
  using            
   react-subst[Gamma2:TypeContext <- Gamma (q : bool),
              theta:IPDLSubst <- (q .> M), 
              R1:Reaction <- x : T1 <- if q then R1 else R2 ; R]{
       if-intro-ext 
     ; cong-if{cong-bind{if-left, idle}, 
                cong-bind{if-right, idle}, idle}
   } .   
                                                   
  
mod BIND-OVER-IF-SOUND is
 pr APPROX-EQUALITY .
 
 op Sigma : -> Signature .
 op Delta : -> ChannelContext .
 op Gamma : -> TypeContext .
 op I : -> Set{CNameBound} .
 op A : -> Set{BoolTerm} .
 
 ops R R1 R2 : -> Reaction .
 op M : -> IPDLExpression .
 ops T T1 : -> IPDLType .
 
 op x : -> Qid . 
 
 var e : IPDLExpression .
 var Gamma' : TypeContext .
 op q : -> Qid .
 eq R1[q / e] = R1 . *** ensure that q is new
 eq R2[q / e] = R2 .
 eq R[q / e] = R .
 
 eq typeOf(Sigma, Delta, Gamma Gamma', I, A, R) = T . 
 eq typeOf(Sigma, Delta, Gamma (x : T1) Gamma', I, A, R1) = T . 
 eq typeOf(Sigma, Delta, Gamma (x : T1) Gamma', I, A, R2) = T .   
 eq typeOf(Sigma, Gamma Gamma', M) = bool .             

endm    
               
srew [1]
  rConfig(Sigma, Delta, Gamma, 
             x : T1 <- R ; 
            if M then R1 else R2, I, A, T)  
  using react-subst[Gamma2:TypeContext <- Gamma (q : bool),
              theta:IPDLSubst <- (q .> M), 
              R1:Reaction <- x : T1 <- R ; if q then R1 else R2]{
       if-intro-ext 
     ; cong-if{cong-bind{idle, if-left}, 
                cong-bind{idle, if-right}, idle}
   } .                              
   
mod IF-OVER-BIND-SAME-SOUND is
 pr APPROX-EQUALITY .
 
 op Sigma : -> Signature .
 op Delta : -> ChannelContext .
 op Gamma : -> TypeContext .
 op I : -> Set{CNameBound} .
 op A : -> Set{BoolTerm} .
 
 ops R1 R2 R3 R4 : -> Reaction .
 op M : -> IPDLExpression .
 ops T T1 : -> IPDLType .
 
 op x : -> Qid . 
 
 var e : IPDLExpression .
 var Gamma' : TypeContext .
 op q : -> Qid .
 eq R1[q / e] = R1 . *** ensure that q is new
 eq R2[q / e] = R2 .
 eq R3[q / e] = R3 .
 eq R4[q / e] = R4 .
  
 eq typeOf(Sigma, Delta, Gamma Gamma', I, A, R1) = T1 . 
 eq typeOf(Sigma, Delta, Gamma Gamma', I, A, R2) = T1 .
 eq typeOf(Sigma, Delta, Gamma (x : T1) Gamma', I, A, R3) = T . 
 eq typeOf(Sigma, Delta, Gamma (x : T1) Gamma', I, A, R4) = T .   
 eq typeOf(Sigma, Gamma Gamma', M) = bool .             

endm      
        
  srew [1] 
  rConfig(Sigma, Delta, Gamma, 
     x : T1 <- if M then R1 else R2 ; 
     if M then R3 else R4, 
     I, A, T) 
 using react-subst[Gamma2:TypeContext <- Gamma (q : bool),
              theta:IPDLSubst <- (q .> M), 
              R1:Reaction <- x : T1 <- if q then R1 else R2 ; 
                             if q then R3 else R4]{
       if-intro-ext 
     ; cong-if{cong-bind{if-left, if-left}, 
                cong-bind{if-right, if-right}, idle}
   } .                    
