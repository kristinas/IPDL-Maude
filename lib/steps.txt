==========================================
==========================================
 op prot0 : -> Protocol .
  eq prot0 = 
     (
    (family 'AllCommitted1 'i (bound (n + 2)) ::= 
        (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
        ;;
        ( otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                           ('y : unit <- read ('Committed['i -- 1])), 
                           return (), 'x :: 'y :: emptyCNameList)
        )                   
     ) 
     || 
     (family 'Committed 'i (bound (n + 1)) ::= 
        nf('x : bool <- read ('Commit['i]), return (), 'x :: emptyCNameList)) 
     || 
     (family 'LeakCommitted_comm_adv 'i  (bound (n + 1)) ::= 
        nf('committed : unit <- read ('Committed['i]), 
           return 'committed, 
           'committed :: emptyCNameList)) 
     || 
     (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
        nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)) 
     || 
     (family 'Opened 'i (bound (n + 1)) ::= 
        nf( ('commit : bool <- read ('Commit['i])) 
            ('x : unit <- read ('Open['i])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
     ) 
     )
     ||	 
     ('AllCommitted ['i 0] ::= nf(emptyBRList, return (), emptyCNameList) )
     || 
     (family 'Commit 'i (bound (n + 1)) ::= 
        nf( emptyBRList, samp flip, emptyCNameList)) 
     || 
     
     (family 'Open 'i (bound (n + 1)) ::= 
        nf('x : unit <- read ('AllCommitted['i (n + 2)]), return (), 'x :: emptyCNameList)) 
     || 

     (family 'Out 'i (bound (n + 1)) ::= 
        nf('sumOpened : bool <- read ('SumOpened['i (n + 2)]), 
            return 'sumOpened, 
            'sumOpened :: emptyCNameList)
     ) 
     || 
     family 'SumOpened ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) ::= 
       (when (0 =T= 'j) --> nf(emptyBRList, return False, emptyCNameList)) 
       ;; 
       (otherwise --> nf(('x : bool <- read ('SumOpened['i ('j -- 1)])) 
                         ('y : bool <- read ('Opened['j -- 1])), 
                         return (ap 'xor pair('x, 'y)), 
                         'x :: 'y :: emptyCNameList)
       )                  
     
  .
  
  op prot01 : -> Protocol .
  eq prot01 = 
     
    (family 'AllCommitted1 'i (bound (n + 2)) ::= 
        (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
        ;;
        ( otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                           ('y : unit <- read ('Committed['i -- 1])), 
                           return (), 'x :: 'y :: emptyCNameList)
        )                   
     ) 
     || 
     (family 'Committed 'i (bound (n + 1)) ::= 
        nf('x : bool <- read ('Commit['i]), return (), 'x :: emptyCNameList)) 
     ||
     (family 'AllCommitted ('i 'j) ( (bound (n + 1)) (uniformBound 'k) ) ::= 
       nf('x : unit <- read ('AllCommitted1['j]), return 'x, 'x :: emptyCNameList)   
     )
     ||
     ('AllCommitted ['i ('k ++ 1)] ::= nf( ('x : unit <- read ('AllCommitted ['i 'k] ))
                            ('y : unit <- read ('Committed ['k]) ),
                            return (),  
                            'x :: 'y :: emptyCNameList
                             ) 
     )
     || 
     (family 'Commit 'i (bound (n + 1)) ::= 
        nf( emptyBRList, samp flip, emptyCNameList)) 
     
  .
        

***( sym proof for ideal plus sim:
srew [1] pConfig(secSig, 
                 ('AdvCommit_adv_party @ (n + 1) :: bool) 
    ('AdvOpen_adv_party @ (n + 1) :: unit) 
    ('Out @ (n + 1) :: bool),
                 idealPlusSim,
                 insert('AdvCommit_adv_party @ (n + 1), 'AdvOpen_adv_party @ (n + 1)), 
    'Out @ (n + 1),
                 insert(apply 'honest (n + 1), empty)
                ) 
   using   sugar-newNF   
         ; smart-subst-nf('LeakFlip_id_adv, 'LastCommit )
         ; absorbChannel('LeakFlip_id_adv)
         ; applySubstChannelBranch('Out, 'Ok_adv_id)
         ; absorbChannel('Ok_adv_id)
         ; applyCaseDistBranch2('SumCommit, 'LastCommit)
         ; applyBranch2MoveReads('Out)                              
         ; applyBranch2SubstRev('Out, 'SumCommit, n + 2, 'sc, bool,
             nf( ('f : bool <- read 'Flip) 
                 ('x : bool <- read ('SumCommit [ n + 1 ])) ,
                   return 'f ,
                   'x :: 'f :: emptyCNameList )
                   )        
                   
         ; SYM[P1:Protocol <- i1]{
             sugar-newNF
           ; applyCaseDistBranch2('SumCommit, 'LastCommit) 
         }                
         ; sugar-newNF
         ; foldNF('Flip, 'LastCommit) 
         ; applyAR('LastCommit)
         ; SYM[P1:Protocol <- i2]{
            foldNF('Commit[n + 1], 'LastCommit) 
         }                        
         ; wrap-channel-family
         ; applyCaseDistBranch2('SumCommit, 'LastCommit)
         ; absorbChannel('LastCommit) 
         ; SYM[P1:Protocol <- i3]{
             unwrap-channel-family[C:Qid <- 'Commit]
      ; unwrap-channel-family[C:Qid <- 'Committed]
      ; applyUnusedNF('Commit[n + 1], 'Committed[n + 1])
      ; wrap-channel-family[C:Qid <- 'Commit]
      ; wrap-channel-family-new-R[C:Qid <- 'Committed]
         } 
         ; merge-cases[C:Qid <- 'SumCommit]
         ; applyReorderNF('Out, 'ao :: 'sc :: emptyCNameList)
         
.)


***(
srew [1]
pConfig(secSig, 
    ('AllCommitted1 @ (n + 2) :: unit)
    ('SumOpened1 @ (n + 2) :: bool)
    ('AdvCommit_adv_party @ (n + 1) :: bool) 
    ('AdvOpen_adv_party @ (n + 1) :: unit) 
    ('Out @ (n + 1) :: bool)
    ('Commit @ (n + 1) :: bool) 
    ('Committed @ (n + 1) :: unit)
    ('LeakCommitted_comm_adv @ (n + 1) :: unit)
    ('LeakOpened_comm_adv @ (n + 1) :: bool)
    ('Open  @ (n + 1) :: unit)
    ('Opened @ (n + 1) :: bool),
 prot5,
       
         insert('AdvCommit_adv_party @ (n + 1), 'AdvOpen_adv_party @ (n + 1)), 
               insert('SumOpened1 @ (n + 2) , 
        insert('AllCommitted1 @ (n + 2),
         insert('Commit @ (n + 1),  
          insert('Committed @ (n + 1),
           insert('LeakCommitted_comm_adv @ (n + 1),
            insert('LeakOpened_comm_adv @ (n + 1),
             insert('Open  @ (n + 1),
              insert('Opened @ (n + 1),
                     'Out @ (n + 1)
                     ))))))
               )
               ), 
    apply 'honest (n + 1)
)
 using    COMP-NEW-newNF
          ; absorbFamily('SumOpened)
          ; (SYM[P1:Protocol <- prot6]{COMP-NEW-newNF})
               
  .
)


***( induction base!
srew [1]
pConfig(secSig, 
    ('AllCommitted1 @ (n + 2) :: unit)
    ('AllCommitted @ ((n + 1)(n + 2)) :: unit)
    ('AdvCommit_adv_party @ (n + 1) :: bool) 
    ('AdvOpen_adv_party @ (n + 1) :: unit) 
    ('Out @ (n + 1) :: bool)
    ('Commit @ (n + 1) :: bool) 
    ('Committed @ (n + 1) :: unit)
    ('LeakCommitted_comm_adv @ (n + 1) :: unit)
    ('LeakOpened_comm_adv @ (n + 1) :: bool)
    ('Open  @ (n + 1) :: unit)
    ('Opened @ (n + 1) :: bool)
    ('SumOpened @ ((n + 1) (n + 2)) :: bool) ,
    prot0,
     insert('AdvCommit_adv_party @ (n + 1), 'AdvOpen_adv_party @ (n + 1)), 
     getOutputs(prot0)
   , 
    insert('j =T= 0, insert('i <=T n + 1, apply 'honest (n + 1)) )
) using applySubstRevFamily('AllCommitted1, 'AllCommitted ['i 0], unit)
.   
  )

  ***( induction step
srew [1]
pConfig(secSig, 
    ('AllCommitted1 @ (n + 2) :: unit)
    ('AllCommitted @ ((n + 1)(n + 2)) :: unit)
    ('AdvCommit_adv_party @ (n + 1) :: bool) 
    ('AdvOpen_adv_party @ (n + 1) :: unit) 
    ('Out @ (n + 1) :: bool)
    ('Commit @ (n + 1) :: bool) 
    ('Committed @ (n + 1) :: unit)
    ('LeakCommitted_comm_adv @ (n + 1) :: unit)
    ('LeakOpened_comm_adv @ (n + 1) :: bool)
    ('Open  @ (n + 1) :: unit)
    ('Opened @ (n + 1) :: bool)
    ('SumOpened @ ((n + 1) (n + 2)) :: bool) ,
    prot01,
     insert('AdvCommit_adv_party @ (n + 1), 'AdvOpen_adv_party @ (n + 1)), 
     getOutputs(prot01)
   , 
    insert( 'k <T n + 2,
    insert('k ++ 1 <=T n + 2, insert('i <=T n + 1, apply 'honest (n + 1)) )
    )
) using 
          nTimesSubstNFReadFamilyTwo('AllCommitted, 'AllCommitted['i ('k ++ 1)]) 
        ; nTimesSubstFamiliesOne('AllCommitted1, 'AllCommitted['i ('k ++ 1)], 'k ++ 1, unit)
.   
 ) 
==========================================
==========================================
 
*** ind step, start of sym proof
srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool)
    ('Commit @ (n + 1) :: bool)
          ('Committed @ (n + 1) :: unit)
          ('LeakCommitted_comm_adv @ (n + 1) :: unit)
          ('LeakOpened_comm_adv @ (n + 1) :: bool)
          ('Open @ (n + 1) :: unit) 
          ('Opened @ (n + 1) :: bool)
          ('SumOpened1 @ (n + 2) :: bool)
          ('SumCommit @ (n + 2) :: bool)
          ('AllOpen @ (n + 2) :: unit)
     ,
     (family 'SumOpened1 'i (bound 'k) ::= 
                       nf(('ao : unit <- read ('AllOpen['i])) 
                          ('sc : bool <- read ('SumCommit['i])),
                          return 'sc,
                          'ao :: 'sc :: emptyCNameList )
     )
     || 
     ('SumOpened1['k ++ 1] ::= nf(('x : bool <- read ('SumOpened1['k]))
                      ('o : bool <- read ('Opened['k])),
                      return (ap 'xor pair('x, 'o)),
                      'x :: 'o :: emptyCNameList
                     )
     )
     ||      
       (family 'SumCommit 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
              ;; 
              otherwise --> nf(('cj : bool <- read ('Commit['i -- 1])) 
                                'xj : bool <- read ('SumCommit['i -- 1]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
          )
           || (family 'AllOpen 'i (bound(n + 2)) ::=
                   (when ('i =T= 0) --> nf(emptyBRList, return (), emptyCNameList))
                   ;;
                   (otherwise --> 
                      nf(('x : unit <- read ('AllOpen['i -- 1]))
                         ('y : unit <- read ('Open['i -- 1])),
                         return (),
                      'x :: 'y :: emptyCNameList)
                   )
         )       
     || 
     (family 'Commit 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> nf(emptyBRList, samp flip, emptyCNameList)) 
             ;; 
             otherwise --> nf('advCommit : bool <- read ('AdvCommit_adv_party['i]), 
                              return 'advCommit, 'advCommit :: emptyCNameList)
          ) 
     || 
     (family 'Committed 'i (bound (n + 1)) ::= 
             nf('x : bool <- read ('Commit['i]), 
                return (), 
                'x :: emptyCNameList)
          ) 
     ||  
     (family 'LeakCommitted_comm_adv 'i  (bound (n + 1)) ::= 
        nf('committed : unit <- read ('Committed['i]), 
           return 'committed, 
           'committed :: emptyCNameList)) 
     ||
     (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
        nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)) 
     ||     
     (family 'Open 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> 
                nf('sc : bool <- read ('SumCommit[n + 2]), 
                   return (), 
                   'sc :: emptyCNameList)
             ) 
             ;;
             otherwise --> nf('advOpen : unit <- read ('AdvOpen_adv_party['i]), 
                               return 'advOpen, 'advOpen :: emptyCNameList)
           ) 
     || 
     (family 'Opened 'i (bound (n + 1)) ::= 
        nf( ('commit : bool <- read ('Commit['i])) 
            ('x : unit <- read ('Open['i])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
     ) 
     || 
     ( family 'Out 'i (bound (n + 1)) ::= 
               (when (apply 'honest 'i) --> 
                  nf('x : bool <- read ('SumOpened1[n + 2]), 
                     return 'x, 
                     'x :: emptyCNameList)
               ) ;;
               otherwise --> 
                   nf('out : bool <- read ('Out['i]), return 'out, 'out :: emptyCNameList)
           ) 
                  
    , 
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using 
  substNFFamilyOne('SumOpened1, 'SumOpened1['k ++ 1], 
                         nf(('ao : unit <- read ('AllOpen['k])) 
                          ('sc : bool <- read ('SumCommit['k])),
                          return 'sc,
                          'ao :: 'sc :: emptyCNameList )
                             ) 
 ; substNFFamilyOne('Opened, 'SumOpened1['k ++ 1], 
                            nf( ('commit : bool <- read ('Commit['k])) 
            ('x : unit <- read ('Open['k])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
                    )
  ; SYM[P1:Protocol <- prot100]
  {
  substNFFamilyOne('AllOpen, 'SumOpened1['k ++ 1], 
                         nf(('x : unit <- read ('AllOpen['k]))
                         ('y : unit <- read ('Open['k])),
                         return (),
                      'x :: 'y :: emptyCNameList)
                             )
   ; substNFFamilyOne('SumCommit, 'SumOpened1['k ++ 1], 
                         nf(('cj : bool <- read ('Commit['k])) 
                                'xj : bool <- read ('SumCommit['k]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
                             ) 
   ; applyAlphaNFPr('SumOpened1['k ++ 1],
         
        << 'x,'ao >> 
        << 'cj,'commit >> 
        << 'y,'x >>
        << 'xj,'sc >>
         emptyQidPairList)  
   ; changeOrder('SumOpened1['k ++ 1], 
     'ao :: 'sc :: 'x :: 'commit :: emptyCNameList)
  }                      
.

srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool)
    ('Commit @ (n + 1) :: bool)
          ('Committed @ (n + 1) :: unit)
          ('LeakCommitted_comm_adv @ (n + 1) :: unit)
          ('LeakOpened_comm_adv @ (n + 1) :: bool)
          ('Open @ (n + 1) :: unit) 
          ('Opened @ (n + 1) :: bool)
          ('SumOpened1 @ (n + 2) :: bool)
          ('SumCommit @ (n + 2) :: bool)
          ('AllOpen @ (n + 2) :: unit)
     ,
     prot100
                  
    , 
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using substNFFamilyOne('AllOpen, 'SumOpened1['k ++ 1], 
                         nf(('x : unit <- read ('AllOpen['k]))
                         ('y : unit <- read ('Open['k])),
                         return (),
                      'x :: 'y :: emptyCNameList)
                             )
   ; substNFFamilyOne('SumCommit, 'SumOpened1['k ++ 1], 
                         nf(('cj : bool <- read ('Commit['k])) 
                                'xj : bool <- read ('SumCommit['k]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
                             ) 
   ; applyAlphaNFPr('SumOpened1['k ++ 1],
         
        << 'x,'ao >> 
        << 'cj,'commit >> 
        << 'y,'x >>
        << 'xj,'sc >>
         emptyQidPairList)  
   ; changeOrder('SumOpened1['k ++ 1], 
     'ao :: 'sc :: 'x :: 'commit :: emptyCNameList)
.

***(
substNFFamilyOne('AllOpen, 'SumOpened1['k ++ 1], 
                         nf(('x : unit <- read ('AllOpen['k]))
                         ('y : unit <- read ('Open['k])),
                         return (),
                      'x :: 'y :: emptyCNameList)
                             )
     ; substNFFamilyOne('SumCommit, 'SumOpened1['k ++ 1], 
                         nf(('cj : bool <- read ('Commit['k])) 
                                'xj : bool <- read ('SumCommit['k]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
                             )                         
    ; SYM[P1:Protocol <- prot100]
      {substNFFamilyOne('SumOpened1, 'SumOpened1['k ++ 1], 
                         nf(('ao : unit <- read ('AllOpen['k])) 
                          ('sc : bool <- read ('SumCommit['k])),
                          return 'sc,
                          'ao :: 'sc :: emptyCNameList )
                             ) 
 ; substNFFamilyOne('Opened, 'SumOpened1['k ++ 1], 
                            nf( ('commit : bool <- read ('Commit['k])) 
            ('x : unit <- read ('Open['k])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
                             )    
 ;     applyAlphaNFPr('SumOpened1['k ++ 1],
        << 'x,'y >> 
        << 'ao,'x >> 
        << 'commit,'cj >> 
        << 'sc,'xj >>
         emptyQidPairList)  
 ; changeOrder('SumOpened1['k ++ 1], 
     'x :: 'y :: 'xj :: 'cj :: emptyCNameList)
     }                                               
)

 ***( ind step, direct

srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool), 
    newNF({'Commit 'i (bound (n + 1)) : bool} 
          {'Committed 'i (bound (n + 1)) : unit} 
          {'LeakCommitted_comm_adv 'i (bound (n + 1)) : unit} 
          {'LeakOpened_comm_adv 'i (bound (n + 1)) : bool} 
          {'Open 'i (bound (n + 1)) : unit} 
          {'Opened 'i (bound (n + 1)) : bool}
          {'SumOpened1 'i (uniformBound (n + 2)) : bool}
          {'SumCommit 'i (uniformBound (n + 2)) : bool}
          {'AllOpen 'i (bound (n + 2)) : unit} 
     ,
     (family 'SumOpened1 'i (bound 'k) ::= 
                       nf(('ao : unit <- read ('AllOpen['i])) 
                          ('sc : bool <- read ('SumCommit['i])),
                          return 'sc,
                          'ao :: 'sc :: emptyCNameList )
     )
     || 
     ('SumOpened1['k ++ 1] ::= nf(('x : bool <- read ('SumOpened1['k]))
                      ('o : bool <- read ('Opened['k])),
                      return (ap 'xor pair('x, 'o)),
                      'x :: 'o :: emptyCNameList
                     )
     )
     ||      
       (family 'SumCommit 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
              ;; 
              otherwise --> nf(('cj : bool <- read ('Commit['i -- 1])) 
                                'xj : bool <- read ('SumCommit['i -- 1]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
          )
           || (family 'AllOpen 'i (bound(n + 2)) ::=
                   (when ('i =T= 0) --> nf(emptyBRList, return (), emptyCNameList))
                   ;;
                   (otherwise --> 
                      nf(('x : unit <- read ('AllOpen['i -- 1]))
                         ('y : unit <- read ('Open['i -- 1])),
                         return (),
                      'x :: 'y :: emptyCNameList)
                   )
         )       
     || 
     (family 'Commit 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> nf(emptyBRList, samp flip, emptyCNameList)) 
             ;; 
             otherwise --> nf('advCommit : bool <- read ('AdvCommit_adv_party['i]), 
                              return 'advCommit, 'advCommit :: emptyCNameList)
          ) 
     || 
     (family 'Committed 'i (bound (n + 1)) ::= 
             nf('x : bool <- read ('Commit['i]), 
                return (), 
                'x :: emptyCNameList)
          ) 
     ||  
     (family 'LeakCommitted_comm_adv 'i  (bound (n + 1)) ::= 
        nf('committed : unit <- read ('Committed['i]), 
           return 'committed, 
           'committed :: emptyCNameList)) 
     ||
     (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
        nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)) 
     ||     
     (family 'Open 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> 
                nf('sc : bool <- read ('SumCommit[n + 2]), 
                   return (), 
                   'sc :: emptyCNameList)
             ) 
             ;;
             otherwise --> nf('advOpen : unit <- read ('AdvOpen_adv_party['i]), 
                               return 'advOpen, 'advOpen :: emptyCNameList)
           ) 
     || 
     (family 'Opened 'i (bound (n + 1)) ::= 
        nf( ('commit : bool <- read ('Commit['i])) 
            ('x : unit <- read ('Open['i])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
     ) 
     || 
     ( family 'Out 'i (bound (n + 1)) ::= 
               (when (apply 'honest 'i) --> 
                  nf('x : bool <- read ('SumOpened1[n + 2]), 
                     return 'x, 
                     'x :: emptyCNameList)
               ) ;;
               otherwise --> 
                   nf('out : bool <- read ('Out['i]), return 'out, 'out :: emptyCNameList)
           ) 
                  
     , 
     'Commit :: 'Committed :: 'LeakCommitted_comm_adv ::
     'LeakOpened_comm_adv :: 'Open :: 'Opened :: 
     'SumOpened1 :: 'SumCommit :: 'AllOpen ::
     emptyCNameList
     ), 
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using                         
 substNFFamilyOne('SumOpened1, 'SumOpened1['k ++ 1], 
                         nf(('ao : unit <- read ('AllOpen['k])) 
                          ('sc : bool <- read ('SumCommit['k])),
                          return 'sc,
                          'ao :: 'sc :: emptyCNameList )
                             ) 
 ; substNFFamilyOne('Opened, 'SumOpened1['k ++ 1], 
                            nf( ('commit : bool <- read ('Commit['k])) 
            ('x : unit <- read ('Open['k])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
                             )    
 ;     applyAlphaNFPr('SumOpened1['k ++ 1],
        << 'x,'y >> 
        << 'ao,'x >> 
        << 'commit,'cj >> 
        << 'sc,'xj >>
         emptyQidPairList)  
 ; changeOrder('SumOpened1['k ++ 1], 
    'x :: 'y :: 'xj :: 'cj :: emptyCNameList)

.                               
)
  
***( ind base 

srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool), 
    newNF({'Commit 'i (bound (n + 1)) : bool} 
          {'Committed 'i (bound (n + 1)) : unit} 
          {'LeakCommitted_comm_adv 'i (bound (n + 1)) : unit} 
          {'LeakOpened_comm_adv 'i (bound (n + 1)) : bool} 
          {'Open 'i (bound (n + 1)) : unit} 
          {'Opened 'i (bound (n + 1)) : bool}
          {'SumOpened1 'i (uniformBound (n + 2)) : bool}
          {'SumCommit 'i (uniformBound (n + 2)) : bool}
          {'AllOpen 'i (bound (n + 2)) : unit} 
     ,
     ( 
     projectIndex (family 'SumOpened1 'i (bound(n + 2)) ::= 
                (when ('i =T= 0) --> nf(emptyBRList, return False, emptyCNameList)) ;;
                (otherwise --> 
                   nf(('x : unit <- read ('SumOpened1['i -- 1]))
                      ('o : unit <- read ('Opened['i -- 1])),
                      return (ap 'xor pair('x, 'o)),
                      'x :: 'o :: emptyCNameList
                     )
                )                 
     )      
     0 (insert('i <=T (n + 1), 'j =T= 0)) empty
     ) *** end project 
     || (family 'AllOpen 'i (bound(n + 2)) ::=
                   (when ('i =T= 0) --> nf(emptyBRList, return (), emptyCNameList))
                   ;;
                   (otherwise --> 
                      nf(('x : unit <- read ('AllOpen['i -- 1]))
                         ('y : unit <- read ('Open['i -- 1])),
                         return (),
                      'x :: 'y :: emptyCNameList)
                   )
         )    
          ||
     (family 'SumCommit 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
              ;; 
              otherwise --> nf(('cj : bool <- read ('Commit['i -- 1])) 
                                'xj : bool <- read ('SumCommit['i -- 1]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
          )
     || 
     (family 'Commit 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> nf(emptyBRList, samp flip, emptyCNameList)) 
             ;; 
             otherwise --> nf('advCommit : bool <- read ('AdvCommit_adv_party['i]), 
                              return 'advCommit, 'advCommit :: emptyCNameList)
          ) 
     || 
     (family 'Committed 'i (bound (n + 1)) ::= 
             nf('x : bool <- read ('Commit['i]), 
                return (), 
                'x :: emptyCNameList)
          ) 
     ||  
     (family 'LeakCommitted_comm_adv 'i  (bound (n + 1)) ::= 
        nf('committed : unit <- read ('Committed['i]), 
           return 'committed, 
           'committed :: emptyCNameList)) 
     ||
     (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
        nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)) 
     ||     
     (family 'Open 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> 
                nf('x : unit <- read ('SumCommit[n + 2]), 
                   return (), 
                   'x :: emptyCNameList)
             ) 
             ;;
             otherwise --> nf('advOpen : unit <- read ('AdvOpen_adv_party['i]), 
                               return 'advOpen, 'advOpen :: emptyCNameList)
           ) 
     || 
     (family 'Opened 'i (bound (n + 1)) ::= 
        nf( ('commit : bool <- read ('Commit['i])) 
            ('x : unit <- read ('Open['i])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
     ) 
     || 
     ( family 'Out 'i (bound (n + 1)) ::= 
               (when (apply 'honest 'i) --> 
                  nf('x : bool <- read ('SumOpened1[n + 2]), 
                     return 'x, 
                     'x :: emptyCNameList)
               ) ;;
               otherwise --> 
                   nf('out : bool <- read ('Out['i]), return 'out, 'out :: emptyCNameList)
           ) 
                  
     , 
     'Commit :: 'Committed :: 'LeakCommitted_comm_adv ::
     'LeakOpened_comm_adv :: 'Open :: 'Opened :: 
     'SumOpened1 :: 'SumCommit :: 'AllOpen ::
     emptyCNameList
     ), 
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using SYM[P1:Protocol <- prot9] 
      {substNFFamilyOne('AllOpen, 'SumOpened1[0], 
                             nf(emptyBRList, return (), emptyCNameList)
                             )
     ; substNFFamilyOne('SumCommit, 'SumOpened1[0], 
                             nf(emptyBRList, return False, emptyCNameList)
                             )}
.                             
 
 
 *** ind step, start of sym proof
srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool), 
    newNF({'Commit 'i (bound (n + 1)) : bool} 
          {'Committed 'i (bound (n + 1)) : unit} 
          {'LeakCommitted_comm_adv 'i (bound (n + 1)) : unit} 
          {'LeakOpened_comm_adv 'i (bound (n + 1)) : bool} 
          {'Open 'i (bound (n + 1)) : unit} 
          {'Opened 'i (bound (n + 1)) : bool}
          {'SumOpened1 'i (uniformBound (n + 2)) : bool}
          {'SumCommit 'i (uniformBound (n + 2)) : bool}
          {'AllOpen 'i (bound (n + 2)) : unit} 
     ,
     (family 'SumOpened1 'i (bound 'k) ::= 
                       nf(('ao : unit <- read ('AllOpen['i])) 
                          ('sc : bool <- read ('SumCommit['i])),
                          return 'sc,
                          'ao :: 'sc :: emptyCNameList )
     )
     || 
     ('SumOpened1['k ++ 1] ::= nf(('ao : unit <- read ('AllOpen['k ++ 1])) 
                          ('sc : bool <- read ('SumCommit['k ++ 1])),
                          return 'sc,
                          'ao :: 'sc :: emptyCNameList )
     )
     ||      
       (family 'SumCommit 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
              ;; 
              otherwise --> nf(('cj : bool <- read ('Commit['i -- 1])) 
                                'xj : bool <- read ('SumCommit['i -- 1]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
          )
           || (family 'AllOpen 'i (bound(n + 2)) ::=
                   (when ('i =T= 0) --> nf(emptyBRList, return (), emptyCNameList))
                   ;;
                   (otherwise --> 
                      nf(('x : unit <- read ('AllOpen['i -- 1]))
                         ('y : unit <- read ('Open['i -- 1])),
                         return (),
                      'x :: 'y :: emptyCNameList)
                   )
         )       
     || 
     (family 'Commit 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> nf(emptyBRList, samp flip, emptyCNameList)) 
             ;; 
             otherwise --> nf('advCommit : bool <- read ('AdvCommit_adv_party['i]), 
                              return 'advCommit, 'advCommit :: emptyCNameList)
          ) 
     || 
     (family 'Committed 'i (bound (n + 1)) ::= 
             nf('x : bool <- read ('Commit['i]), 
                return (), 
                'x :: emptyCNameList)
          ) 
     ||  
     (family 'LeakCommitted_comm_adv 'i  (bound (n + 1)) ::= 
        nf('committed : unit <- read ('Committed['i]), 
           return 'committed, 
           'committed :: emptyCNameList)) 
     ||
     (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
        nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)) 
     ||     
     (family 'Open 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> 
                nf('x : unit <- read ('SumCommit[n + 2]), 
                   return (), 
                   'x :: emptyCNameList)
             ) 
             ;;
             otherwise --> nf('advOpen : unit <- read ('AdvOpen_adv_party['i]), 
                               return 'advOpen, 'advOpen :: emptyCNameList)
           ) 
     || 
     (family 'Opened 'i (bound (n + 1)) ::= 
        nf( ('commit : bool <- read ('Commit['i])) 
            ('x : unit <- read ('Open['i])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
     ) 
     || 
     ( family 'Out 'i (bound (n + 1)) ::= 
               (when (apply 'honest 'i) --> 
                  nf('x : bool <- read ('SumOpened1[n + 2]), 
                     return 'x, 
                     'x :: emptyCNameList)
               ) ;;
               otherwise --> 
                   nf('out : bool <- read ('Out['i]), return 'out, 'out :: emptyCNameList)
           ) 
                  
     , 
     'Commit :: 'Committed :: 'LeakCommitted_comm_adv ::
     'LeakOpened_comm_adv :: 'Open :: 'Opened :: 
     'SumOpened1 :: 'SumCommit :: 'AllOpen ::
     emptyCNameList
     ), 
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using substNFFamilyOne('AllOpen, 'SumOpened1['k ++ 1], 
                         nf(('x : unit <- read ('AllOpen['k]))
                         ('y : unit <- read ('Open['k])),
                         return (),
                      'x :: 'y :: emptyCNameList)
                             )
     ; substNFFamilyOne('SumCommit, 'SumOpened1['k ++ 1], 
                         nf(('cj : bool <- read ('Commit['k])) 
                                'xj : bool <- read ('SumCommit['k]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
                             ) 
                             
    ; SYM[P1:Protocol <- prot10]
      {substNFFamilyOne('SumOpened1, 'SumOpened1['k ++ 1], 
                         nf(('ao : unit <- read ('AllOpen['k])) 
                          ('sc : bool <- read ('SumCommit['k])),
                          return 'sc,
                          'ao :: 'sc :: emptyCNameList )
                             ) 
 ; substNFFamilyOne('Opened, 'SumOpened1['k ++ 1], 
                            nf( ('commit : bool <- read ('Commit['k])) 
            ('x : unit <- read ('Open['k])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
                             )    
 ;     applyAlphaNFPr('SumOpened1['k ++ 1],
        << 'x,'y >> 
        << 'ao,'x >> 
        << 'commit,'cj >> 
        << 'sc,'xj >>
         emptyQidPairList)  
 ; changeOrder('SumOpened1['k ++ 1], 
     'x :: 'y :: 'xj :: 'cj :: emptyCNameList)}                                               
.    
)  
   
*** ind base, start of sym proof
srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool), 
    newNF({'Commit 'i (bound (n + 1)) : bool} 
          {'Committed 'i (bound (n + 1)) : unit} 
          {'LeakCommitted_comm_adv 'i (bound (n + 1)) : unit} 
          {'LeakOpened_comm_adv 'i (bound (n + 1)) : bool} 
          {'Open 'i (bound (n + 1)) : unit} 
          {'Opened 'i (bound (n + 1)) : bool}
          {'SumOpened1 'i (uniformBound (n + 2)) : bool}
          {'SumCommit 'i (uniformBound (n + 2)) : bool}
          {'AllOpen 'i (bound (n + 2)) : unit} 
     ,
     ('SumOpened1[0] ::= nf(('ao : unit <- read ('AllOpen[0])) 
                          ('sc : bool <- read ('SumCommit[0])),
                          return 'sc,
                          'ao :: 'sc :: emptyCNameList )
     )
     ||      
       (family 'SumCommit 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
              ;; 
              otherwise --> nf(('cj : bool <- read ('Commit['i -- 1])) 
                                'xj : bool <- read ('SumCommit['i -- 1]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
          )
           || (family 'AllOpen 'i (bound(n + 2)) ::=
                   (when ('i =T= 0) --> nf(emptyBRList, return (), emptyCNameList))
                   ;;
                   (otherwise --> 
                      nf(('x : unit <- read ('AllOpen['i -- 1]))
                         ('y : unit <- read ('Open['i -- 1])),
                         return (),
                      'x :: 'y :: emptyCNameList)
                   )
         )       
     || 
     (family 'Commit 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> nf(emptyBRList, samp flip, emptyCNameList)) 
             ;; 
             otherwise --> nf('advCommit : bool <- read ('AdvCommit_adv_party['i]), 
                              return 'advCommit, 'advCommit :: emptyCNameList)
          ) 
     || 
     (family 'Committed 'i (bound (n + 1)) ::= 
             nf('x : bool <- read ('Commit['i]), 
                return (), 
                'x :: emptyCNameList)
          ) 
     ||  
     (family 'LeakCommitted_comm_adv 'i  (bound (n + 1)) ::= 
        nf('committed : unit <- read ('Committed['i]), 
           return 'committed, 
           'committed :: emptyCNameList)) 
     ||
     (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
        nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)) 
     ||     
     (family 'Open 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> 
                nf('x : unit <- read ('SumCommit[n + 2]), 
                   return (), 
                   'x :: emptyCNameList)
             ) 
             ;;
             otherwise --> nf('advOpen : unit <- read ('AdvOpen_adv_party['i]), 
                               return 'advOpen, 'advOpen :: emptyCNameList)
           ) 
     || 
     (family 'Opened 'i (bound (n + 1)) ::= 
        nf( ('commit : bool <- read ('Commit['i])) 
            ('x : unit <- read ('Open['i])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
     ) 
     || 
     ( family 'Out 'i (bound (n + 1)) ::= 
               (when (apply 'honest 'i) --> 
                  nf('x : bool <- read ('SumOpened1[n + 2]), 
                     return 'x, 
                     'x :: emptyCNameList)
               ) ;;
               otherwise --> 
                   nf('out : bool <- read ('Out['i]), return 'out, 'out :: emptyCNameList)
           ) 
                  
     , 
     'Commit :: 'Committed :: 'LeakCommitted_comm_adv ::
     'LeakOpened_comm_adv :: 'Open :: 'Opened :: 
     'SumOpened1 :: 'SumCommit :: 'AllOpen ::
     emptyCNameList
     ), 
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using  substNFFamilyOne('AllOpen, 'SumOpened1[0], 
                             nf(emptyBRList, return (), emptyCNameList)
                             )
     ; substNFFamilyOne('SumCommit, 'SumOpened1[0], 
                             nf(emptyBRList, return False, emptyCNameList)
                             )
.    *** induction base is sym of this proof!                         

*** ind step, direct

srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool), 
    newNF({'Commit 'i (bound (n + 1)) : bool} 
          {'Committed 'i (bound (n + 1)) : unit} 
          {'LeakCommitted_comm_adv 'i (bound (n + 1)) : unit} 
          {'LeakOpened_comm_adv 'i (bound (n + 1)) : bool} 
          {'Open 'i (bound (n + 1)) : unit} 
          {'Opened 'i (bound (n + 1)) : bool}
          {'SumOpened1 'i (uniformBound (n + 2)) : bool}
          {'SumCommit 'i (uniformBound (n + 2)) : bool}
          {'AllOpen 'i (bound (n + 2)) : unit} 
     ,
     (family 'SumOpened1 'i (bound 'k) ::= 
                       nf(('ao : unit <- read ('AllOpen['i])) 
                          ('sc : bool <- read ('SumCommit['i])),
                          return 'sc,
                          'ao :: 'sc :: emptyCNameList )
     )
     || 
     ('SumOpened1['k ++ 1] ::= nf(('x : unit <- read ('SumOpened1['k]))
                      ('o : unit <- read ('Opened['k])),
                      return (ap 'xor pair('x, 'o)),
                      'x :: 'o :: emptyCNameList
                     )
     )
     ||      
       (family 'SumCommit 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
              ;; 
              otherwise --> nf(('cj : bool <- read ('Commit['i -- 1])) 
                                'xj : bool <- read ('SumCommit['i -- 1]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
          )
           || (family 'AllOpen 'i (bound(n + 2)) ::=
                   (when ('i =T= 0) --> nf(emptyBRList, return (), emptyCNameList))
                   ;;
                   (otherwise --> 
                      nf(('x : unit <- read ('AllOpen['i -- 1]))
                         ('y : unit <- read ('Open['i -- 1])),
                         return (),
                      'x :: 'y :: emptyCNameList)
                   )
         )       
     || 
     (family 'Commit 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> nf(emptyBRList, samp flip, emptyCNameList)) 
             ;; 
             otherwise --> nf('advCommit : bool <- read ('AdvCommit_adv_party['i]), 
                              return 'advCommit, 'advCommit :: emptyCNameList)
          ) 
     || 
     (family 'Committed 'i (bound (n + 1)) ::= 
             nf('x : bool <- read ('Commit['i]), 
                return (), 
                'x :: emptyCNameList)
          ) 
     ||  
     (family 'LeakCommitted_comm_adv 'i  (bound (n + 1)) ::= 
        nf('committed : unit <- read ('Committed['i]), 
           return 'committed, 
           'committed :: emptyCNameList)) 
     ||
     (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
        nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)) 
     ||     
     (family 'Open 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> 
                nf('x : unit <- read ('SumCommit[n + 2]), 
                   return (), 
                   'x :: emptyCNameList)
             ) 
             ;;
             otherwise --> nf('advOpen : unit <- read ('AdvOpen_adv_party['i]), 
                               return 'advOpen, 'advOpen :: emptyCNameList)
           ) 
     || 
     (family 'Opened 'i (bound (n + 1)) ::= 
        nf( ('commit : bool <- read ('Commit['i])) 
            ('x : unit <- read ('Open['i])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
     ) 
     || 
     ( family 'Out 'i (bound (n + 1)) ::= 
               (when (apply 'honest 'i) --> 
                  nf('x : bool <- read ('SumOpened1[n + 2]), 
                     return 'x, 
                     'x :: emptyCNameList)
               ) ;;
               otherwise --> 
                   nf('out : bool <- read ('Out['i]), return 'out, 'out :: emptyCNameList)
           ) 
                  
     , 
     'Commit :: 'Committed :: 'LeakCommitted_comm_adv ::
     'LeakOpened_comm_adv :: 'Open :: 'Opened :: 
     'SumOpened1 :: 'SumCommit :: 'AllOpen ::
     emptyCNameList
     ), 
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using                         
 substNFFamilyOne('SumOpened1, 'SumOpened1['k ++ 1], 
                         nf(('ao : unit <- read ('AllOpen['k])) 
                          ('sc : bool <- read ('SumCommit['k])),
                          return 'sc,
                          'ao :: 'sc :: emptyCNameList )
                             ) 
 ; substNFFamilyOne('Opened, 'SumOpened1['k ++ 1], 
                            nf( ('commit : bool <- read ('Commit['k])) 
            ('x : unit <- read ('Open['k])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
                             )    
 ;     applyAlphaNFPr('SumOpened1['k ++ 1],
        << 'x,'y >> 
        << 'ao,'x >> 
        << 'commit,'cj >> 
        << 'sc,'xj >>
         emptyQidPairList)  
 ; changeOrder('SumOpened1['k ++ 1], 
     'x :: 'y :: 'xj :: 'cj :: emptyCNameList)
.

 
 ************    
        srew[1] 
        pConfig(
         secSig,
         ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
         ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
         ('Out @ (n ++ 1) :: bool),

           (family 'Open 'i (bound (n + 1)) ::= 
             
                nf('x : unit <- read ('AllCommitted1[n + 2]), 
                   return (), 
                   'x :: emptyCNameList)
             
           ) || 
           (family 'SumCommit 'i (bound(n + 2)) ::=
                   (when ('i =T= 0) --> nf(emptyBRList, return False, emptyCNameList))
                   ;;
                   (otherwise --> 
                      nf(('xj : bool <- read ('SumCommit['i -- 1]))
                         ('cj : bool <- read ('Commit['i -- 1])),
                         return (ap 'xor pair('xj, 'cj)),
                      'xj :: 'cj :: emptyCNameList
                     )
                      )
           )
           ||
          (family 'Commit 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> nf(emptyBRList, samp flip, emptyCNameList)) 
             ;; 
             otherwise --> nf('advCommit : bool <- read ('AdvCommit_adv_party['i]), 
                              return 'advCommit, 'advCommit :: emptyCNameList)
          ) 
          ||
          (family 'AllCommitted1 'i (bound (n + 2)) ::= 
        nf('sc : bool <- read ('SumCommit['i]), 
           return (), 
           'sc :: emptyCNameList)
           ),
           insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n + 1),
                 empty
                ) 
   using substNFFamiliesOne('AllCommitted1, 'Open, nf('sc : bool <- read ('SumCommit[n + 2]), 
           return (), 
           'sc :: emptyCNameList)
           )
        *** applySubstCaseDist('Open, 'AllCommitted1, return True)
   .
    
   *** test, works
   srew [1]
   pConfig(secSig,
         ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
         ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
         ('Out @ (n ++ 1) :: bool),
                        
             (family 'AllCommitted1 'i (bound (n + 2)) ::= 
        nf('sc : bool <- read ('SumCommit['i]), 
           return (), 
           'sc :: emptyCNameList)
           )
             ||
             (family 'Open 'i (bound (n + 1)) ::= 
             
                nf(('x : unit <- read ('AllCommitted1[n + 2])), 
                   return (), 
                   'x :: emptyCNameList)
             
           ),
             insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n + 1), empty)
   using  
      subst-families-one-family
     [ C:Qid <- 'AllCommitted1,
       C1:Qid <- 'Open,
       *** nj:NatTerm <- n + 2,
       R2:Reaction <- nf('sc : bool <- read ('SumCommit[n + 2]), 
           return (), 
           'sc :: emptyCNameList)]     
   .  
***********************************
***********************************
*** attempts, fail

*** whole induction

*** set trace on .

***(
srew[1]
pConfig(secSig, 
   (('AllCommitted1[0] @ nil) :: unit)
   (('AllCommitted1['k ++ 1] @ nil) :: unit)
    ('AdvCommit_adv_party @ n ++ 1 :: bool) 
    ('AdvOpen_adv_party @ n ++ 1 :: unit) 
    ('Out @ n ++ 1 :: bool), 
    newNF({'AllCommitted1 'i (bound (n + 2)) : unit} 
          {'Commit 'i (bound (n + 1)) : bool} 
          {'Committed 'i (bound (n + 1)) : unit} 
          {'LeakCommitted_comm_adv 'i (bound (n + 1)) : unit} 
          {'LeakOpened_comm_adv 'i (bound (n + 1)) : bool} 
          {'Open 'i (bound (n + 1)) : unit} 
          {'Opened 'i (bound (n + 1)) : bool} 
          {'SumCommit 'i (bound (n + 2)) : bool} 
          {'SumOpened1 'i (bound (n + 2)) : bool}, 
          
          (family 'AllCommitted1 'i (bound (n + 2)) ::= 
             (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
             ;; 
             otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                               'y : unit <- read ('Committed['i -- 1]), 
                               return (), 'x :: 'y :: emptyCNameList)
          ) 
          || 
          (family 'Commit 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> nf(emptyBRList, samp flip, emptyCNameList)) 
             ;; 
             otherwise --> nf('advCommit : bool <- read ('AdvCommit_adv_party['i]), 
                              return 'advCommit, 'advCommit :: emptyCNameList)
          ) 
          || 
          (family 'Committed 'i (bound (n + 1)) ::= 
             nf('x : bool <- read ('Commit['i]), 
                return (), 
                'x :: emptyCNameList)
          ) 
          || 
          (family 'LeakCommitted_comm_adv 'i (bound (n + 1)) ::= 
             nf('committed : unit <- read ('Committed['i]), 
             return 'committed, 
             'committed :: emptyCNameList)
          ) 
          || 
          (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
            nf('opened : bool <- read ('Opened['i]), 
               return 'opened, 'opened :: emptyCNameList)
           ) 
           || 
           (family 'Open 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> 
                nf('x : unit <- read ('AllCommitted1[n + 2]), 
                   return (), 
                   'x :: emptyCNameList)
             ) 
             ;;
             otherwise --> nf('advOpen : unit <- read ('AdvOpen_adv_party['i]), 
                               return 'advOpen, 'advOpen :: emptyCNameList)
           ) || 
           (family 'Opened 'i (bound (n + 1)) ::= 
              nf(('commit : bool <- read ('Commit['i])) 
                  'x : unit <- read ('Open['i]), 
                  return 'commit, 
                  'x :: 'commit :: emptyCNameList)
           ) 
           || 
           ( family 'Out 'i (bound (n + 1)) ::= 
               (when (apply 'honest 'i) --> 
                  nf('x : bool <- read ('SumOpened1[n + 2]), 
                     return 'x, 
                     'x :: emptyCNameList)
               ) ;;
               otherwise --> 
                   nf('out : bool <- read ('Out['i]), return 'out, 'out :: emptyCNameList)
           ) 
           || 
           (family 'SumCommit 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
              ;; 
              otherwise --> nf(('cj : bool <- read ('Commit['i -- 1])) 
                                'xj : bool <- read ('SumCommit['i -- 1]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
           ) 
           || 
           family 'SumOpened1 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
               ;; 
               otherwise --> nf(('x : bool <- read ('SumOpened1['i -- 1])) 
                                 'y : bool <- read ('Opened['i -- 1]), 
                                 return (ap 'xor pair('x, 'y)), 
                                 'x :: 'y :: emptyCNameList), 
             'Commit :: 'Committed :: 'LeakCommitted_comm_adv ::
    'LeakOpened_comm_adv :: 'Open :: 'Opened :: 'AllCommitted1 :: 'SumOpened1 :: 'SumCommit ::
    emptyCNameList
             ), 
    insert('AdvCommit_adv_party @ n ++ 1, 'AdvOpen_adv_party @ n ++ 1), 
    'Out @ n + 1,
    empty) 
 using
  applyIndStep3('AllCommitted1, prot7, prot8) 
 .
 )

***( 
 srew[1]
pConfig(secSig, 
   (('AllCommitted1[0] @ nil) :: unit)
   (('AllCommitted1['k ++ 1] @ nil) :: unit)
    ('AdvCommit_adv_party @ n ++ 1 :: bool) 
    ('AdvOpen_adv_party @ n ++ 1 :: unit) 
    ('Out @ n ++ 1 :: bool), 
    newNF({'AllCommitted1 'i (bound (n + 2)) : unit} 
          {'Commit 'i (bound (n + 1)) : bool} 
          {'Committed 'i (bound (n + 1)) : unit} 
          {'LeakCommitted_comm_adv 'i (bound (n + 1)) : unit} 
          {'LeakOpened_comm_adv 'i (bound (n + 1)) : bool} 
          {'Open 'i (bound (n + 1)) : unit} 
          {'Opened 'i (bound (n + 1)) : bool} 
          {'SumCommit 'i (bound (n + 2)) : bool} 
          {'SumOpened1 'i (bound (n + 2)) : bool}, 
          
          ('AllCommitted1[0] ::= nf(emptyBRList, return (), emptyCNameList)
          )
          || 
          (family 'Commit 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> nf(emptyBRList, samp flip, emptyCNameList)) 
             ;; 
             otherwise --> nf('advCommit : bool <- read ('AdvCommit_adv_party['i]), 
                              return 'advCommit, 'advCommit :: emptyCNameList)
          ) 
          || 
          (family 'Committed 'i (bound (n + 1)) ::= 
             nf('x : bool <- read ('Commit['i]), 
                return (), 
                'x :: emptyCNameList)
          ) 
          || 
          (family 'LeakCommitted_comm_adv 'i (bound (n + 1)) ::= 
             nf('committed : unit <- read ('Committed['i]), 
             return 'committed, 
             'committed :: emptyCNameList)
          ) 
          || 
          (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
            nf('opened : bool <- read ('Opened['i]), 
               return 'opened, 'opened :: emptyCNameList)
           ) 
           || 
           (family 'Open 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> 
                nf('x : unit <- read ('AllCommitted1[n + 2]), 
                   return (), 
                   'x :: emptyCNameList)
             ) 
             ;;
             otherwise --> nf('advOpen : unit <- read ('AdvOpen_adv_party['i]), 
                               return 'advOpen, 'advOpen :: emptyCNameList)
           ) || 
           (family 'Opened 'i (bound (n + 1)) ::= 
              nf(('commit : bool <- read ('Commit['i])) 
                  'x : unit <- read ('Open['i]), 
                  return 'commit, 
                  'x :: 'commit :: emptyCNameList)
           ) 
           || 
           ( family 'Out 'i (bound (n + 1)) ::= 
               (when (apply 'honest 'i) --> 
                  nf('x : bool <- read ('SumOpened1[n + 2]), 
                     return 'x, 
                     'x :: emptyCNameList)
               ) ;;
               otherwise --> 
                   nf('out : bool <- read ('Out['i]), return 'out, 'out :: emptyCNameList)
           ) 
           || 
           (family 'SumCommit 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
              ;; 
              otherwise --> nf(('cj : bool <- read ('Commit['i -- 1])) 
                                'xj : bool <- read ('SumCommit['i -- 1]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
           ) 
           || 
           family 'SumOpened1 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
               ;; 
               otherwise --> nf(('x : bool <- read ('SumOpened1['i -- 1])) 
                                 'y : bool <- read ('Opened['i -- 1]), 
                                 return (ap 'xor pair('x, 'y)), 
                                 'x :: 'y :: emptyCNameList), 
             'Commit :: 'Committed :: 'LeakCommitted_comm_adv ::
    'LeakOpened_comm_adv :: 'Open :: 'Opened :: 'AllCommitted1 :: 'SumOpened1 :: 'SumCommit ::
    emptyCNameList
             ), 
    insert('AdvCommit_adv_party @ n ++ 1, 'AdvOpen_adv_party @ n ++ 1), 
    'Out @ n + 1,
    empty) 
 using SYM[P1:Protocol <- prot7]
       {substNFFamilyOne('SumCommit, 'AllCommitted1[0], nf(emptyBRList, return False, emptyCNameList))}
 .
 
 )
 
***(
 srew [1]
pConfig(secSig, 
   ***  (('AllCommitted1[0] @ nil) :: unit)
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool), 
    newNF({'Commit 'i (bound (n + 1)) : bool} 
          {'Committed 'i (bound (n + 1)) : unit} 
          {'LeakCommitted_comm_adv 'i (bound (n + 1)) : unit} 
          {'LeakOpened_comm_adv 'i (bound (n + 1)) : bool} 
          {'Open 'i (bound (n + 1)) : unit} 
          {'Opened 'i (bound (n + 1)) : bool}
          {'AllCommitted1 'i (bound (n + 2)) : unit} 
          {'SumOpened1 'i  (bound (n + 2)) : bool}
          {'SumCommit 'i (bound (n + 2)) : bool}
     ,
     
     ('AllCommitted1[0] ::= 
        nf(emptyBRList, return (), emptyCNameList)
    )
     || 
          (family 'Commit 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> nf(emptyBRList, samp flip, emptyCNameList)) 
             ;; 
             otherwise --> nf('advCommit : bool <- read ('AdvCommit_adv_party['i]), 
                              return 'advCommit, 'advCommit :: emptyCNameList)
          ) 
          || 
          (family 'Committed 'i (bound (n + 1)) ::= 
             nf('x : bool <- read ('Commit['i]), 
                return (), 
                'x :: emptyCNameList)
          ) 
          || 
          (family 'LeakCommitted_comm_adv 'i (bound (n + 1)) ::= 
             nf('committed : unit <- read ('Committed['i]), 
             return 'committed, 
             'committed :: emptyCNameList)
          ) 
          || 
          (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
            nf('opened : bool <- read ('Opened['i]), 
               return 'opened, 'opened :: emptyCNameList)
           ) 
           || 
           (family 'Open 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> 
                nf('x : unit <- read ('AllCommitted1[n + 2]), 
                   return (), 
                   'x :: emptyCNameList)
             ) 
             ;;
             otherwise --> nf('advOpen : unit <- read ('AdvOpen_adv_party['i]), 
                               return 'advOpen, 'advOpen :: emptyCNameList)
           ) || 
           (family 'Opened 'i (bound (n + 1)) ::= 
              nf(('commit : bool <- read ('Commit['i])) 
                  'x : unit <- read ('Open['i]), 
                  return 'commit, 
                  'x :: 'commit :: emptyCNameList)
           ) 
           || 
           ( family 'Out 'i (bound (n + 1)) ::= 
               (when (apply 'honest 'i) --> 
                  nf('x : bool <- read ('SumOpened1[n + 2]), 
                     return 'x, 
                     'x :: emptyCNameList)
               ) ;;
               otherwise --> 
                   nf('out : bool <- read ('Out['i]), return 'out, 'out :: emptyCNameList)
           ) 
           || 
           (family 'SumCommit 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
              ;; 
              otherwise --> nf(('cj : bool <- read ('Commit['i -- 1])) 
                                'xj : bool <- read ('SumCommit['i -- 1]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
           ) 
           || 
           family 'SumOpened1 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
               ;; 
               otherwise --> nf(('x : bool <- read ('SumOpened1['i -- 1])) 
                                 'y : bool <- read ('Opened['i -- 1]), 
                                 return (ap 'xor pair('x, 'y)), 
                                 'x :: 'y :: emptyCNameList)
     , 
     'Commit :: 'Committed :: 'LeakCommitted_comm_adv ::
    'LeakOpened_comm_adv :: 'Open :: 'Opened :: 'AllCommitted1 :: 'SumOpened1 :: 'SumCommit ::
    emptyCNameList
     ),
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)        
using SYM[P1:Protocol <- prot7]
      {substNFFamilyOne('SumCommit, 'AllCommitted1[0], nf(emptyBRList, return False, emptyCNameList)) } .
 
   
srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    *** (('AllCommitted1['k ++ 1] @ nil) :: unit)
    ('Out @ (n ++ 1) :: bool), 
      newNF(    
          {'Commit 'i (bound (n + 1)) : bool} 
          {'Committed 'i (bound (n + 1)) : unit} 
          {'LeakCommitted_comm_adv 'i (bound (n + 1)) : unit} 
          {'LeakOpened_comm_adv 'i (bound (n + 1)) : bool} 
          {'Open 'i (bound (n + 1)) : unit} 
          {'Opened 'i (bound (n + 1)) : bool}
          {'AllCommitted1 'i (bound (n + 2)) : unit} 
          {'SumOpened1 'i  (bound (n + 2)) : bool}
          {'SumCommit 'i (bound (n + 2)) : bool}
     ,
     
     (family 'AllCommitted1 'i (bound 'k) ::=
        nf('sc : bool <- read ('SumCommit['i]), 
           return (), 
           'sc :: emptyCNameList)
    )
    ||
    (
    'AllCommitted1['k ++ 1] ::= 
      nf(('x : unit <- read ('AllCommitted1['k]))
                      ('y : unit <- read ('Committed['k])),
                      return (),
                      'x :: 'y :: emptyCNameList
                     )
    )
     || 
          (family 'Commit 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> nf(emptyBRList, samp flip, emptyCNameList)) 
             ;; 
             otherwise --> nf('advCommit : bool <- read ('AdvCommit_adv_party['i]), 
                              return 'advCommit, 'advCommit :: emptyCNameList)
          ) 
          || 
          (family 'Committed 'i (bound (n + 1)) ::= 
             nf('x : bool <- read ('Commit['i]), 
                return (), 
                'x :: emptyCNameList)
          ) 
          || 
          (family 'LeakCommitted_comm_adv 'i (bound (n + 1)) ::= 
             nf('committed : unit <- read ('Committed['i]), 
             return 'committed, 
             'committed :: emptyCNameList)
          ) 
          || 
          (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
            nf('opened : bool <- read ('Opened['i]), 
               return 'opened, 'opened :: emptyCNameList)
           ) 
           || 
           (family 'Open 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> 
                nf('x : unit <- read ('AllCommitted1[n + 2]), 
                   return (), 
                   'x :: emptyCNameList)
             ) 
             ;;
             otherwise --> nf('advOpen : unit <- read ('AdvOpen_adv_party['i]), 
                               return 'advOpen, 'advOpen :: emptyCNameList)
           ) || 
           (family 'Opened 'i (bound (n + 1)) ::= 
              nf(('commit : bool <- read ('Commit['i])) 
                  'x : unit <- read ('Open['i]), 
                  return 'commit, 
                  'x :: 'commit :: emptyCNameList)
           ) 
           || 
           ( family 'Out 'i (bound (n + 1)) ::= 
               (when (apply 'honest 'i) --> 
                  nf('x : bool <- read ('SumOpened1[n + 2]), 
                     return 'x, 
                     'x :: emptyCNameList)
               ) ;;
               otherwise --> 
                   nf('out : bool <- read ('Out['i]), return 'out, 'out :: emptyCNameList)
           ) 
           || 
           (family 'SumCommit 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
              ;; 
              otherwise --> nf(('cj : bool <- read ('Commit['i -- 1])) 
                                'xj : bool <- read ('SumCommit['i -- 1]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
           ) 
           || 
           family 'SumOpened1 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
               ;; 
               otherwise --> nf(('x : bool <- read ('SumOpened1['i -- 1])) 
                                 'y : bool <- read ('Opened['i -- 1]), 
                                 return (ap 'xor pair('x, 'y)), 
                                 'x :: 'y :: emptyCNameList) 
     , 
     'Commit :: 'Committed :: 'LeakCommitted_comm_adv ::
    'LeakOpened_comm_adv :: 'Open :: 'Opened :: 'AllCommitted1 :: 'SumOpened1 :: 'SumCommit ::
    emptyCNameList
     ) 
     , 
     *** insert('AllCommitted1['k ++ 1] @ nil,
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1))
    *** )
    , 
    'Out @ (n ++ 1), 
    'k ++ 1 <=T  n + 2
)        
using
      substNFFamilyOne('AllCommitted1, 'AllCommitted1['k ++ 1], 
        nf('sc : bool <- read ('SumCommit['k]), 
           return (), 
           'sc :: emptyCNameList)
      )
     ; substNFFamilyOne('Committed, 'AllCommitted1['k ++ 1], 
         nf('x : bool <- read ('Commit['k]), return (), 'x :: emptyCNameList)
      )
     ; applyAlphaNFPr('AllCommitted1['k ++ 1], << 'sc,'xj >> << 'x,'cj >> emptyQidPairList)
     ; SYM[P1:Protocol <- prot8]
     {substNFFamilyOne('SumCommit, 'AllCommitted1['k ++ 1], 
      nf(('xj : bool <- read ('SumCommit['k]))
                           ('cj : bool <- read ('Commit['k])),
                           return (ap 'xor pair('xj, 'cj)),
                           'xj :: 'cj :: emptyCNameList
                        )
      ) }
     .  
 )

***********************************
***********************************

*** induction, works

  
srew [1]
 pConfig(secSig,
         ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    *** (('AllCommitted1['k ++ 1] @ nil) :: unit)
    ('Out @ (n ++ 1) :: bool), 
      newNF(    
          {'Commit 'i (bound (n + 1)) : bool} 
          {'Committed 'i (bound (n + 1)) : unit} 
          {'LeakCommitted_comm_adv 'i (bound (n + 1)) : unit} 
          {'LeakOpened_comm_adv 'i (bound (n + 1)) : bool} 
          {'Open 'i (bound (n + 1)) : unit} 
          {'Opened 'i (bound (n + 1)) : bool}
          {'AllCommitted1 'i (bound (n + 2)) : unit} 
          {'SumOpened1 'i  (bound (n + 2)) : bool}
          {'SumCommit 'i (bound (n + 2)) : bool}
     ,
          
          (family 'LeakCommitted_comm_adv 'i (bound (n + 1)) ::= 
             nf('committed : unit <- read ('Committed['i]), 
             return 'committed, 
             'committed :: emptyCNameList)
          ) 
          || 
          (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
            nf('opened : bool <- read ('Opened['i]), 
               return 'opened, 'opened :: emptyCNameList)
           ) 
           || 
           (family 'Open 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> 
                nf('x : unit <- read ('AllCommitted1[n + 2]), 
                   return (), 
                   'x :: emptyCNameList)
             ) 
             ;;
             otherwise --> nf('advOpen : unit <- read ('AdvOpen_adv_party['i]), 
                               return 'advOpen, 'advOpen :: emptyCNameList)
           ) || 
           (family 'Opened 'i (bound (n + 1)) ::= 
              nf(('commit : bool <- read ('Commit['i])) 
                  'x : unit <- read ('Open['i]), 
                  return 'commit, 
                  'x :: 'commit :: emptyCNameList)
           ) 
           || 
           ( family 'Out 'i (bound (n + 1)) ::= 
               (when (apply 'honest 'i) --> 
                  nf('x : bool <- read ('SumOpened1[n + 2]), 
                     return 'x, 
                     'x :: emptyCNameList)
               ) ;;
               otherwise --> 
                   nf('out : bool <- read ('Out['i]), return 'out, 'out :: emptyCNameList)
           ) 
           ||
         (family 'SumCommit 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
              ;; 
              otherwise --> nf(('cj : bool <- read ('Commit['i -- 1])) 
                                'xj : bool <- read ('SumCommit['i -- 1]), 
                                return (ap 'xor pair('xj, 'cj)),
                                'xj :: 'cj :: emptyCNameList)
          )
          ||
           (family 'Committed 'i (bound (n + 1)) ::= 
             nf('x : bool <- read ('Commit['i]), 
                return (), 
                'x :: emptyCNameList)
          ) 
          ||
          (family 'Commit 'i (bound (n + 1)) ::= 
             (when (apply 'honest 'i) --> nf(emptyBRList, samp flip, emptyCNameList)) 
             ;; 
             otherwise --> nf('advCommit : bool <- read ('AdvCommit_adv_party['i]), 
                              return 'advCommit, 'advCommit :: emptyCNameList)
          ) 
          ||
          (family 'AllCommitted1 'i (bound (n + 2)) ::= 
       (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
       ;; 
       otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                         'y : unit <- read ('Committed['i -- 1]), 
                         return (), 
                         'x :: 'y ::  emptyCNameList)
      ) 
      || 
           family 'SumOpened1 'i (bound (n + 2)) ::= 
              (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
               ;; 
               otherwise --> nf(('x : bool <- read ('SumOpened1['i -- 1])) 
                                 'y : bool <- read ('Opened['i -- 1]), 
                                 return (ap 'xor pair('x, 'y)), 
                                 'x :: 'y :: emptyCNameList) 
          ,
          'Commit :: 'Committed :: 'LeakCommitted_comm_adv ::
    'LeakOpened_comm_adv :: 'Open :: 'Opened :: 'AllCommitted1 :: 'SumOpened1 :: 'SumCommit ::
    emptyCNameList),
         insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)) ,
         'Out @ (n ++ 1),
         empty)
 using 
  applyIndStep3('AllCommitted1, prot70, prot80) 
. 
****


srew [1] 
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool)
    ('Commit @ (n ++ 1) :: bool) 
    ('Committed @ (n ++ 1) :: unit)
    ('LeakCommitted_comm_adv @ (n ++ 1) :: unit)
    ('LeakOpened_comm_adv @ (n ++ 1) :: bool)
    ('Open  @ (n ++ 1) :: unit)
    ('Opened @ (n ++ 1) :: bool), 
      newNF({ 'AllCommitted1 'i (bound (n + 2)) : unit}
            {'SumOpened1 'i (bound (n + 2)) : bool}, 
     (family 'AllCommitted1 'i (bound (n + 2)) ::= 
       (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
       ;; 
       otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                         'y : unit <- read ('Committed['i -- 1]), 
                         return (), 
                         'x :: 'y ::  emptyCNameList)
      ) 
      || 
      (family 'Committed 'i (bound (n + 1)) ::= 
           nf('x : bool <- read ('Commit['i]), return (), 'x :: emptyCNameList)
      ) 
      || 
      (family 'LeakCommitted_comm_adv 'i (bound (n + 1)) ::= 
         nf('committed : unit <- read ('Committed['i]), return 'committed, 'committed :: emptyCNameList)
      ) 
      ||
      (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
         nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)
      ) 
      || 
      (family 'Opened 'i (bound (n + 1)) ::= 
        nf(('commit : bool <- read ('Commit['i])) 
            'x : unit <- read ('Open['i]), 
            return 'commit, 'x :: 'commit :: emptyCNameList)
      )
      || 
      (family 'SumOpened1 'i (bound (n + 2)) ::= 
        (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
        ;;
        otherwise --> 
          nf(('x : bool <- read ('SumOpened1['i -- 1])) 
              'y : bool <- read ('Opened['i -- 1]), 
              return (ap 'xor pair('x, 'y)), 
              'x :: 'y :: emptyCNameList)
      )     , 
    'AllCommitted1 :: 'SumOpened1 :: emptyCNameList) 
    || 
    newNF(
          {'SumOpened ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) : bool}, 
           
           (family 'Commit 'i (bound (n + 1)) ::= 
              nf(emptyBRList, samp flip, emptyCNameList)) 
           || 
           (family 'Open 'i (bound (n + 1)) ::= 
             nf('x : unit <- read ('AllCommitted1[n + 2]), return (), 'x :: emptyCNameList)) 
           || 
           (family 'Out 'i (bound (n + 1)) ::= 
              nf('sumOpened : bool <- read ('SumOpened['i (n + 2)]), 
                 return 'sumOpened, 'sumOpened :: emptyCNameList)) 
           || 
            (family 'SumOpened ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) ::= 
              otherwise --> 
                nf('x : bool <- read ('SumOpened1['j]), return 'x, 'x :: emptyCNameList)
              ), 
           'SumOpened :: emptyCNameList)  
    ,
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
         insert('Commit @ (n ++ 1),  
          insert('Committed @ (n ++ 1),
           insert('LeakCommitted_comm_adv @ (n ++ 1),
            insert('LeakOpened_comm_adv @ (n ++ 1),
             insert('Open  @ (n ++ 1),
              insert('Opened @ (n ++ 1),
                     'Out @ (n ++ 1)
                     )))))), 
    empty
)
using   comp-new-families 
      ; redOwiseTwo('SumOpened)
      ; applySubstReadFamilyTwoFamily('Out, 'SumOpened)
. 

srew [1] 
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool)
    ('Commit @ (n ++ 1) :: bool) 
    ('Committed @ (n ++ 1) :: unit)
    ('LeakCommitted_comm_adv @ (n ++ 1) :: unit)
    ('LeakOpened_comm_adv @ (n ++ 1) :: bool)
    ('Open  @ (n ++ 1) :: unit)
    ('Opened @ (n ++ 1) :: bool), 
      prot5
    ,
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
         insert('Commit @ (n ++ 1),  
          insert('Committed @ (n ++ 1),
           insert('LeakCommitted_comm_adv @ (n ++ 1),
            insert('LeakOpened_comm_adv @ (n ++ 1),
             insert('Open  @ (n ++ 1),
              insert('Opened @ (n ++ 1),
                     'Out @ (n ++ 1)
                     )))))), 
    empty
)
using comp-new-families .
*** induction base here!

srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool), 
    newNF({'Commit 'i (bound (n + 1)) : bool} 
          {'Committed 'i (bound (n + 1)) : unit} 
          {'LeakCommitted_comm_adv 'i (bound (n + 1)) : unit} 
          {'LeakOpened_comm_adv 'i (bound (n + 1)) : bool} 
          {'Open 'i (bound (n + 1)) : unit} 
          {'Opened 'i (bound (n + 1)) : bool}
          {'AllCommitted ('i 'j) (bound (n + 1) uniformBound (n + 2)) : unit} 
          {'SumOpened ('i 'j) (bound (n + 1) uniformBound (n + 2)) : bool}
          {'AllCommitted1 'i (bound (n + 2)) : unit} 
     ,
     ( 
     projectIndex
     (family 'SumOpened ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) ::= 
       (when (0 =T= 'j) --> nf(emptyBRList, return False, emptyCNameList)) 
       ;; 
       (otherwise --> nf(('x : bool <- read ('SumOpened['i ('j -- 1)])) 
                         ('y : bool <- read ('Opened['j])), 
                         return (ap 'xor pair('x, 'y)), 
                         'x :: 'y :: emptyCNameList)
       )  )
     0 (insert('i <=T (n + 1), 'j =T= 0)) empty
     ) *** end project 
     || 
     (family 'SumOpened1 'i (bound(n + 2)) ::= 
                (when ('i =T= 0) --> nf(emptyBRList, return False, emptyCNameList)) ;;
                (otherwise --> 
                   nf(('x : unit <- read ('SumOpened1['i -- 1]))
                      ('o : unit <- read ('Opened['i -- 1])),
                      return (ap 'xor pair('x, 'o)),
                      'x :: 'o :: emptyCNameList
                     )
                )                 
     ) 
     || 
     (family 'Commit 'i (bound (n + 1)) ::= 
        nf( emptyBRList, samp flip, emptyCNameList)) 
     || 
     (family 'Committed 'i (bound (n + 1)) ::= 
        nf('x : bool <- read ('Commit['i]), return (), 'x :: emptyCNameList)) 
     || 
     (family 'LeakCommitted_comm_adv 'i  (bound (n + 1)) ::= 
        nf('committed : unit <- read ('Committed['i]), 
           return 'committed, 
           'committed :: emptyCNameList)) 
     || 
     (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
        nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)) 
     || 
     (family 'Open 'i (bound (n + 1)) ::= 
        nf('x : unit <- read ('AllCommitted['i (n + 2)]), return (), 'x :: emptyCNameList)) 
     || 
     (family 'Opened 'i (bound (n + 1)) ::= 
        nf( ('commit : bool <- read ('Commit['i])) 
            ('x : unit <- read ('Open['i])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
     ) 
     || 
     (family 'Out 'i (bound (n + 1)) ::= 
        nf('sumOpened : bool <- read ('SumOpened['i (n + 2)]), 
            return 'sumOpened, 
            'sumOpened :: emptyCNameList)
     ) 
     || 
     (family 'AllCommitted1 'i (bound (n + 1)) ::= 
       (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
       ;; 
       (otherwise --> nf(('x : unit <- read ('AllCommitted['i -- 1])) 
                         ('y : unit <- read ('Committed['i -- 1])), 
                         return (), 
                         'x :: 'y :: emptyCNameList)
       )                  
     ) *** end family                
     , 
     'AllCommitted1 :: 'SumOpened :: 'SumOpened1 :: 
      'Commit :: 'Committed :: 'LeakCommitted_comm_adv :: 
      'LeakOpened_comm_adv :: 'Open :: 'Opened :: emptyCNameList
     ), 
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using applySubstRevFamily('SumOpened1, 'SumOpened ['i 0], bool)
	 .   	 


***( This is the induction step!
 
srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('AllCommitted1 @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool)
    ('Commit @ (n ++ 1) :: bool) 
    ('Committed @ (n ++ 1) :: unit)
    ('LeakCommitted_comm_adv @ (n ++ 1) :: unit)
    ('LeakOpened_comm_adv @ (n ++ 1) :: bool)
    ('Open  @ (n ++ 1) :: unit)
    ('Opened @ (n ++ 1) :: bool), 
    newNF(
          {'AllCommitted ('i 'j) (bound (n + 1) uniformBound (n + 2)) : unit} 
          {'SumOpened ('i 'j) (bound (n + 1) uniformBound (n + 2)) : bool}
          {'AllCommitted1 'i (bound (n + 2)) : unit}
          {'SumOpened1 'i (bound (n + 2)) : bool}  
     ,
     (
     family 'SumOpened1 'i (bound(n + 2)) ::= 
                (when ('i =T= 0) --> nf(emptyBRList, return False, emptyCNameList)) ;;
                (otherwise --> 
                   nf(('x : bool <- read ('SumOpened1['i -- 1]))
                      ('y : bool <- read ('Opened['i -- 1])),
                      return (ap 'xor pair('x, 'y)),
                      'x :: 'y :: emptyCNameList
                     )
                )
     )
     ||
     (family 'SumOpened ('i 'j) ((bound (n + 1)) (uniformBound 'k)) ::= 
       nf('x : bool <- read ('SumOpened1['j]), return 'x, 'x :: emptyCNameList)
     ) *** end family
     ||
     ('SumOpened['i ('k ++ 1)] ::= 
       nf(('x : bool <- read ('SumOpened['i 'k])) 
          ('y : bool <- read ('Opened['k])), 
          return (ap 'xor pair('x, 'y)), 
          'x :: 'y :: emptyCNameList)
       )
     || 
     (family 'AllCommitted ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) ::= 
             nf('x : unit <- read ('AllCommitted1['j]),
                        return 'x, 
                        'x :: emptyCNameList) 
           ) 
      ||     
     (family 'AllCommitted1 'i (bound (n + 2)) ::= 
        (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
        ;;
        ( otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                           ('y : unit <- read ('Committed['i -- 1])), 
                           return (), 'x :: 'y :: emptyCNameList)
        )                   
     ) 
     || 
     (family 'Commit 'i (bound (n + 1)) ::= 
        nf( emptyBRList, samp flip, emptyCNameList)) 
     || 
     (family 'Committed 'i (bound (n + 1)) ::= 
        nf('x : bool <- read ('Commit['i]), return (), 'x :: emptyCNameList)) 
     || 
     (family 'LeakCommitted_comm_adv 'i  (bound (n + 1)) ::= 
        nf('committed : unit <- read ('Committed['i]), 
           return 'committed, 
           'committed :: emptyCNameList)) 
     || 
     (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
        nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)) 
     || 
     (family 'Open 'i (bound (n + 1)) ::= 
        nf('x : unit <- read ('AllCommitted['i (n + 2)]), return (), 'x :: emptyCNameList)) 
     || 
     (family 'Opened 'i (bound (n + 1)) ::= 
        nf( ('commit : bool <- read ('Commit['i])) 
            ('x : unit <- read ('Open['i])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
     ) 
     || 
     (family 'Out 'i (bound (n + 1)) ::= 
        nf('sumOpened : bool <- read ('SumOpened['i (n + 2)]), 
            return 'sumOpened, 
            'sumOpened :: emptyCNameList)
     ) 
     , 
     'AllCommitted :: 'SumOpened :: 'AllCommitted1 :: 'SumOpened1 :: emptyCNameList
     ), 
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using 
     nTimesSubstNFReadFamilyTwo('SumOpened, 'SumOpened['i ('k ++ 1)]) 
   ; nTimesSubstFamiliesOne('SumOpened1, 'SumOpened['i ('k ++ 1)], 'k ++ 1, bool)
   *** ; nTimesExtendBoundTwo('SumOpened, 'SumOpened['i ('k ++ 1)])     
 .

srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('AllCommitted1 @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool)
    ('Commit @ (n ++ 1) :: bool) 
    ('Committed @ (n ++ 1) :: unit)
    ('LeakCommitted_comm_adv @ (n ++ 1) :: unit)
    ('LeakOpened_comm_adv @ (n ++ 1) :: bool)
    ('Open  @ (n ++ 1) :: unit)
    ('Opened @ (n ++ 1) :: bool),
    prot4,
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using comp-new-families 
.
)


***(
srew [1]
pConfig(secSig, 

    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool)
    ('Commit @ (n ++ 1) :: bool) 
    ('Committed @ (n ++ 1) :: unit)
    ('LeakCommitted_comm_adv @ (n ++ 1) :: unit)
    ('LeakOpened_comm_adv @ (n ++ 1) :: bool)
    ('Open  @ (n ++ 1) :: unit)
    ('Opened @ (n ++ 1) :: bool),
    newNF({'AllCommitted1 'i (bound (n + 2)) : unit} 
          {'SumOpened1 'i (bound (n + 2)) : bool}
          {'SumOpened ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) : bool}, 
      (family 'AllCommitted1 'i (bound (n + 2)) ::= 
         (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
          ;; 
          otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                            'y : unit <- read ('Committed['i -- 1]), 
                            return (), 
                            'x :: 'y :: emptyCNameList)
      ) 
      || 
      (family 'Committed 'i (bound (n + 1)) ::= 
        nf('x : bool <- read ('Commit['i]), return (), 'x :: emptyCNameList)
      ) 
      || 
      (family 'LeakCommitted_comm_adv 'i (bound (n + 1)) ::=
         nf('committed : unit <- read ('Committed['i]), 
            return 'committed, 
            'committed :: emptyCNameList)
      ) 
      || 
      (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
         nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)
      )
      || 
      (family 'Opened 'i (bound (n + 1)) ::= 
        nf(('commit : bool <- read ('Commit['i])) 
            'x : unit <- read ('Open['i]), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
      ) 
      || 
      (family 'SumOpened1 'i (bound (n + 2)) ::= 
        (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
        ;;
        otherwise --> nf(('x : bool <- read ('SumOpened1['i -- 1])) 
                          'y : bool <- read ('Opened['i -- 1]), 
                          return (ap 'xor pair('x, 'y)), 
                          'x :: 'y :: emptyCNameList)
      )                    
    ||
     (family 'Commit 'i (bound (n + 1)) ::= 
        nf(emptyBRList, samp flip, emptyCNameList)
     ) 
     || 
     (family 'Open 'i (bound (n + 1)) ::= 
       nf('x : unit <- read ('AllCommitted1[n + 2]), return (), 'x :: emptyCNameList)
     ) 
     || 
     (family 'Out 'i (bound (n + 1)) ::= 
       nf('sumOpened : bool <- read ('SumOpened['i (n + 2)]), 
          return 'sumOpened, 'sumOpened :: emptyCNameList)
     ) 
     || 
     (family 'SumOpened ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) ::= 
       (when (0 =T= 'j) --> nf(emptyBRList, return False, emptyCNameList)) 
       ;; 
       otherwise --> nf(('x : bool <- read ('SumOpened['i ('j -- 1)])) 
                         'y : bool <- read ('Opened['j -- 1]), 
                         return (ap 'xor pair('x,'y)), 
                         'x :: 'y :: emptyCNameList)
     )                    
    , 'AllCommitted1 :: 'SumOpened1 :: 'SumOpened :: emptyCNameList)
    ,     
         insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
         insert('Commit @ (n ++ 1),  
          insert('Committed @ (n ++ 1),
           insert('LeakCommitted_comm_adv @ (n ++ 1),
            insert('LeakOpened_comm_adv @ (n ++ 1),
             insert('Open  @ (n ++ 1),
              insert('Opened @ (n ++ 1),
                     'Out @ (n ++ 1)
                     )))))), 
    empty
)
 using 
   applyIndStep2('SumOpened) 
  ; SYM[P1:Protocol <- prot4]{comp-new-families}   
  .
)
***(

srew [1]
pConfig(secSig, 

    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool)
    ('Commit @ (n ++ 1) :: bool) 
    ('Committed @ (n ++ 1) :: unit)
    ('LeakCommitted_comm_adv @ (n ++ 1) :: unit)
    ('LeakOpened_comm_adv @ (n ++ 1) :: bool)
    ('Open  @ (n ++ 1) :: unit)
    ('Opened @ (n ++ 1) :: bool),
prot4
    ,     
         insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
         insert('Commit @ (n ++ 1),  
          insert('Committed @ (n ++ 1),
           insert('LeakCommitted_comm_adv @ (n ++ 1),
            insert('LeakOpened_comm_adv @ (n ++ 1),
             insert('Open  @ (n ++ 1),
              insert('Opened @ (n ++ 1),
                     'Out @ (n ++ 1)
                     )))))), 
    empty
) using comp-new-families 
.
)
	   




***( here all induction proof:

srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool)
    ('Commit @ (n ++ 1) :: bool) 
    ('Committed @ (n ++ 1) :: unit)
    ('LeakCommitted_comm_adv @ (n ++ 1) :: unit)
    ('LeakOpened_comm_adv @ (n ++ 1) :: bool)
    ('Open  @ (n ++ 1) :: unit)
    ('Opened @ (n ++ 1) :: bool),
    newNF(
          {'AllCommitted ('i 'j) (bound (n + 1) uniformBound (n + 2)) : unit} 
          {'SumOpened ('i 'j) (bound (n + 1) uniformBound (n + 2)) : bool}
          {'AllCommitted1 'i (bound (n + 2)) : unit} 
     ,		 
 (family 'AllCommitted ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) ::= 
       (when (0 =T= 'j) --> nf(emptyBRList, return (), emptyCNameList)) 
       ;; 
       (otherwise --> nf(('x : unit <- read ('AllCommitted['i ('j -- 1)])) 
                         ('y : unit <- read ('Committed['j -- 1])), 
                         return (), 
                         'x :: 'y :: emptyCNameList)
       )                  
     ) *** end family 
     || 
     (family 'AllCommitted1 'i (bound (n + 2)) ::= 
        (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
        ;;
        ( otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                           ('y : unit <- read ('Committed['i -- 1])), 
                           return (), 'x :: 'y :: emptyCNameList)
        )                   
     ) 
     || 
     (family 'Commit 'i (bound (n + 1)) ::= 
        nf( emptyBRList, samp flip, emptyCNameList)) 
     || 
     (family 'Committed 'i (bound (n + 1)) ::= 
        nf('x : bool <- read ('Commit['i]), return (), 'x :: emptyCNameList)) 
     || 
     (family 'LeakCommitted_comm_adv 'i  (bound (n + 1)) ::= 
        nf('committed : unit <- read ('Committed['i]), 
           return 'committed, 
           'committed :: emptyCNameList)) 
     || 
     (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
        nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)) 
     || 
     (family 'Open 'i (bound (n + 1)) ::= 
        nf('x : unit <- read ('AllCommitted['i (n + 2)]), return (), 'x :: emptyCNameList)) 
     || 
     (family 'Opened 'i (bound (n + 1)) ::= 
        nf( ('commit : bool <- read ('Commit['i])) 
            ('x : unit <- read ('Open['i])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
     ) 
     || 
     (family 'Out 'i (bound (n + 1)) ::= 
        nf('sumOpened : bool <- read ('SumOpened['i (n + 2)]), 
            return 'sumOpened, 
            'sumOpened :: emptyCNameList)
     ) 
     || 
     family 'SumOpened ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) ::= 
       (when (0 =T= 'j) --> nf(emptyBRList, return False, emptyCNameList)) 
       ;; 
       (otherwise --> nf(('x : bool <- read ('SumOpened['i ('j -- 1)])) 
                         ('y : bool <- read ('Opened['j])), 
                         return (ap 'xor pair('x, 'y)), 
                         'x :: 'y :: emptyCNameList)
       )                  
     , 
     'AllCommitted :: 'SumOpened :: 'AllCommitted1 :: emptyCNameList
     ),
         insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
         insert('Commit @ (n ++ 1),  
          insert('Committed @ (n ++ 1),
           insert('LeakCommitted_comm_adv @ (n ++ 1),
            insert('LeakOpened_comm_adv @ (n ++ 1),
             insert('Open  @ (n ++ 1),
              insert('Opened @ (n ++ 1),
                     'Out @ (n ++ 1)
                     )))))), 
    empty
)
 using 
    applyIndStep1('AllCommitted) 
  ; SYM[P1:Protocol <- prot1]{comp-new-families}   
  . )

 
     
***( start of sym proof:
srew [1] 
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool)
    ('Commit @ (n ++ 1) :: bool) 
    ('Committed @ (n ++ 1) :: unit)
    ('LeakCommitted_comm_adv @ (n ++ 1) :: unit)
    ('LeakOpened_comm_adv @ (n ++ 1) :: bool)
    ('Open  @ (n ++ 1) :: unit)
    ('Opened @ (n ++ 1) :: bool), 
      newNF({ 'AllCommitted1 'i (bound (n + 2)) : unit}, 
     (family 'AllCommitted1 'i (bound (n + 2)) ::= 
       (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
       ;; 
       otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                         'y : unit <- read ('Committed['i -- 1]), 
                         return (), 
                         'x :: 'y ::  emptyCNameList)
      ) 
      || 
      (family 'Committed 'i (bound (n + 1)) ::= 
           nf('x : bool <- read ('Commit['i]), return (), 'x :: emptyCNameList)
      ) 
      || 
      (family 'LeakCommitted_comm_adv 'i (bound (n + 1)) ::= 
         nf('committed : unit <- read ('Committed['i]), return 'committed, 'committed :: emptyCNameList)
      ) 
      ||
      (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
         nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)
      ) 
      || 
      family 'Opened 'i (bound (n + 1)) ::= 
        nf(('commit : bool <- read ('Commit['i])) 
            'x : unit <- read ('Open['i]), 
            return 'commit, 'x :: 'commit :: emptyCNameList), 
    'AllCommitted1 :: emptyCNameList) 
    || 
    newNF({'AllCommitted ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) : unit}
          {'SumOpened ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) : bool}, 
           (family 'AllCommitted ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) ::= 
             otherwise --> nf('x : unit <- read ('AllCommitted1['j]),
                return 'x, 
                'x :: emptyCNameList) 
           ) 
           || 
           (family 'Commit 'i (bound (n + 1)) ::= 
              nf(emptyBRList, samp flip, emptyCNameList)) 
           || 
           (family 'Open 'i (bound (n + 1)) ::= 
             nf('x : unit <- read ('AllCommitted['i (n + 2)]), return (), 'x :: emptyCNameList)) 
           || 
           (family 'Out 'i (bound (n + 1)) ::= 
              nf('sumOpened : bool <- read ('SumOpened['i (n + 2)]), 
                 return 'sumOpened, 'sumOpened :: emptyCNameList)) 
           || 
            (family 'SumOpened ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) ::= 
              (when (0 =T= 'j) --> nf(emptyBRList, return False, emptyCNameList))
              ;; 
        otherwise --> nf(('x : bool <- read ('SumOpened['i ('j -- 1)])) 
                          'y : bool <- read ('Opened['j]), 
                          return (ap 'xor pair('x, 'y)), 
                          'x :: 'y :: emptyCNameList)), 
    'AllCommitted :: 'SumOpened :: emptyCNameList)  
    ,
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
         insert('Commit @ (n ++ 1),  
          insert('Committed @ (n ++ 1),
           insert('LeakCommitted_comm_adv @ (n ++ 1),
            insert('LeakOpened_comm_adv @ (n ++ 1),
             insert('Open  @ (n ++ 1),
              insert('Opened @ (n ++ 1),
                     'Out @ (n ++ 1)
                     )))))), 
    empty
)
using   comp-new-families 
      ; redOwiseTwo('AllCommitted)
      ; applySubstReadFamilyTwoFamily('Open, 'AllCommitted)
.  

srew [1] 
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool)
    ('Commit @ (n ++ 1) :: bool) 
    ('Committed @ (n ++ 1) :: unit)
    ('LeakCommitted_comm_adv @ (n ++ 1) :: unit)
    ('LeakOpened_comm_adv @ (n ++ 1) :: bool)
    ('Open  @ (n ++ 1) :: unit)
    ('Opened @ (n ++ 1) :: bool), 
    prot2 
    ,
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
         insert('Commit @ (n ++ 1),  
          insert('Committed @ (n ++ 1),
           insert('LeakCommitted_comm_adv @ (n ++ 1),
            insert('LeakOpened_comm_adv @ (n ++ 1),
             insert('Open  @ (n ++ 1),
              insert('Opened @ (n ++ 1),
                     'Out @ (n ++ 1)
                     )))))), 
    empty
)
using   comp-new-families 
.

) 

 
***( set trace condition off .
set trace off .

red typeOf(secSig, ('Out 1 :: bool) 
                 ('AdvCommit_adv_party 1 :: bool) 
                 ('AdvOpen_adv_party 1 :: unit),
           insert('AdvCommit_adv_party, 'AdvOpen_adv_party),
           real ) .
)


srew [1]
pConfig(secSig, 
    (('AllCommitted1[0] @ nil) :: unit)
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool), 
    prot7,
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using substNFFamilyOne('SumCommit, 'AllCommitted1[0], nf(emptyBRList, return False, emptyCNameList)) .

***(      
         
srew [1] pConfig(
 secSig, 
 (('Out @ (n ++ 1)) :: bool) 
 (('AdvCommit_adv_party @ (n ++ 1)) :: bool) 
 (('AdvOpen_adv_party @ (n ++ 1)) :: unit),
    ( *** main bracket
    newNF( *** open nf
     {'AllCommitted ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) : unit}
          {'SumOpened ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) : bool}, 
    (family 'AllCommitted ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) ::= 
       (when ('j =T= 0) --> nf(emptyBRList, return (), emptyCNameList)) 
       ;; 
       (otherwise --> nf(('x : unit <- read ('AllCommitted['i ('j -- 1)])) 
                         ('y : unit <- read ('Committed['j -- 1])), 
                         return (), 
                         'x :: 'y :: emptyCNameList)
       )
    ) 
    || 
    (family 'Commit 'i (bound (n + 1)) ::= 
      nf(emptyBRList, samp flip, emptyCNameList)
    ) 
    || 
    (family 'Open 'i (bound (n + 1)) ::= 
      nf('x : unit <- read ('AllCommitted['i (n + 2)]), 
         return (), 
         'x :: emptyCNameList)
    ) 
    || 
    ( family 'Out 'i (bound (n + 1)) ::= 
       nf('sumOpened : bool <- read ('SumOpened['i (n + 2)]), 
          return 'sumOpened, 
          'sumOpened :: emptyCNameList)
   ) 
   ||
    (family 'SumOpened ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) ::= 
       (when ('j =T= 0) --> nf(emptyBRList, return False, emptyCNameList)) ;; 
       (otherwise -->   nf(('x : bool <- read ('SumOpened['i ('j -- 1)])) 
                           'y : bool <- read ('Opened['j]), 
                           return (ap 'xor pair('x, 'y)), 
                           'x :: 'y :: emptyCNameList) 
       ) 
    ), 
    'AllCommitted :: 'SumOpened :: emptyCNameList
     ) *** end nf
    ) ***end main bracket 
    ||
    ( *** main bracket
      newNF( *** open nf
        {'AllCommitted1 'i (bound (n + 2)) : unit}, 
      (family 'AllCommitted1 'i (bound (n + 2)) ::= 
         (when ('i =T= 0) --> nf(emptyBRList, return (), emptyCNameList)) ;; 
         otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                           'y : unit <- read ('Committed['i -- 1]), 
                           return (), 
                           'x :: 'y :: emptyCNameList)
      ) 
      || 
      ( family 'Committed 'i (bound (n + 1)) ::= 
          nf('x : bool <- read ('Commit['i]), return (), 'x :: emptyCNameList)
      ) || 
      (family 'LeakCommitted_comm_adv 'i (bound (n + 1)) ::= 
         nf('committed : unit <- read ('Committed['i]), 
            return 'committed, 'committed :: emptyCNameList)
      ) || 
      (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
         nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)
      ) 
      || 
       (family 'Opened 'i (bound (n + 1)) ::= 
          nf(('commit : bool <- read ('Commit['i])) 
              'x : unit <- read ('Open['i]), 
              return 'commit, 
              'x :: 'commit :: emptyCNameList) 
       ), 
        'AllCommitted1 :: emptyCNameList
     ) *** close nf
    ) *** close main bracket
    ,
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)),
    'Out @ (n ++ 1),
    empty
)    
   using *** idle
    comp-new-families
    *** ; CONG-NEW-NF{idle}  
    *** ; CONG-NEW-NF{INDUCTION-when-one[C:ChannelName <- 'AllCommitted]{idle, idle}}
    .   
)

***(
srew [1] pConfig(secSig, 
                 ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool),
                 real,
                 insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
                 empty
                ) 
   using   sugar-newNF .
   )
   

***( induction base here!

srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool), 
    newNF({'Commit 'i (bound (n + 1)) : bool} 
          {'Committed 'i (bound (n + 1)) : unit} 
          {'LeakCommitted_comm_adv 'i (bound (n + 1)) : unit} 
          {'LeakOpened_comm_adv 'i (bound (n + 1)) : bool} 
          {'Open 'i (bound (n + 1)) : unit} 
          {'Opened 'i (bound (n + 1)) : bool}
          {'AllCommitted ('i 'j) (bound (n + 1) uniformBound (n + 2)) : unit} 
          {'SumOpened ('i 'j) (bound (n + 1) uniformBound (n + 2)) : bool}
          {'AllCommitted1 'i (bound (n + 2)) : unit} 
     ,
     ( 
     projectIndex
     (family 'AllCommitted ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) ::= 
       (when (0 =T= 'j) --> nf(emptyBRList, return (), emptyCNameList)) 
       ;; 
       (otherwise --> nf(('x : unit <- read ('AllCommitted['i ('j -- 1)])) 
                         ('y : unit <- read ('Committed['j -- 1])), 
                         return (), 
                         'x :: 'y :: emptyCNameList)
       )                  
     ) *** end family
     0 (insert('i <=T (n + 1), 'j =T= 0)) empty
     ) *** end project 
     || 
     (family 'AllCommitted1 'i (bound (n + 2)) ::= 
        (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
        ;;
        ( otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                           ('y : unit <- read ('Committed['i -- 1])), 
                           return (), 'x :: 'y :: emptyCNameList)
        )                   
     ) 
     || 
     (family 'Commit 'i (bound (n + 1)) ::= 
        nf( emptyBRList, samp flip, emptyCNameList)) 
     || 
     (family 'Committed 'i (bound (n + 1)) ::= 
        nf('x : bool <- read ('Commit['i]), return (), 'x :: emptyCNameList)) 
     || 
     (family 'LeakCommitted_comm_adv 'i  (bound (n + 1)) ::= 
        nf('committed : unit <- read ('Committed['i]), 
           return 'committed, 
           'committed :: emptyCNameList)) 
     || 
     (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
        nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)) 
     || 
     (family 'Open 'i (bound (n + 1)) ::= 
        nf('x : unit <- read ('AllCommitted['i (n + 2)]), return (), 'x :: emptyCNameList)) 
     || 
     (family 'Opened 'i (bound (n + 1)) ::= 
        nf( ('commit : bool <- read ('Commit['i])) 
            ('x : unit <- read ('Open['i])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
     ) 
     || 
     (family 'Out 'i (bound (n + 1)) ::= 
        nf('sumOpened : bool <- read ('SumOpened['i (n + 2)]), 
            return 'sumOpened, 
            'sumOpened :: emptyCNameList)
     ) 
     || 
     family 'SumOpened ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) ::= 
       (when (0 =T= 'j) --> nf(emptyBRList, return False, emptyCNameList)) 
       ;; 
       (otherwise --> nf(('x : bool <- read ('SumOpened['i ('j -- 1)])) 
                         ('y : bool <- read ('Opened['j])), 
                         return (ap 'xor pair('x, 'y)), 
                         'x :: 'y :: emptyCNameList)
       )                  
     , 
     'AllCommitted :: 'SumOpened :: 'AllCommitted1 :: 
      'Commit :: 'Committed :: 'LeakCommitted_comm_adv :: 
      'LeakOpened_comm_adv :: 'Open :: 'Opened :: emptyCNameList
     ), 
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using applySubstRevFamily('AllCommitted1, 'AllCommitted ['i 0], unit)
	 .   	 
)

 ***(here we test ind base, no newnf
 
 srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool)
    ('AllCommitted @ ((n ++ 1)(n ++ 2)) :: unit)
    ('AllCommitted1 @ (n ++ 2) :: unit)
    , 
     
     ('AllCommitted['i 0] ::= nf(emptyBRList,
    return (), emptyCNameList))
     || 
     (family 'AllCommitted1 'i (bound (n + 2)) ::= 
        (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
        ;;
        ( otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                           ('y : unit <- read ('Committed['i -- 1])), 
                           return (), 'x :: 'y :: emptyCNameList)
        )                   
     ) 
     , 
    insert('AdvCommit_adv_party @ (n ++ 1), 
       insert('AdvOpen_adv_party @ (n ++ 1), 'Committed @ (n ++ 1))
    ), 
    'Out @ (n ++ 1), 
    empty
)
using  subst-rev-families .
 )  
 
     
     srew [1]
     pConfig(secSig,
      ('Commit @ n ++ 1 :: bool) 
          ('Committed @ n ++ 1 :: unit)
          ('AllCommitted1 @ n ++ 2 :: unit)
          ('SumCommit @ n ++ 2 :: bool)
          ,
           
     (family 'SumCommit 'i (bound (n + 2)) ::= 
        (when (0 =T= 'i) --> nf(emptyBRList, return False, emptyCNameList)) 
        ;;
        ( otherwise --> nf(('xj : bool <- read ('SumCommit['i -- 1]))
                           ('cj : bool <- read ('Commit['i -- 1])),
                           return (ap 'xor pair('xj, 'cj)),
                           'xj :: 'cj :: emptyCNameList
                        )
        )                   
     ) 
     ||
     (family 'Commit 'i (bound (n + 1)) ::= 
        nf( emptyBRList, samp flip, emptyCNameList)) 
     || 
     (family 'Committed 'i (bound (n + 1)) ::= 
        nf('x : bool <- read ('Commit['i]), return (), 'x :: emptyCNameList)) 
     ||   
     ('AllCommitted1['k ++ 1] ::= 
       nf(('x : unit <- read ('AllCommitted1['k])) 
           'y : unit <- read ('Committed['k]), 
           return (), 
           'x :: 'y :: emptyCNameList)
     ) 
     ||
     family 'AllCommitted1 'i (bound 'k) ::=
       nf('sc : bool <- read ('SumCommit['i]), 
          return (), 
          'sc :: emptyCNameList),
          empty,
          insert('AllCommitted1 @ 'k, 
            insert('Commit @ n + 1, 
             insert('Committed @ n + 1, 
              insert('SumCommit @ n + 2, 'AllCommitted1['k ++ 1] @ nil)
              )
              )
              ), 
    'k ++ 1 <=T  n + 2)
    using substNFFamilyOne('AllCommitted1, 'AllCommitted1['k ++ 1],   nf('sc : bool <- read ('SumCommit['k]), 
           return (), 
           'sc :: emptyCNameList)
      )
      .   
 
***( This is the induction step!
 
srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool), 
    newNF({'Commit 'i (bound (n + 1)) : bool} 
          {'Committed 'i (bound (n + 1)) : unit} 
          {'LeakCommitted_comm_adv 'i (bound (n + 1)) : unit} 
          {'LeakOpened_comm_adv 'i (bound (n + 1)) : bool} 
          {'Open 'i (bound (n + 1)) : unit} 
          {'Opened 'i (bound (n + 1)) : bool}
          {'AllCommitted ('i 'j) (bound (n + 1) uniformBound (n + 2)) : unit} 
          {'SumOpened ('i 'j) (bound (n + 1) uniformBound (n + 2)) : bool}
          {'AllCommitted1 'i (bound (n + 2)) : unit} 
     ,
     (family 'AllCommitted ('i 'j) ((bound (n + 1)) (uniformBound 'k)) ::= 
       nf('x : unit <- read ('AllCommitted1['j]), return 'x, 'x :: emptyCNameList)
     ) *** end family
     ||
     ('AllCommitted['i ('k ++ 1)] ::= 
       nf(('x : unit <- read ('AllCommitted['i 'k])) 
           'y : unit <- read ('Committed['k]), 
           return (), 
           'x :: 'y :: emptyCNameList))
     || 
     (family 'AllCommitted1 'i (bound (n + 2)) ::= 
        (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
        ;;
        ( otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                           ('y : unit <- read ('Committed['i -- 1])), 
                           return (), 'x :: 'y :: emptyCNameList)
        )                   
     ) 
     || 
     (family 'Commit 'i (bound (n + 1)) ::= 
        nf( emptyBRList, samp flip, emptyCNameList)) 
     || 
     (family 'Committed 'i (bound (n + 1)) ::= 
        nf('x : bool <- read ('Commit['i]), return (), 'x :: emptyCNameList)) 
     || 
     (family 'LeakCommitted_comm_adv 'i  (bound (n + 1)) ::= 
        nf('committed : unit <- read ('Committed['i]), 
           return 'committed, 
           'committed :: emptyCNameList)) 
     || 
     (family 'LeakOpened_comm_adv 'i (bound (n + 1)) ::= 
        nf('opened : bool <- read ('Opened['i]), return 'opened, 'opened :: emptyCNameList)) 
     || 
     (family 'Open 'i (bound (n + 1)) ::= 
        nf('x : unit <- read ('AllCommitted['i (n + 2)]), return (), 'x :: emptyCNameList)) 
     || 
     (family 'Opened 'i (bound (n + 1)) ::= 
        nf( ('commit : bool <- read ('Commit['i])) 
            ('x : unit <- read ('Open['i])), 
            return 'commit, 
            'x :: 'commit :: emptyCNameList)
     ) 
     || 
     (family 'Out 'i (bound (n + 1)) ::= 
        nf('sumOpened : bool <- read ('SumOpened['i (n + 2)]), 
            return 'sumOpened, 
            'sumOpened :: emptyCNameList)
     ) 
     || 
     family 'SumOpened ('i 'j) ((bound (n + 1)) (uniformBound (n + 2))) ::= 
       (when (0 =T= 'j) --> nf(emptyBRList, return False, emptyCNameList)) 
       ;; 
       (otherwise --> nf(('x : bool <- read ('SumOpened['i ('j -- 1)])) 
                         ('y : bool <- read ('Opened['j])), 
                         return (ap 'xor pair('x, 'y)), 
                         'x :: 'y :: emptyCNameList)
       )                  
     , 
     'AllCommitted :: 'SumOpened :: 'AllCommitted1 :: 
      'Commit :: 'Committed :: 'LeakCommitted_comm_adv :: 
      'LeakOpened_comm_adv :: 'Open :: 'Opened :: emptyCNameList
     ), 
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using 
     nTimesSubstNFReadFamilyTwo('AllCommitted, 'AllCommitted['i ('k ++ 1)]) 
   ; nTimesSubstFamiliesOne('AllCommitted1, 'AllCommitted['i ('k ++ 1)], 'k ++ 1, unit)
   *** ; nTimesExtendBoundTwo('AllCommitted, 'AllCommitted['i ('k ++ 1)])
   .
)   

***( isolated, no strategy needed
srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool), 
    (family 'AllCommitted1 'i (bound (n + 2)) ::= 
        (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
        ;;
        ( otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                           ('y : unit <- read ('AdvCommit_adv_party['i -- 1])), 
                           return (), 'x :: 'y :: emptyCNameList)
        )                   
     ) 
     ||
     ('AllCommitted['i ('k ++ 1)] ::= 
       nf(('x : unit <- read ('AllCommitted1['k])) 
           'y : unit <- read ('AdvCommit_adv_party['k]), 
           return (), 
           'x :: 'y :: emptyCNameList)),
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using subst-families-one[nj:NatTerm <- 'k ++ 1, T:Type <- unit] .


*** and here is the condition check
red (projectIndex (family 'AllCommitted1 'i (bound (n + 2)) ::= 
        (when (0 =T= 'i) --> nf(emptyBRList, return (), emptyCNameList)) 
        ;;
        ( otherwise --> nf(('x : unit <- read ('AllCommitted1['i -- 1])) 
                           ('y : unit <- read ('AdvCommit_adv_party['i -- 1])), 
                           return (), 'x :: 'y :: emptyCNameList)
        )                   
     ) ('k ++ 1) 
       ('i =T= 'k ++ 1) empty) == ('AllCommitted1['k ++ 1] ::= nf(('x : unit <- read ('AllCommitted1['k])) 
           'y : unit <- read ('AdvCommit_adv_party['k]), 
           return (), 
           'x :: 'y :: emptyCNameList)) 
.
)

***( without strategies
srew [1]
pConfig(secSig, 
    ('AdvCommit_adv_party @ (n ++ 1) :: bool) 
    ('AdvOpen_adv_party @ (n ++ 1) :: unit) 
    ('Out @ (n ++ 1) :: bool), 
    ('AllCommitted['i ('k ++ 1)] ::= 
      nf('x : unit <- read ('AllCommitted1['k ++ 1]), 
         return 'x, 
         'x :: emptyCNameList)) 
    || 
    (family 'AllCommitted ('i 'j) ((bound (n + 1)) (uniformBound 'k)) ::= 
      nf('x : unit <- read ('AllCommitted1['j]), 
         return 'x, 
         'x :: emptyCNameList)),
    insert('AdvCommit_adv_party @ (n ++ 1), 'AdvOpen_adv_party @ (n ++ 1)), 
    'Out @ (n ++ 1), 
    empty
)
using extend-bound-two . 
)

