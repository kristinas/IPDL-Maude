***( IPDL

  Copyright : (C) 2022-23, Kristina Sojakova, Mihai Codescu
  License   : GNU General Public License v3.0 or later (GPL-3.0-or-later)
  Authors   : Mihai Codescu <mscodescu@gmail.com>
              Kristina Sojakova <sojakova.kristina@gmail.com>

Multi-Party GMW Protocol
See Sec. 9 in doc/case-studies.pdf

)

load ../src/strategies

mod GMWN is
 including APPROX-EQUALITY .
 protecting LIST{NatPairs} .
 
 
 op sumF : -> SigElem .
 eq sumF = 'xor : (bool * bool) ~> bool .
 *** xor is +
 
 op mulF : -> SigElem .
 eq mulF = 'and : (bool * bool) ~> bool .
 *** and is *
 
 op negF : -> SigElem .
 eq negF = 'neg : bool ~> bool .
 
 op flipF : -> SigElem .
 eq flipF = 'flip : unit ~>> bool .
 
 op sig : -> Signature .
 eq sig = sumF mulF negF flipF .
 
 var i j l k n : Nat .
 
 *** global parameters
 
 op N : -> Nat . 
 
 op K : -> Nat .
 
 *** for each party p, I(p) is the number of inputs for p
 op I : Nat -> Nat . 
 
 op C : -> Circuit . *** the circuit acting as parameter
 
 *** gates and circuits
 
 sort Gate .
 
 op input-gate : Nat Nat -> Gate [ctor] . *** first nat is the party
 op not-gate : Nat -> Gate [ctor] .
 op xor-gate : Nat Nat -> Gate [ctor] .
 op and-gate : Nat Nat -> Gate [ctor] .
 
 sort Circuit . *** list of gates
 subsort Gate < Circuit .
 op emptyCircuit : -> Circuit [ctor] .
 op __ : Circuit Circuit -> Circuit [ctor assoc id: emptyCircuit] .

 op wellFormed : Circuit Nat -> Bool .
 
 var circuit : Circuit .
 eq wellFormed(emptyCircuit, 0) = true .
 ceq wellFormed(circuit input-gate(i, j), s(n)) = true 
  if wellFormed(circuit, n) /\ i <= N + 1 /\ j < I(i) .
 ceq wellFormed(circuit not-gate(k), s(n)) = true
  if wellFormed(circuit, n) /\ k < n . 
 ceq wellFormed(circuit and-gate(k, l), s(n)) = true
  if wellFormed(circuit, n) /\ k < n /\ l < n .
 ceq wellFormed(circuit xor-gate(k, l), s(n)) = true
  if wellFormed(circuit, n) /\ k < n /\ l < n .
  
 *** helpers
 *** get the gate at the start of the circuit, after i pops
 *** i must be at most the length of circuit
 *** the circuit must be non-empty
 
 var gate : Gate .
 
 op gateAt : Circuit Nat -> Gate .
 eq gateAt(gate circuit, 0) = gate .
 eq gateAt(gate circuit, s(n)) = gateAt(circuit, n) .
 
 *** the wires of a gate, as a list
 op wiresOf : Gate -> List{NatPairs} .
 eq wiresOf(input-gate(i, j)) = (0 ;; i) (1 ;; j) .
 eq wiresOf(not-gate(i)) = (0 ;; i) .
 eq wiresOf(and-gate(k, l)) = (0 ;; k) (1 ;; l) .
 eq wiresOf(xor-gate(k, l)) = (0 ;; k) (1 ;; l) .
 
 *** list as an unsafe map
 var natPairs : List{NatPairs} .
 op _@@_ : List{NatPairs} Nat -> Nat .
 eq ( (i ;; k) natPairs) @@ i = k .
 ceq ( (l ;; k) natPairs) @@ i = natPairs @@ i if l =/= i .
 
 *** wire 0 of the circuit C at a given gate
 op wire0 : Nat -> Nat .
 eq wire0(i) = wiresOf(gateAt(C, i)) @@ 0 .
 
 *** wire 1 of the circuit C at a given gate
 op wire1 : Nat -> Nat .
 eq wire1(i) = wiresOf(gateAt(C, i)) @@ 1 .
 
  *** here we connect 'wire0 with wire0 
 var nt : NatTerm .
 var f : Map{Qid, NatTerm} .
 ceq evalTerm (fun 'wire0 nt) f = wire0(evalTerm nt f) 
  if (evalTerm nt f) : Nat .
 eq evalTerm (fun 'wire0 nt) f = fun 'wire0 nt [owise] . 
 ceq evalTerm (fun 'wire1 nt) f = wire1(evalTerm nt f) 
  if (evalTerm nt f) : Nat .
 eq evalTerm (fun 'wire1 nt) f = fun 'wire1 nt [owise] .
 
 *** for I
 eq evalTerm (fun 'I nt) f = fun 'I (evalTerm nt f) . 

 *** here we record the assumptions on indices
 var q : Qid .
 var A : Set{BoolTerm} .
 
 ceq A |= fun 'wire0 nt <T N + 2 with f = true 
   if (apply 'isInputGate (evalTerm nt f)) in A .
 ceq A |= (fun 'wire1 nt <T fun 'I (fun 'wire0 nt)) with f = true 
    if (apply 'isInputGate (evalTerm nt f)) in A [label depBounds] .
 
 ceq A |= fun 'wire0 nt <T K with f = true 
    if (apply 'isNotGate (evalTerm nt f)) in A [label notIndex].
 
 ceq A |= fun 'wire0 nt <T K with f = true 
    if (apply 'isXorGate (evalTerm nt f)) in A .
 ceq A |= fun 'wire1 nt <T K with f = true 
    if (apply 'isXorGate (evalTerm nt f)) in A .   
 
 ceq A |= fun 'wire0 nt <T K with f = true 
    if (apply 'isAndGate (evalTerm nt f)) in A [label andIndex] .
 ceq A |= fun 'wire1 nt <T K with f = true 
    if (apply 'isAndGate (evalTerm nt f)) in A .
    
 eq A |= fun 'wire0 i <T n with f = (A |= i <T n with f) .
 *** where do we need this? is this N?
 
  *** generic assumptions shared by both proofs
 op genA : -> Set{BoolTerm} .
 eq genA = ( neg (apply 'isXorGate 0), 
             neg (apply 'isAndGate 0), 
             neg (apply 'isNotGate 0),
             0 <T K,
             0 <T N + 2,
             N <T N + 1,
             N + 1 <T N + 2, 
             apply 'isHonest (N + 1) )
 . 
 
 *** delta
 
 op delta : -> ChannelContext .
 eq delta = 
  (fam (('InRcvd ^^ 'party .. 'adv)[(bound (N + 2)) (dependentBound 'I)]) :: unit) 
  (fam (('InShare$-Sum ^^ 'party .. 'adv)[(bound (N + 1)) (bound (N + 2)) (bound K)]) :: bool)
  (fam (('InShare$ ^^ 'party .. 'adv)
         [(bound (N + 2)) (bound (N + 2)) (dependentBound 'I)]
       ) :: bool)
  (fam (('InShare ^^ 'party .. 'adv)
        [(bound (N + 2)) (bound (N + 2)) (dependentBound 'I)]
       ) :: bool)
  (fam (('In ^^ 'party .. 'adv)
        [(bound (N + 2)) (dependentBound 'I)]
       ) :: bool)  
  (fam (('OTChc-0 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool) 
  (fam (('OTChc-1 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool) 
  (fam (('OTChcRcvd-0 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: unit) 
  (fam (('OTChcRcvd-1 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: unit) 
  (fam (('OTMsg-0 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool) 
  (fam (('OTMsg-1 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool) 
  (fam (('OTMsg-2 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool) 
  (fam (('OTMsg-3 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool) 
  (fam (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: unit)
  (fam (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: unit) 
  (fam (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: unit) 
  (fam (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: unit) 
  (fam (('OTOut ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool) 
  (fam ('Out[(bound (N + 2)) (bound K)]) :: bool)    
  (fam (('OutShareSum ^^ 'party .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool) 
  (fam (('OutShare ^^ 'party .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool)
  (fam (('Out ^^ 'party .. 'adv)[(bound (N + 2)) (bound K)]) :: bool)  
  (fam (('RcvdInShare ^^ 'party .. 'adv)
        [(bound (N + 2)) (bound (N + 2)) (dependentBound 'I)]
       ) :: bool)  
  (fam (('RcvdOutShare ^^ 'party .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool) 
  (fam (('SendInShare ^^ 'party .. 'adv)
        [(bound (N + 2)) (bound (N + 2)) (dependentBound 'I)]
       ) :: bool) 
  (fam (('SendOutShare ^^ 'party .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool)  
  (fam (('Share ^^ 'party .. 'adv)[(bound (N + 2)) (bound K)]) :: bool)
  (fam (('Ctrb ^^ 'party .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool) 
  (fam (('RcvdBit ^^ 'party .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool) 
  (fam (('SendBit ^^ 'party .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool)
  (fam (('CtrbSum ^^ 'party .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]) :: bool)  
  (fam ('In[(bound (N + 2)) (dependentBound 'I)]) :: bool)
   .
   
     *** ideal protocol
  
  op ideal : -> Protocol .
  eq ideal =
   newfamily ('Wire[bound K]) 'k (bound K) : bool in
   leakageIdeal || wiresIdeal || finalIdeal
  .
  
  op leakageIdeal : -> Protocol .
  eq leakageIdeal = 
     (family ('In ^^ 'id .. 'adv[((bound (N + 2))(dependentBound 'I))]) 
      ('n 'i) ((bound (N + 2))(dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('in : bool <- read ('In['n 'i]), return 'in, 'in)
       )
       ;;
       (when (apply 'isHonest 'n) --> 
         nf('in : bool <- read (('In ^^ 'id .. 'adv)['n 'i]), return 'in, 'in)
       )
     ) 
     ||
     (family ('InRcvd ^^ 'id .. 'adv[((bound (N + 2))(dependentBound 'I))]) 
       ('n 'i) ((bound (N + 2))(dependentBound 'I)) ::=
       (when (apply 'isHonest 'n) --> 
         nf('in : bool <- read ('In['n 'i]), return (), 'in)
       )
       ;;
       (when (apply 'isSemiHonest 'n) --> 
         nf('in : unit <- read (('InRcvd ^^ 'id .. 'adv)['n 'i]), 
            return 'in, 'in)
       )
     ) 
       
  .
  
  op wiresIdeal : -> Protocol .
  eq wiresIdeal = 
     family ('Wires[bound K]) 'k (bound K) ::= 
       (
        family ('Wire[bound K]) 'k (bound K) ::=
         (when (apply 'isInputGate 'k) --> 
           nf( 'w : bool <- read ('In[(fun 'wire0 'k) (fun 'wire1 'k)]), 
               return 'w, 'w)
         )
         ;;
         (when (apply 'isNotGate 'k) --> 
          nf('x : bool <- read ('Wire[fun 'wire0 'k]),
             return (ap 'neg 'x), 'x)
         )
         ;;
         (when (apply 'isXorGate 'k) --> 
          nf(('x : bool <- read ('Wire[fun 'wire0 'k]))
             ('y : bool <- read ('Wire[fun 'wire1 'k])),
             return (ap 'xor pair('x, 'y)), 'x 'y)
         )
         ;;
         (when (apply 'isAndGate 'k) --> 
          nf(('x : bool <- read ('Wire[fun 'wire0 'k]))
             ('y : bool <- read ('Wire[fun 'wire1 'k])),
             return (ap 'and pair('x, 'y)), 'x 'y)
         )
       )
  .
  
  op finalIdeal : -> Protocol .
  eq finalIdeal =
     (family (('Out ^^ 'id .. 'adv)[((bound (N + 2))(bound K))]) 
        ('n 'k) ((bound (N + 2))(bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('out : bool <- read ('Out['n 'k]), return 'out, 'out)
       )
       ;;
       (when (apply 'isHonest 'n) --> 
         nf('out : bool <- read (('Out ^^ 'id .. 'adv)['n 'k]), return 'out, 'out)
       )
     )
     ||
     (family ('Out[((bound (N + 2))(bound K))]) ('n 'k) ((bound (N + 2))(bound K)) ::=
       (when (apply 'isOutputWire 'k) --> 
         nf('out : bool <- read ('Wire['k]), return 'out, 'out)
       )
       ;;
       (otherwise --> 
         nf('out : bool <- read ('Out['n 'k]), return 'out, 'out)
       )
     
     )
  .
  
  *** sim protocol
  
  op sim : -> Protocol .
  eq sim = 
     newfamily ('InShare[((bound (N + 1)) (bound (N + 2)) (dependentBound 'I))]) 
               ('m 'n 'i) 
               ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) : bool in
     newfamily ('Share[((bound (N + 2))(bound K))]) 
               ('n 'k) ((bound (N + 2))(bound K)) : bool in
     newfamily ('Share-Sum[((bound (N + 1))(bound K))]) 
               ('m 'k) ((bound (N + 1))(bound K)) : bool in          
     initialSim || inductiveSim || finalSim || shareSim  
  . 
  
  op initialSim : -> Protocol .
  eq initialSim = 
     newfamily ('InShare$[((bound (N + 1))(bound (N + 2))(dependentBound 'I))]) ('m 'n 'i) 
                ((bound (N + 1))(bound (N + 2))(dependentBound 'I)) : bool in
     newfamily ('InShare$-Sum[((bound (N + 1))(bound (N + 2))(dependentBound 'I))]) 
                ('m 'n 'i) 
                ((bound (N + 1))(bound (N + 2))(dependentBound 'I)) : bool in
     (
     (family (('In ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) ('n 'i)
             ((bound (N + 2))(dependentBound 'I)) ::=
       ( (when (apply 'isSemiHonest 'n) -->
           nf('in : bool <- read (('In ^^ 'id .. 'adv) ['n 'i]), 
               return 'in, 'in)  
         ) 
         ;;
         (when (apply 'isHonest 'n) --> *** diverge
           nf('in : bool <- read (('In ^^ 'party .. 'adv) ['n 'i]), 
               return 'in, 'in)  
         )
       
       )      
     )
     ||
     (family (('InRcvd ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) ('n 'i)
             ((bound (N + 2))(dependentBound 'I)) ::=
       ( (when (apply 'isHonest 'n) -->
           nf('in : bool <- read (('InRcvd ^^ 'id .. 'adv) ['n 'i]), 
               return 'in, 'in)  
         ) 
         ;;
         (when (apply 'isSemiHonest 'n) --> *** diverge
           nf('in : bool <- read (('InRcvd ^^ 'party .. 'adv) ['n 'i]), 
               return 'in, 'in)  
         )
       
       )   
     )
     ||
     (family ('InShare$[((bound (N + 1))(bound (N + 2))(dependentBound 'I))]) ('m 'n 'i) 
             ((bound (N + 1))(bound (N + 2))(dependentBound 'I)) ::= 
       ( (when (apply 'isSemiHonest 'n) -->
           nf('x : bool <- read (('In ^^ 'id .. 'adv) ['n 'i]), 
              samp ('flip < () >), 'x)  
         ) 
         ;;
         (when (apply 'isHonest 'n) -->
           nf('x : bool <- read (('InRcvd ^^ 'id .. 'adv) ['n 'i]), 
              samp ('flip < () >), 'x)  
         )
       
       )         
     ) 
     ||
     (family (('InShare$ ^^ 'party .. 'adv)[((bound (N + 1))(bound (N + 2))(dependentBound 'I))])
             ('m 'n 'i) 
             ((bound (N + 1))(bound (N + 2))(dependentBound 'I)) ::= 
       ( (when (apply 'isSemiHonest 'n) -->
           nf('in : bool <- read ('InShare$ ['n 'i]), 
               return 'in, 'in)  
         ) 
         ;;
         (when (apply 'isHonest 'n) --> *** diverge
          nf('in : bool <- read (('InShare$ ^^ 'party .. 'adv)['n 'i]), 
               return 'in, 'in) 
         )
       
       )  
     ) *** 
     ||
     (family ('InShare$-Sum[((bound (N + 1))(bound (N + 2))(dependentBound 'I))]) 
             ('m 'n 'i) 
             ((bound (N + 1))(bound (N + 2))(dependentBound 'I)) ::= 
       ( (when ('m =T= 0) --> 
           nf('in : bool <- read ('InShare$ [0 'n 'i]), return 'in, 'in)
         ) 
         ;; 
         (otherwise --> 
          nf( ('xs : bool <- read ('InShare$-Sum [('m -- 1) 'n 'i]) )
              ('xm : bool <- read ('InShare$ ['m 'n 'i])) ,
             return (ap 'xor pair('xs, 'xm)), 'xs 'xm) 
         )
       )      
     )
     ||
     (family (('InShare$-Sum ^^ 'party .. 'adv)
              [((bound (N + 1))(bound (N + 2))(dependentBound 'I))])
             ('m 'n 'i) 
             ((bound (N + 1))(bound (N + 2))(dependentBound 'I)) ::=
       ( (when (('m =T= N + 1) conj (apply 'isSemiHonest 'n)) --> 
           nf( ('xs : bool <- read ('InShare$-Sum [N 'n 'i]) )
               ('x  : bool <- read (('In ^^ 'id .. 'adv) ['n 'i])) ,
             return (ap 'xor pair('xs, 'x)), 'xs 'x) 
         ) 
          ;; 
         (when (('m =T= N + 1) conj (apply 'isHonest 'n)) --> *** diverge
           nf('in : bool <- read (('InShare$-Sum ^^ 'party .. 'adv)[(N + 1) 'n 'i]), 
               return 'in, 'in) 
         ) 
          ;; 
         (when (('m <=T N) conj (apply 'isSemiHonest 'n)) -->
          nf('in : bool <- read ('InShare$-Sum['m 'n 'i]), 
               return 'in, 'in) 
         ) 
          ;; 
         (when (('m <=T N) conj (apply 'isHonest 'n)) --> *** diverge
           nf('in : bool <- read (('InShare$-Sum ^^ 'party .. 'adv)['m 'n 'i]), 
               return 'in, 'in) 
         )
       
       )       
     ) 
     ||
     (family (('SendInShare ^^ 'party .. 'adv)
               [((bound (N + 1))(bound (N + 2))(dependentBound 'I))]) 
             ('m 'n 'i) 
             ((bound (N + 1))(bound (N + 2))(dependentBound 'I)) ::= 
       ( (when (('m =T= N + 1) conj (apply 'isSemiHonest 'n)) --> 
           nf( ('xs : bool <- read ('InShare$-Sum [N 'n 'i]) )
               ('x  : bool <- read (('In ^^ 'id .. 'adv) ['n 'i])) ,
             return (ap 'xor pair('xs, 'x)), 'xs 'x) 
         ) 
          ;; 
         (when (('m =T= N + 1) conj (apply 'isHonest 'n)) --> *** diverge
           nf('in : bool <- read (('SendInShare ^^ 'party .. 'adv)[(N + 1) 'n 'i]), 
               return 'in, 'in) 
         ) 
          ;; 
         (when (('m <=T N) conj (apply 'isSemiHonest 'n)) -->
          nf('in : bool <- read ('InShare$['m 'n 'i]), 
               return 'in, 'in) 
         ) 
          ;; 
         (when (('m <=T N) conj (apply 'isHonest 'n)) --> *** diverge
           nf('in : bool <- read (('SendInShare ^^ 'party .. 'adv)['m 'n 'i]), 
               return 'in, 'in) 
         )
       )             
     ) 
     || 
     (family (('RcvdInShare ^^ 'party .. 'adv)
               [((bound (N + 1))(bound (N + 2))(dependentBound 'I))]) 
             ('m 'n 'i) 
             ((bound (N + 1))(bound (N + 2))(dependentBound 'I)) ::= 
       (
          (when ('m =T= N + 1) --> *** diverge!
            nf('in : bool <- read (('RcvdInShare ^^ 'party .. 'adv) [(N + 1) 'n 'i]), 
               return 'in, 'in)  
          ) 
          ;; 
          (when (('m <=T N) conj (apply 'isSemiHonest 'm)) --> 
            nf('in : bool <- read ('InShare$ ['m 'n 'i]), return 'in, 'in)
          ) 
          ;; 
          (when (('m <=T N) conj (apply 'isHonest 'm)) --> 
            nf('in : bool <- read (('RcvdInShare ^^ 'party .. 'adv) ['m 'n 'i]), 
               return 'in, 'in)
          )
        )
     )    
     ||
     (family ('InShare[((bound (N + 1))(bound (N + 2))(dependentBound 'I))])
             ('m 'n 'i) 
             ((bound (N + 1))(bound (N + 2))(dependentBound 'I)) ::= 
        nf('in : bool <- read ('InShare$ ['m 'n 'i]), return 'in, 'in)     
     ) 
     ||
     (family (('InShare ^^ 'party .. 'adv)
              [((bound (N + 1))(bound (N + 2))(dependentBound 'I))])
             ('m 'n 'i) 
             ((bound (N + 1))(bound (N + 2))(dependentBound 'I)) ::= 
       (
          (when ('m =T= N + 1) --> *** diverge!
            nf('in : bool <- read (('InShare ^^ 'party .. 'adv) [(N + 1) 'n 'i]), 
               return 'in, 'in)  
          ) 
          ;; 
          (when (('m <=T N) conj (apply 'isSemiHonest 'm)) --> 
            nf('in : bool <- read ('InShare ['m 'n 'i]), return 'in, 'in)
          ) 
          ;; 
          (when (('m <=T N) conj (apply 'isHonest 'm)) --> 
            nf('in : bool <- read (('InShare ^^ 'party .. 'adv) ['m 'n 'i]), 
               return 'in, 'in)
          )       
       )      
     ) 
    ) *** end new 
  .   
  
  op inductiveSim : -> Protocol .
  eq inductiveSim = 
      newfamily ('SendBit[((bound (N + 1))(bound (N + 2))(bound K))]) ('n 'm 'k) 
                 ((bound (N + 1))(bound (N + 2))(bound K)) : bool in
      newfamily ('RcvdBit[((bound (N + 1))(bound (N + 2))(bound K))]) ('n 'm 'k)
                 ((bound (N + 1))(bound (N + 2))(bound K)) : bool in 
      newfamily ('Ctrb[((bound (N + 1))(bound (N + 2))(bound K))]) ('n 'm 'k) 
                 ((bound (N + 1))(bound (N + 2))(bound K)) : bool in
      newfamily ('CtrbSum[((bound (N + 1))(bound (N + 2))(bound K))]) ('n 'm 'k) 
                 ((bound (N + 1))(bound (N + 2))(bound K)) : bool in
      family ('Circ[bound K]) 'k (bound K) ::=
      ( *** start circuit
      ( *** start when input gate
      when (apply 'isInputGate 'k) --> 
( *** start when
  (family ('SendBit[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::= 
     nf('sb : bool <- read ('SendBit ['n 'm 'k]), return 'sb, 'sb)      
  )
  ||
  (family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::= 
     nf('sb : bool <- read (('SendBit  ^^ 'party .. 'adv)['n 'm 'k]), 
        return 'sb, 'sb)      
  )
  ||
  (family ('RcvdBit[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::=
     nf('rb : bool <- read ('RcvdBit ['n 'm 'k]), return 'rb, 'rb)       
  )
  ||
  (family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('rb : bool <- read (('RcvdBit  ^^ 'party .. 'adv)['n 'm 'k]), 
        return 'rb, 'rb)       
  )
  ||
  (family ('Ctrb[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::=
     nf('c : bool <- read ('Ctrb ['n 'm 'k]), return 'c, 'c)     
  )
  ||
  (family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('c : bool <- read (('Ctrb  ^^ 'party .. 'adv)['n 'm 'k]), 
        return 'c, 'c)         
  )
  ||
  (family ('CtrbSum[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::=
     nf('cs : bool <- read ('CtrbSum ['n 'm 'k]), return 'cs, 'cs)     
  )
  ||
  (family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('cs : bool <- read (('CtrbSum  ^^ 'party .. 'adv)['n 'm 'k]), 
        return 'cs, 'cs)              
  )
  ||
  (family ('Share[((bound (N + 2)) (bound K) )]) ('n 'k) 
          ((bound (N + 2)) (bound K) ) ::=
     nf('is : bool <- read ('InShare ['n (fun 'wire0 'k) (fun 'wire1 'k)]), 
        return 'is, 'is)     
  )
  ||
  (family (('Share ^^ 'party .. 'adv)[((bound (N + 2)) (bound K) )]) ('n 'k) 
          ((bound (N + 2)) (bound K) ) ::=
     (when ('n =T= N + 1) --> 
      nf('s : bool <- read (('Share ^^ 'party .. 'adv)[(N + 1) 'k]), 
         return 's, 's)
     )
     ;;     
     (when (('n <=T N) conj (apply 'isSemiHonest 'n)) --> 
       nf('s : bool <- read ('Share ['n 'k]), return 's, 's)
     ) 
     ;;  
     (when (('n <=T N) conj (apply 'isHonest 'n)) -->
      nf('s : bool <- read (('Share ^^ 'party .. 'adv)['n 'k]), return 's, 's)
     ) 
  )
  ||
  (family (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('om : bool <- read (('OTMsg-0  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'om, 'om)        
  )
  ||
  (family (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('om : bool <- read (('OTMsg-1 ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'om, 'om)     
  )
  ||
  (family (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('om : bool <- read (('OTMsg-2 ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'om, 'om)     
  )
  ||
  (family (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('om : bool <- read (('OTMsg-3  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'om, 'om)     
  )
  ||
  (family (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('omr : bool <- read (('OTMsgRcvd-0  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'omr, 'omr)     
  )
  ||
  (family (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('omr : bool <- read (('OTMsgRcvd-1  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'omr, 'omr)          
  )
  ||
  (family (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('omr : bool <- read (('OTMsgRcvd-2  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'omr, 'omr)          
  )
  ||
  (family (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('omr : bool <- read (('OTMsgRcvd-3  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'omr, 'omr)           
  )
  ||
  (family (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('oc : bool <- read (('OTChc-0  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'oc, 'oc)          
  )
  ||
  (family (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('oc : bool <- read (('OTChc-1  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'oc, 'oc)     
  )
  ||
  (family (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
    nf('ocr : bool <- read (('OTChcRcvd-0  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'ocr, 'ocr)      
  )
  ||
  (family (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
    nf('ocr : bool <- read (('OTChcRcvd-1  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'ocr, 'ocr)       
  )
  ||
  (family (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('o : bool <- read (('OTOut  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'o, 'o)      
  )
   ) *** end when
   ) *** end when input gate
   ;;
   ( *** start when not gate
      when (apply 'isNotGate 'k) --> 
( *** start when
  (family ('SendBit[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::= 
     nf('sb : bool <- read ('SendBit ['n 'm 'k]), return 'sb, 'sb)      
  )
  ||
  (family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::= 
     nf('sb : bool <- read (('SendBit  ^^ 'party .. 'adv)['n 'm 'k]), 
        return 'sb, 'sb)      
  )
  ||
  (family ('RcvdBit[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::=
     nf('rb : bool <- read ('RcvdBit ['n 'm 'k]), return 'rb, 'rb)       
  )
  ||
  (family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('rb : bool <- read (('RcvdBit  ^^ 'party .. 'adv)['n 'm 'k]), 
        return 'rb, 'rb)       
  )
  ||
  (family ('Ctrb[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::=
     nf('c : bool <- read ('Ctrb ['n 'm 'k]), return 'c, 'c)     
  )
  ||
  (family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('c : bool <- read (('Ctrb  ^^ 'party .. 'adv)['n 'm 'k]), 
        return 'c, 'c)         
  )
  ||
  (family ('CtrbSum[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::=
     nf('cs : bool <- read ('CtrbSum ['n 'm 'k]), return 'cs, 'cs)     
  )
  ||
  (family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('cs : bool <- read (('CtrbSum  ^^ 'party .. 'adv)['n 'm 'k]), 
        return 'cs, 'cs)              
  )
  ||
  (family ('Share[((bound (N + 2)) (bound K) )]) ('n 'k) 
          ((bound (N + 2)) (bound K) ) ::=
     nf('is : bool <- read ('Share ['n (fun 'wire0 'k)]), 
        return 'is, 'is)     
  )
  ||
  (family (('Share ^^ 'party .. 'adv)[((bound (N + 2)) (bound K) )]) ('n 'k) 
          ((bound (N + 2)) (bound K) ) ::=
     (when ('n =T= N + 1) --> 
      nf('s : bool <- read (('Share ^^ 'party .. 'adv)[(N + 1) 'k]), 
         return 's, 's)
     )
     ;;     
     (when (('n <=T N) conj (apply 'isSemiHonest 'n)) --> 
       nf('s : bool <- read ('Share ['n 'k]), return 's, 's)
     ) 
     ;;  
     (when (('n <=T N) conj (apply 'isHonest 'n)) -->
      nf('s : bool <- read (('Share ^^ 'party .. 'adv)['n 'k]), return 's, 's)
     ) 
  )
  ||
  (family (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('om : bool <- read (('OTMsg-0  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'om, 'om)        
  )
  ||
  (family (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('om : bool <- read (('OTMsg-1 ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'om, 'om)     
  )
  ||
  (family (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('om : bool <- read (('OTMsg-2 ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'om, 'om)     
  )
  ||
  (family (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('om : bool <- read (('OTMsg-3  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'om, 'om)     
  )
  ||
  (family (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('omr : bool <- read (('OTMsgRcvd-0  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'omr, 'omr)     
  )
  ||
  (family (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('omr : bool <- read (('OTMsgRcvd-1  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'omr, 'omr)          
  )
  ||
  (family (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('omr : bool <- read (('OTMsgRcvd-2  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'omr, 'omr)          
  )
  ||
  (family (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('omr : bool <- read (('OTMsgRcvd-3  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'omr, 'omr)           
  )
  ||
  (family (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('oc : bool <- read (('OTChc-0  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'oc, 'oc)          
  )
  ||
  (family (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('oc : bool <- read (('OTChc-1  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'oc, 'oc)     
  )
  ||
  (family (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
    nf('ocr : bool <- read (('OTChcRcvd-0  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'ocr, 'ocr)      
  )
  ||
  (family (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
    nf('ocr : bool <- read (('OTChcRcvd-1  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'ocr, 'ocr)       
  )
  ||
  (family (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('o : bool <- read (('OTOut  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'o, 'o)      
  )
   ) *** end when
   ) *** end when not gate
   ;;
   ( *** start when xor gate
      when (apply 'isXorGate 'k) --> 
( *** start when
  (family ('SendBit[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::= 
     nf('sb : bool <- read ('SendBit ['n 'm 'k]), return 'sb, 'sb)      
  )
  ||
  (family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::= 
     nf('sb : bool <- read (('SendBit  ^^ 'party .. 'adv)['n 'm 'k]), 
        return 'sb, 'sb)      
  )
  ||
  (family ('RcvdBit[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::=
     nf('rb : bool <- read ('RcvdBit ['n 'm 'k]), return 'rb, 'rb)       
  )
  ||
  (family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('rb : bool <- read (('RcvdBit  ^^ 'party .. 'adv)['n 'm 'k]), 
        return 'rb, 'rb)       
  )
  ||
  (family ('Ctrb[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::=
     nf('c : bool <- read ('Ctrb ['n 'm 'k]), return 'c, 'c)     
  )
  ||
  (family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('c : bool <- read (('Ctrb  ^^ 'party .. 'adv)['n 'm 'k]), 
        return 'c, 'c)         
  )
  ||
  (family ('CtrbSum[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::=
     nf('cs : bool <- read ('CtrbSum ['n 'm 'k]), return 'cs, 'cs)     
  )
  ||
  (family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('cs : bool <- read (('CtrbSum  ^^ 'party .. 'adv)['n 'm 'k]), 
        return 'cs, 'cs)              
  )
  ||
  (family ('Share[((bound (N + 2)) (bound K) )]) ('n 'k) 
          ((bound (N + 2)) (bound K) ) ::=
     nf(('x : bool <- read ('Share ['n (fun 'wire0 'k)]))
        ('y : bool <- read ('Share ['n (fun 'wire1 'k)])) , 
        return (ap 'xor pair('x, 'y)), 'x 'y)     
  )
  ||
  (family (('Share ^^ 'party .. 'adv)[((bound (N + 2)) (bound K) )]) ('n 'k) 
          ((bound (N + 2)) (bound K) ) ::=
     (when ('n =T= N + 1) --> 
      nf('s : bool <- read (('SendBit  ^^ 'party .. 'adv)[(N + 1) 'k]), 
         return 's, 's)
     )
     ;;     
     (when (('n <=T N) conj (apply 'isSemiHonest 'n)) --> 
       nf('s : bool <- read ('Share ['n 'k]), return 's, 's)
     ) 
     ;;  
     (when (('n <=T N) conj (apply 'isHonest 'n)) -->
      nf('s : bool <- read (('SendBit  ^^ 'party .. 'adv)['n 'k]), return 's, 's)
     ) 
  )
  ||
  (family (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('om : bool <- read (('OTMsg-0  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'om, 'om)        
  )
  ||
  (family (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('om : bool <- read (('OTMsg-1  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'om, 'om)     
  )
  ||
  (family (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('om : bool <- read (('OTMsg-2  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'om, 'om)     
  )
  ||
  (family (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('om : bool <- read (('OTMsg-3  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'om, 'om)     
  )
  ||
  (family (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('omr : bool <- read (('OTMsgRcvd-0  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'omr, 'omr)     
  )
  ||
  (family (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('omr : bool <- read (('OTMsgRcvd-1  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'omr, 'omr)          
  )
  ||
  (family (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('omr : bool <- read (('OTMsgRcvd-2  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'omr, 'omr)          
  )
  ||
  (family (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('omr : bool <- read (('OTMsgRcvd-3  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'omr, 'omr)           
  )
  ||
  (family (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('oc : bool <- read (('OTChc-0  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'oc, 'oc)          
  )
  ||
  (family (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('oc : bool <- read (('OTChc-1  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'oc, 'oc)     
  )
  ||
  (family (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
    nf('ocr : bool <- read (('OTChcRcvd-0  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'ocr, 'ocr)      
  )
  ||
  (family (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
    nf('ocr : bool <- read (('OTChcRcvd-1  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'ocr, 'ocr)       
  )
  ||
  (family (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
     nf('o : bool <- read (('OTOut  ^^ 'ot .. 'adv)['n 'm 'k]), 
        return 'o, 'o)      
  )
   ) *** end when
   ) *** end when xor gate 
   ;;
   ( *** start when and gate
when (apply 'isAndGate 'k) --> 
( *** start when
  (family ('SendBit[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::=
     (when ('n <T 'm) --> 
       nf( ('xn : bool <- read ('Share['n (fun 'wire0 'k)]))
           ('yn : bool <- read ('Share['n (fun 'wire1 'k)])), 
          samp ('flip < () >),
          'xn 'yn)
     ) 
     ;;
     (when ('m <=T 'n) --> 
       nf('sb : bool <- read ('SendBit['n 'm 'k]), 
        return 'sb, 'sb) 
     )     
  )
  ||
  (family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when ('n =T= N + 1) --> *** diverge!
            nf('sb : bool <- read (('SendBit ^^ 'party .. 'adv) [(N + 1) 'm 'k]), 
               return 'sb, 'sb)  
          ) 
          ;; 
          (when (('n <=T N) conj (apply 'isSemiHonest 'n)) --> 
            nf('sb : bool <- read ('SendBit ['n 'm 'k]), 
               return 'sb, 'sb)
          ) 
          ;; 
          (when (('n <=T N) conj (apply 'isHonest 'n)) -->  *** diverge!
            nf('sb : bool <- read (('SendBit ^^ 'party .. 'adv) ['n 'm 'k]), 
               return 'sb, 'sb)  
          )            
          
  )
  ||
  (family ('RcvdBit[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::=
     (when ('m =T= N + 1) --> 
       nf( ('b : bool <- read ('SendBit['m 'n 'k]))
           ('xm : bool <- read ('Share['m (fun 'wire0 'k)]))
           ('ym : bool <- read ('Share['m (fun 'wire1 'k)]))
           ('xn : bool <- read ('Share['n (fun 'wire0 'k)]))
           ('yn : bool <- read ('Share['n (fun 'wire1 'k)])),
           return (ap 'xor 
                    pair('b,
                         ap 'xor pair(ap 'and pair('xm, 'yn), 
                                      ap 'and pair('xn, 'ym))
                        )
                  ),
           'b 'xm 'ym 'xn 'yn
         )
     ) 
     ;;
     (otherwise --> *** diverge
       nf('rb : bool <- read ('RcvdBit['n 'm 'k]), 
           return 'rb, 'rb) 
     )     
          
  )
  ||
  (family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when ('n =T= N + 1) --> *** diverge!
            nf('rb : bool <- read (('RcvdBit ^^ 'party .. 'adv)[(N + 1) 'm 'k]), 
               return 'rb, 'rb)  
          ) 
          ;; 
          (when (('n <=T N) conj (apply 'isSemiHonest 'n)) --> 
            nf('rb : bool <- read ('RcvdBit ['n 'm 'k]), 
               return 'rb, 'rb)
          ) 
          ;; 
          (when (('n <=T N) conj (apply 'isHonest 'n)) -->  *** diverge!
            nf('rb : bool <- read (('RcvdBit ^^ 'party .. 'adv)['n 'm 'k]), 
               return 'rb, 'rb)  
          )           
  )
  ||
  (family ('Ctrb[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::=
          (when ('n <T 'm) --> 
            nf('sb : bool <- read ('SendBit ['n 'm 'k]), 
               return 'sb, 'sb)
          )
          ;;
          (when ('m <T 'n) --> 
            nf('rb : bool <- read ('RcvdBit ['n 'm 'k]), 
               return 'rb, 'rb)
          )
          ;;
          (when ('m =T= 'n) --> 
            nf(('xn : bool <- read ('Share['n (fun 'wire0 'k)]))
               ('yn : bool <- read ('Share['n (fun 'wire1 'k)])), 
               return (ap 'and pair('xn, 'yn)), 'xn 'yn)
          )
  )
  ||
  (family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when ('n =T= N + 1) --> *** diverge!
            nf('cb : bool <- read (('Ctrb ^^ 'party .. 'adv)[(N + 1) 'm 'k]), 
               return 'cb, 'cb)  
          ) 
          ;; 
          (when (('n <=T N) conj (apply 'isSemiHonest 'n)) --> 
            nf('cb : bool <- read ('Ctrb ['n 'm 'k]), 
               return 'cb, 'cb)
          ) 
          ;; 
          (when (('n <=T N) conj (apply 'isHonest 'n)) -->  *** diverge!
            nf('cb : bool <- read (('Ctrb ^^ 'party .. 'adv)['n 'm 'k]), 
               return 'cb, 'cb)  
          )           
  )
  ||
  (family ('CtrbSum[((bound (N + 1)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 1)) (bound (N + 2))(bound K) ) ::=
          (when ('m =T= 0) --> 
             nf('cb : bool <- read ('Ctrb ['n 0 'k]), 
               return 'cb, 'cb)
          )
          ;;
          (when (neg ('m =T= 0)) --> 
             nf(('bs : bool <- read ('CtrbSum ['n ('m -- 1) 'k]))
                ('b : bool <- read ('Ctrb['n 'm 'k])), 
               return (ap 'xor pair('bs, 'b)), 'bs 'b)
          )
  )
  ||
  (family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when ('n =T= N + 1) --> *** diverge!
            nf('cs : bool <- read (('CtrbSum ^^ 'party .. 'adv)[(N + 1) 'm 'k]), 
               return 'cs, 'cs)  
          ) 
          ;; 
          (when (('n <=T N) conj (apply 'isSemiHonest 'n)) --> 
            nf('cs : bool <- read ('CtrbSum ['n 'm 'k]), 
               return 'cs, 'cs)
          ) 
          ;; 
          (when (('n <=T N) conj (apply 'isHonest 'n)) -->  *** diverge!
            nf('cs : bool <- read (('CtrbSum ^^ 'party .. 'adv)['n 'm 'k]), 
               return 'cs, 'cs)  
          )           
  )
  ||
  (family ('Share[((bound (N + 2)) (bound K) )]) ('n 'k) 
          ((bound (N + 2)) (bound K) ) ::=
      nf('cs : bool <- read ('CtrbSum ['n (N + 1) 'k]), 
         return 'cs, 'cs)     
  )
  ||
  (family (('Share ^^ 'party .. 'adv)[((bound (N + 2)) (bound K) )]) ('n 'k) 
          ((bound (N + 2)) (bound K) ) ::=
           (when ('n =T= N + 1) --> *** diverge!
            nf('cs : bool <- read (('Share ^^ 'party .. 'adv)[(N + 1) 'm 'k]), 
               return 'cs, 'cs)  
          ) 
          ;; 
          (when (('n <=T N) conj (apply 'isSemiHonest 'n)) --> 
            nf('cs : bool <- read ('Share ['n 'k]), 
               return 'cs, 'cs)
          ) 
          ;; 
          (when (('n <=T N) conj (apply 'isHonest 'n)) -->  *** diverge!
            nf('cs : bool <- read (('Share ^^ 'party .. 'adv)['n 'm 'k]), 
               return 'cs, 'cs)  
          ) 
  )
  ||
  (family (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when ('n =T= N + 1) --> *** diverge!
            nf('om : bool <- read (('OTMsg-0 ^^ 'ot .. 'adv)[(N + 1) 'm 'k]), 
               return 'om, 'om)  
          )
          ;; 
          (when (('n <=T N) conj ((apply 'isSemiHonest 'n) conj ('n <T 'm)) ) -->
            nf(('b : bool <- read ('SendBit['n 'm 'k]))
               ('xn : bool <- read ('Share['n (fun 'wire0 'k)]))
               ('yn : bool <- read ('Share['n (fun 'wire1 'k)])), 
               return 'b, 'b 'xn 'yn)  
          )     
          ;; 
          (when (('n <=T N) conj ((apply 'isHonest 'n) disj ('m <=T 'n))) --> *** diverge!
            nf('om : bool <- read (('OTMsg-0 ^^ 'ot .. 'adv)['n 'm 'k]), 
               return 'om, 'om)  
          ) 
  )
  ||
  (family (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when ('n =T= N + 1) --> *** diverge!
            nf('om : bool <- read (('OTMsg-1 ^^ 'ot .. 'adv)[(N + 1) 'm 'k]), 
               return 'om, 'om)  
          )
          ;; 
          (when (('n <=T N) conj ((apply 'isSemiHonest 'n) conj ('n <T 'm)) ) -->
            nf(('b : bool <- read ('SendBit['n 'm 'k]))
               ('xn : bool <- read ('Share['n (fun 'wire0 'k)]))
               ('yn : bool <- read ('Share['n (fun 'wire1 'k)])), 
               return (ap 'xor pair('b, 'xn)), 'b 'xn 'yn)  
          )     
          ;; 
          (when (('n <=T N) conj ((apply 'isHonest 'n) disj ('m <=T 'n))) --> *** diverge!
            nf('om : bool <- read (('OTMsg-1 ^^ 'ot .. 'adv)['n 'm 'k]), 
               return 'om, 'om)  
          )     
  )
  ||
  (family (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when ('n =T= N + 1) --> *** diverge!
            nf('om : bool <- read (('OTMsg-2 ^^ 'ot .. 'adv)[(N + 1) 'm 'k]), 
               return 'om, 'om)  
          )
          ;; 
          (when (('n <=T N) conj ((apply 'isSemiHonest 'n) conj ('n <T 'm)) ) -->
            nf(('b : bool <- read ('SendBit['n 'm 'k]))
               ('xn : bool <- read ('Share['n (fun 'wire0 'k)]))
               ('yn : bool <- read ('Share['n (fun 'wire1 'k)])), 
               return (ap 'xor pair('b, 'yn)), 'b 'xn 'yn)  
          )     
          ;; 
          (when (('n <=T N) conj ((apply 'isHonest 'n) disj ('m <=T 'n))) --> *** diverge!
            nf('om : bool <- read (('OTMsg-2 ^^ 'ot .. 'adv)['n 'm 'k]), 
               return 'om, 'om)  
          )    
  )
  ||
  (family (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when ('n =T= N + 1) --> *** diverge!
            nf('om : bool <- read (('OTMsg-3 ^^ 'ot .. 'adv)[(N + 1) 'm 'k]), 
               return 'om, 'om)  
          )
          ;; 
          (when (('n <=T N) conj ((apply 'isSemiHonest 'n) conj ('n <T 'm)) ) -->
            nf(('b : bool <- read ('SendBit['n 'm 'k]))
               ('xn : bool <- read ('Share['n (fun 'wire0 'k)]))
               ('yn : bool <- read ('Share['n (fun 'wire1 'k)])), 
               return (ap 'xor pair('b, ap 'xor pair('xn, 'yn))), 
               'b 'xn 'yn)  
          )     
          ;; 
          (when (('n <=T N) conj ((apply 'isHonest 'n) disj ('m <=T 'n))) --> *** diverge!
            nf('om : bool <- read (('OTMsg-3 ^^ 'ot .. 'adv)['n 'm 'k]), 
               return 'om, 'om)  
          )    
  )
  ||
  (family (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
           (when ('n =T= N + 1) --> *** diverge!
            nf('om : bool <- read (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[(N + 1) 'm 'k]), 
               return 'om, 'om)  
          )
          ;; 
          (when (('n <=T N) conj ((apply 'isHonest 'n) conj ('n <T 'm)) ) -->
            nf(('b : bool <- read ('SendBit['n 'm 'k]))
               ('xn : bool <- read ('Share['n (fun 'wire0 'k)]))
               ('yn : bool <- read ('Share['n (fun 'wire1 'k)])), 
               return (), 
               'b 'xn 'yn)  
          )     
          ;; 
          (when (('n <=T N) conj ((apply 'isSemiHonest 'n) disj ('m <=T 'n))) --> *** diverge!
            nf('om : bool <- read (('OTMsgRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), 
               return 'om, 'om)  
          )
  )
  ||
  (family (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when ('n =T= N + 1) --> *** diverge!
            nf('om : bool <- read (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[(N + 1) 'm 'k]), 
               return 'om, 'om)  
          )
          ;; 
          (when (('n <=T N) conj ((apply 'isHonest 'n) conj ('n <T 'm)) ) -->
            nf(('b : bool <- read ('SendBit['n 'm 'k]))
               ('xn : bool <- read ('Share['n (fun 'wire0 'k)]))
               ('yn : bool <- read ('Share['n (fun 'wire1 'k)])), 
               return (), 
               'b 'xn 'yn)  
          )     
          ;; 
          (when (('n <=T N) conj ((apply 'isSemiHonest 'n) disj ('m <=T 'n))) --> *** diverge!
            nf('om : bool <- read (('OTMsgRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), 
               return 'om, 'om)  
          )
  )
  ||
  (family (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when ('n =T= N + 1) --> *** diverge!
            nf('om : bool <- read (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[(N + 1) 'm 'k]), 
               return 'om, 'om)  
          )
          ;; 
          (when (('n <=T N) conj ((apply 'isHonest 'n) conj ('n <T 'm)) ) -->
            nf(('b : bool <- read ('SendBit['n 'm 'k]))
               ('xn : bool <- read ('Share['n (fun 'wire0 'k)]))
               ('yn : bool <- read ('Share['n (fun 'wire1 'k)])), 
               return (), 
               'b 'xn 'yn)  
          )     
          ;; 
          (when (('n <=T N) conj ((apply 'isSemiHonest 'n) disj ('m <=T 'n))) --> *** diverge!
            nf('om : bool <- read (('OTMsgRcvd-2 ^^ 'ot .. 'adv)['n 'm 'k]), 
               return 'om, 'om)  
          )
  )
  ||
  (family (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when ('n =T= N + 1) --> *** diverge!
            nf('om : bool <- read (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[(N + 1) 'm 'k]), 
               return 'om, 'om)  
          )
          ;; 
          (when (('n <=T N) conj ((apply 'isHonest 'n) conj ('n <T 'm)) ) -->
            nf(('b : bool <- read ('SendBit['n 'm 'k]))
               ('xn : bool <- read ('Share['n (fun 'wire0 'k)]))
               ('yn : bool <- read ('Share['n (fun 'wire1 'k)])), 
               return (), 
               'b 'xn 'yn)  
          )     
          ;; 
          (when (('n <=T N) conj ((apply 'isSemiHonest 'n) disj ('m <=T 'n))) --> *** diverge!
            nf('om : bool <- read (('OTMsgRcvd-3 ^^ 'ot .. 'adv)['n 'm 'k]), 
               return 'om, 'om)  
          )
  )
  ||
  (family (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when ('m =T= N + 1) --> *** diverge!
            nf('om : bool <- read (('OTChc-0 ^^ 'ot .. 'adv)['n (N + 1) 'k]), 
               return 'om, 'om)  
          )
          ;; 
          (when (('m <=T N) conj ((apply 'isHonest 'm) conj ('n <T 'm)) ) -->
            nf(('xn : bool <- read ('Share['m (fun 'wire0 'k)])), 
               return 'xn, 
               'xn)  
          )     
          ;; 
          (when (('m <=T N) conj ((apply 'isSemiHonest 'm) disj ('m <=T 'n))) --> *** diverge!
            nf('om : bool <- read (('OTChc-0 ^^ 'ot .. 'adv)['n 'm 'k]), 
               return 'om, 'om)  
          )
  )
  ||
  (family (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when ('m =T= N + 1) --> *** diverge!
            nf('om : bool <- read (('OTChc-1 ^^ 'ot .. 'adv)['n (N + 1) 'k]), 
               return 'om, 'om)  
          )
          ;; 
          (when (('m <=T N) conj ((apply 'isHonest 'm) conj ('n <T 'm)) ) -->
            nf(('yn : bool <- read ('Share['m (fun 'wire1 'k)])), 
               return 'yn, 
               'yn)  
          )     
          ;; 
          (when (('m <=T N) conj ((apply 'isSemiHonest 'm) disj ('m <=T 'n))) --> *** diverge!
            nf('om : bool <- read (('OTChc-1 ^^ 'ot .. 'adv)['n 'm 'k]), 
               return 'om, 'om)  
          )
  )
  ||
  (family (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when (('m =T= N + 1) conj ('n =T= N + 1)) --> *** diverge
             nf('om : bool <- read (('OTChcRcvd-0 ^^ 'ot .. 'adv)[(N + 1) (N + 1) 'k]), 
               return 'om, 'om)            
          )
          ;;
          (when ('m =T= N + 1) --> 
            nf('xs : bool <- read ('ShareSum[N (fun 'wire0 'k)]) , 
               return (), 'xs)
          )
          ;;
          (when ((apply 'isHonest 'm) conj ('n <T 'm)) --> 
            nf('xs : bool <- read ('ShareSum['m (fun 'wire0 'k)]) , 
               return (), 'xs)
          )
          ;;
          (when ((apply 'isSemiHonest 'm) disj ('m <=T 'n)) --> *** diverge
            nf('om : bool <- read (('OTChcRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), 
               return 'om, 'om)    
          )
  )
  ||
  (family (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
            (when (('m =T= N + 1) conj ('n =T= N + 1)) --> *** diverge
             nf('om : bool <- read (('OTChcRcvd-1 ^^ 'ot .. 'adv)[(N + 1) (N + 1) 'k]), 
               return 'om, 'om)            
          )
          ;;
          (when ('m =T= N + 1) --> 
            nf('xs : bool <- read ('ShareSum[N (fun 'wire1 'k)]) , 
               return (), 'xs)
          )
          ;;
          (when ((apply 'isHonest 'm) conj ('n <T 'm)) --> 
            nf('xs : bool <- read ('ShareSum['m (fun 'wire1 'k)]) , 
               return (), 'xs)
          )
          ;;
          (when ((apply 'isSemiHonest 'm) disj ('m <=T 'n)) --> *** diverge
            nf('om : bool <- read (('OTChcRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), 
               return 'om, 'om)    
          )
  )
  ||
  (family (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) ('n 'm 'k) 
          ((bound (N + 2)) (bound (N + 2))(bound K) ) ::=
          (when ('m =T= N + 1) --> *** diverge!
            nf('cs : bool <- read (('OTOut ^^ 'party .. 'adv)[(N + 1) 'm 'k]), 
               return 'cs, 'cs)  
          ) 
          ;; 
          (when (('m <=T N) conj (apply 'isSemiHonest 'm)) --> 
            nf('cs : bool <- read ('RcvdBit ['m 'n 'k]), 
               return 'cs, 'cs)
          ) 
          ;; 
          (when (('m <=T N) conj (apply 'isHonest 'm)) -->  *** diverge!
            nf('cs : bool <- read (('OTOut ^^ 'party .. 'adv)['n 'm 'k]), 
               return 'cs, 'cs)  
          )     
  )
) *** end when
) *** end when and gate
      ) *** end circuit
  . 
  
   op finalSim : -> Protocol .
  eq finalSim = 
    ( *** start 'Fin
      (family (('SendOutShare ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))]) 
          ('m 'n 'k) 
          ((bound (N + 2))(bound (N + 2))(bound K)) ::=
       (
       ( when ('n =T= N + 1) --> 
          nf('sos : bool <- read (('SendOutShare ^^ 'party .. 'adv)['m (N + 1) 'k]),
             return 'sos, 'sos)
       ) ;;
       ( when ((apply 'isSemiHonest 'n) conj (apply 'isOutputWire 'k)) --> 
          nf('sos : bool <- read ('Share['n 'k]),
             return 'sos, 'sos)
       ) ;;
       (when ((apply 'isHonest 'n) disj (neg (apply 'isOutputWire 'k))) --> 
          nf('sos : bool <- read (('SendOutShare ^^ 'party .. 'adv)['m 'n 'k]),
             return 'sos, 'sos)
       ) 
       ) 
       )
       ||
       (family (('RcvdOutShare ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))]) 
           ('n 'm 'k)
           ((bound (N + 2))(bound (N + 2))(bound K)) ::=
         (
          (when (('m =T= N + 1) conj 
                 ((apply 'isSemiHonest 'n) conj (apply 'isOutputWire 'k))
                ) --> 
           nf(('xs : bool <- read ('ShareSum[N 'k]))
              ('x : bool <- read (('Out ^^ 'id .. 'adv)['n 'k])), 
               return (ap 'xor pair('xs, 'x)), 
               'xs 'x)      
          ) 
          ;;
          (when (('m =T= N + 1) conj 
                 ((apply 'isHonest 'n) disj (neg (apply 'isOutputWire 'k)))
                ) --> 
           nf('r : bool <- read (('RcvdOutShare ^^ 'party .. 'adv)['n (N + 1) 'k]),
              return 'r,
              'r)     
          ) 
          ;;
          (when (('m <=T N) conj 
                 ((apply 'isSemiHonest 'n) conj (apply 'isOutputWire 'k))
                ) --> 
            nf('r : bool <- read ('Share ['m 'k]),
              return 'r,
              'r)      
          ) 
          ;;
          (when (('m <=T N) conj 
                 ((apply 'isHonest 'n) disj (neg (apply 'isOutputWire 'k)))
                ) --> 
             nf('r : bool <- read (('RcvdOutShare ^^ 'party .. 'adv)['n 'm 'k]),
              return 'r,
              'r)          
          )  
         )       
       ) 
       ||
       (family (('OutShare ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))]) 
         ('n 'm 'k)
         ((bound (N + 2))(bound (N + 2))(bound K)) ::=
         (
          (when (('m =T= N + 1) conj 
                 ((apply 'isSemiHonest 'n) conj (apply 'isOutputWire 'k))
                ) --> 
            nf(('xs : bool <- read ('ShareSum[N 'k]))
              ('x : bool <- read (('Out ^^ 'id .. 'adv)['n 'k])), 
               return (ap 'xor pair('xs, 'x)), 
               'xs 'x)    
          )
          ;;
          (when (('m =T= N + 1) conj 
                 ((apply 'isHonest 'n) disj (neg (apply 'isOutputWire 'k)))
                ) --> 
           nf('r : bool <- read (('OutShare ^^ 'party .. 'adv)['n (N + 1) 'k]),
              return 'r,
              'r) )
          ;;
          (when (('m <=T N) conj 
                 ((apply 'isSemiHonest 'n) conj (apply 'isOutputWire 'k))
                ) --> 
            nf('r : bool <- read ('Share ['m 'k]),
              return 'r,
              'r) 
          )
          ;;
          (when (('m <=T N) conj 
                 ((apply 'isHonest 'n) disj (neg (apply 'isOutputWire 'k)))
                ) --> 
             nf('r : bool <- read (('OutShare ^^ 'party .. 'adv)['n 'm 'k]),
              return 'r,
              'r)  
          )
         )
       )
       ||
       (family (('OutShareSum ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))]) 
         ('n 'm 'k)
         ((bound (N + 2))(bound (N + 2))(bound K)) ::=
         (
          (when (('m =T= N + 1) conj 
                 ((apply 'isSemiHonest 'n) conj (apply 'isOutputWire 'k))
                ) --> 
            nf('r : bool <- read (('Out ^^ 'id .. 'adv)['n 'k]),
              return 'r,
              'r)  
          )
          ;;
          (when (('m =T= N + 1) conj 
                 ((apply 'isHonest 'n) disj (neg (apply 'isOutputWire 'k)))
                ) --> 
           nf('r : bool <- read (('OutShareSum ^^ 'party .. 'adv)['n 'k]),
              return 'r,
              'r) 
          )     
          ;;
          (when (('m <=T N) conj 
                 ((apply 'isSemiHonest 'n) conj (apply 'isOutputWire 'k))
                ) --> 
            nf('r : bool <- read ('ShareSum ['m 'k]),
              return 'r,
              'r) 
          )
          ;;
          (when (('m <=T N) conj 
                 ((apply 'isHonest 'n) disj (neg (apply 'isOutputWire 'k)))
                ) --> 
             nf('r : bool <- read (('OutShareSum ^^ 'party .. 'adv)['n 'm 'k]),
              return 'r,
              'r)  
          )
         )
       )
       ||
       (family (('Out ^^ 'party .. 'adv)[((bound (N + 2))(bound K))]) ('n 'k)
          ((bound (N + 2))(bound K)) ::=
          (
          (when (apply 'isSemiHonest 'n) --> 
            nf('o : bool <- read (('Out ^^ 'id .. 'adv)['n 'k]),
              return 'o,
              'o) 
          )
          ;;
          (when (apply 'isHonest 'n) --> 
            nf('o : bool <- read (('Out ^^ 'party .. 'adv)['n 'k]),
              return 'o,
              'o) 
          )
          )
       )
    ) *** end 'Fin    
  .
  
  op shareSim : -> Protocol .
  eq shareSim = 
     family ('Share-Sum[((bound (N + 1))(bound K))]) 
            ('m 'k) ((bound (N + 1))(bound K)) ::=
     (
      (when ('m =T= 0) --> 
        nf('s : bool <- read ('Share[0 'k]), return 's, 's)
      )
      ;;
      (otherwise --> 
        nf( ('xs : bool <- read ('Share-Sum[('m -- 1) 'k])) 
            ('xm : bool <- read ('Share['m 'k])),
            return (ap 'xor pair('xs, 'xm)),
            'xs 'xm 
          )
      )
     )
  .
  
    *** real protocol
  
  op real : -> Protocol .
  eq real = 
   newfamily ('SendInShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))])
             ('m 'n 'i) 
             ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in
   newfamily ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in  
   newfamily ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   newfamily ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   newfamily ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))])
             ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   newfamily ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
             ('m 'n 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in  
   newfamily ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))])
             ('m 'n 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in                             
   newfamily ('OTOut[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in          
   newfamily ('SendOutShare[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
             ('m 'n 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in          
   parties || 1OutOf4
  .
  
  op parties : -> Protocol .
  eq parties = 
   newfamily ('InShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) 
             ('n 'm 'i) 
             ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in   
   newfamily ('Share[((bound (N + 2)) (bound K) )]) ('n 'k) 
             ((bound (N + 2)) (bound K) ) : bool in
   partyInitial || partyInductive || partyFinal           
  . 
  
  op partyInitial : -> Protocol .
  eq partyInitial = 
  newfamily ('InShare$[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) 
            ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in
  newfamily ('InShare$-Sum[((bound (N + 1)) (bound (N + 2)) (dependentBound 'I))]) 
            ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) : bool in
  ( *** start new
    (family (('In ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) ('n 'i)
             ( (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('in : bool <- read ('In['n 'i]), return 'in, 'in)
       ) 
       ;; 
       (when (apply 'isHonest 'n) --> 
         nf('in : bool <- read (('In ^^ 'party .. 'adv)['n 'i]), return 'in, 'in)
       )       
     )
     ||
     (family ('InRcvd ^^ 'party .. 'adv[((bound (N + 2)) (dependentBound 'I))]) ('n 'i)
             ((bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isHonest 'n) --> 
         nf('x : bool <- read ('In['n 'i]), return (), 'x)
       ) 
       ;; 
       (when (apply 'isSemiHonest 'n)  --> 
         nf('in : unit <- read (('InRcvd ^^ 'party .. 'adv)['n 'i]), return 'in, 'in)
       )       
     )
     ||
     (family ('InShare$[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) 
            ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when ('m =T= N + 1) --> 
          nf(('x : bool <- read ('In['n 'i]))
             ('s : bool <- read ('InShare$-Sum[N 'n 'i])), 
             return (ap 'xor pair('x, 's)), 'x 's)
       )
       ;;
       (otherwise --> 
         nf('x : bool <- read ('In['n 'i]), samp ('flip < () >), 'x)
       )      
     )
     ||
      (family (('InShare$ ^^ 'party .. 'adv)
               [((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) 
            ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
          nf('in : bool <- read ('InShare$['m 'n 'i]), return 'in, 'in)
       )
       ;;
       (when (apply 'isHonest 'n)  --> 
         nf('in : bool <- read (('InShare$ ^^ 'party .. 'adv)['m 'n 'i]), 
            return 'in, 'in)
       )      
     )
     ||
     (family ('InShare$-Sum[((bound (N + 1)) (bound (N + 2)) (dependentBound 'I))]) 
            ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) ::=
        (when ('m =T= 0) --> 
          nf('in : bool <- read ('InShare$[0 'n 'i]), 
             return 'in, 'in)
        )
        ;;
        (otherwise --> 
          nf(('x : bool <- read ('InShare$['m 'n 'i]))
             ('s : bool <- read ('InShare$-Sum[('m -- 1) 'n 'i])), 
             return (ap 'xor pair('s, 'x)), 's 'x)
        )    
     )
     ||
     (family (('InShare$-Sum ^^ 'party .. 'adv)
              [((bound (N + 1)) (bound (N + 2)) (dependentBound 'I))]) 
            ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('InShare$-Sum['m 'n 'i]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('InShare$-Sum ^^ 'party .. 'adv)['m 'n 'i]), 
            return 's, 's)
       )       
     )
     ||
     (family ('SendInShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) 
            ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
        nf('in : bool <- read ('InShare$['m 'n 'i]), return 'in, 'in)    
     )  
     ||
     (family (('SendInShare ^^ 'party .. 'adv)
              [((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))])  
            ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendInShare['m 'n 'i]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('SendInShare ^^ 'party .. 'adv)['m 'n 'i]), 
            return 's, 's)
       )        
     )   
     ||
     (family (('RcvdInShare ^^ 'party .. 'adv)
              [((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) 
            ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendInShare['n 'm 'i]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('RcvdInShare ^^ 'party .. 'adv)['n 'm 'i]), 
            return 's, 's)
       )        
     ) 
     ||
     (family ('InShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) 
            ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
        nf('s : bool <- read ('SendInShare['n 'm 'i]), return 's, 's)    
     )        
     ||
     (family (('InShare ^^ 'party .. 'adv)
              [((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) 
            ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('InShare['n 'm 'i]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('InShare ^^ 'party .. 'adv)['n 'm 'i]), 
            return 's, 's)
       )        
     )  
  ) *** end new
  .
  
  op partyInductive : -> Protocol .
  eq partyInductive =
   newfamily ('SendBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily ('RcvdBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily ('Ctrb[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily ('CtrbSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in   
  family ('Circuit[((bound (N + 2)) (bound K))])  
         ('n 'k) ((bound (N + 2)) (bound K)) ::= 
   (when (apply 'isInputGate 'k) -->          
      ( *** start new
       ( family ('SendBit[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
                ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb)
 )
 ||
 (family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read (('SendBit ^^ 'party .. 'adv)['n 'm 'k]), 
       return 'sb, 'sb) 
 )               
 ||
 ( family ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
          ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('rb : bool <- read ('RcvdBit['n 'm 'k]), return 'rb, 'rb)
 )
 ||
 (family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
         ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('rb : bool <- read (('RcvdBit ^^ 'party .. 'adv)['n 'm 'k]), 
      return 'rb, 'rb)          
 ) 
 ||
 ( family ('Ctrb[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
          ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('b : bool <- read ('Ctrb['n 'm 'k]), return 'b, 'b)           
 )
 ||
 (family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
          ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read (('Ctrb ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)           
 )  
 ||
 (family ('CtrbSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
         ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('b : bool <- read ('CtrbSum['n 'm 'k]), return 'b, 'b)  
 )
 ||
 (family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
           ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read (('CtrbSum ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)           
 )  
 ||
     ( family ('Share[ (bound (N + 2)) (bound K)]) 
        ('n 'k) ((bound (N + 2)) (bound K)) ::= 
       nf('in : bool <- read ('InShare['n (fun 'wire0 'k) (fun 'wire1 'k)]),
          return 'in, 'in)
     )
     ||
     (family (('Share ^^ 'party .. 'adv)[ (bound (N + 2)) (bound K)]) ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('Share ^^ 'party .. 'adv)['n 'k]), 
            return 's, 's)
       )        
     )
     ||
     ( family ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
              ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     ( family ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     ( family ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     ( family ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     ( family ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChc-0['m 'n 'k]),
          return 'oc, 'oc)
     )
     ||
     ( family ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChc-1['m 'n 'k]),
          return 'oc, 'oc)
     )
     ) *** end new
   )
   ;;
   (when (apply 'isNotGate 'k) -->    
      ( *** start new
       ( family ('SendBit[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb)
 )
 ||
 (family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read (('SendBit ^^ 'party .. 'adv)['n 'm 'k]), 
       return 'sb, 'sb) 
 )               
 ||
 ( family ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('rb : bool <- read ('RcvdBit['n 'm 'k]), return 'rb, 'rb)
 )
 ||
 (family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('rb : bool <- read (('RcvdBit ^^ 'party .. 'adv)['n 'm 'k]), 
      return 'rb, 'rb)          
 ) 
 ||
 ( family ('Ctrb[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('b : bool <- read ('Ctrb['n 'm 'k]), return 'b, 'b)           
 )
 ||
 (family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read (('Ctrb ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)           
 )  
 ||
 (family ('CtrbSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('b : bool <- read ('CtrbSum['n 'm 'k]), return 'b, 'b)  
 )
 ||
 (family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read (('CtrbSum ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)           
 )  
 ||
     ( family ('Share[ (bound (N + 2)) (bound K)]) ('n 'k) ((bound (N + 2)) (bound K)) ::= 
        (when ('n =T= N + 1) --> 
          nf( ('x : bool <- read ('Share['n (fun 'wire0 'k)])),
              return (ap 'neg 'x), 'x
          )
        )
        ;;
        (when (neg('n =T= N + 1))--> 
          nf('s : bool <- read ('Share['n (fun 'wire0 'k)]),
          return 's, 's)
        )
          
     )
     ||
     (family (('Share ^^ 'party .. 'adv)[ (bound (N + 2)) (bound K)]) ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('Share ^^ 'party .. 'adv)['n 'k]), 
            return 's, 's)
       )        
     )
     ||
     ( family ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     ( family ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     ( family ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     ( family ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     ( family ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChc-0['m 'n 'k]),
          return 'oc, 'oc)
     )
     ||
     ( family ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChc-1['m 'n 'k]),
          return 'oc, 'oc)
     )
     ) *** end new
   )
   ;;
   (when (apply 'isXorGate 'k) --> 
      ( *** start new
       ( family ('SendBit[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb)
 )
 ||
 (family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read (('SendBit ^^ 'party .. 'adv)['n 'm 'k]), 
       return 'sb, 'sb) 
 )               
 ||
 ( family ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('rb : bool <- read ('RcvdBit['n 'm 'k]), return 'rb, 'rb)
 )
 ||
 (family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('rb : bool <- read (('RcvdBit ^^ 'party .. 'adv)['n 'm 'k]), 
      return 'rb, 'rb)          
 ) 
 ||
 ( family ('Ctrb[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('b : bool <- read ('Ctrb['n 'm 'k]), return 'b, 'b)           
 )
 ||
 (family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read (('Ctrb ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)           
 )  
 ||
 (family ('CtrbSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('b : bool <- read ('CtrbSum['n 'm 'k]), return 'b, 'b)  
 )
 ||
 (family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read (('CtrbSum ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)           
 )          
 ||
     ( family ('Share[ (bound (N + 2)) (bound K)]) ('n 'k) ((bound (N + 2)) (bound K)) ::= 
       nf(('x : bool <- read ('Share['n (fun 'wire0 'k)]))
          ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair('x, 'y)), 'x 'y)
     )
     ||
     (family (('Share ^^ 'party .. 'adv)[ (bound (N + 2)) (bound K)]) ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('Share ^^ 'party .. 'adv)['n 'k]), 
            return 's, 's)
       )        
     )
     ||
     ( family ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     ( family ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     ( family ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     ( family ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     ( family ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChc-0['m 'n 'k]),
          return 'oc, 'oc)
     )
     ||
     ( family ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChc-1['m 'n 'k]),
          return 'oc, 'oc)
     )   
   ) *** end new
   )
      ;;
   (when (apply 'isAndGate 'k) -->
     ( *** start new
     ( family ('SendBit[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( 
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          samp ('flip < () >), 
             'x 'y
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('sb : bool <- read ('SendBit['n 'm 'k]),
          return 'sb, 'sb)
       )   
     )
     ||
      (family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendBit['n 'm 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('SendBit ^^ 'party .. 'adv)['n 'm 'k]), 
            return 's, 's)
       )        
     )
     ||
     ( family ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return 'b, 'b 'x 'y
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om)
       )   
     )
     ||
     ( family ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair('x, 'b)), 'b 'x 'y
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om)
       )   
     )
     ||
     ( family ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair('y, 'b)), 'b 'x 'y
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om)
       )   
     )
     ||
     ( family ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair(ap 'xor pair('x, 'y), 'b)), 
          'b 'x 'y
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om)
       )   
     )
     ||
     ( family ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
      (when ('n <T 'm) --> 
         nf( ('x : bool <- read ('Share['n (fun 'wire0 'k)])),
          return 'x, 'x
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('oc : bool <- read ('OTChc-0['m 'n 'k]),
          return 'oc, 'oc)
       )   
     )
     ||
     ( family ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('x : bool <- read ('Share['n (fun 'wire1 'k)])),
          return 'x, 'x
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('oc : bool <- read ('OTChc-1['m 'n 'k]),
          return 'oc, 'oc)
       )   
     )
     ||
     ( family ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
          nf( ('out : bool <- read ('OTOut['m 'n 'k])),
              return 'out, 'out
          )     
    )
    ||
     (family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('RcvdBit['n 'm 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('RcvdBit ^^ 'party .. 'adv)['n 'm 'k]), 
            return 's, 's)
       )        
     )
      ||
      ( family ('Ctrb[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
      (when ('n <T 'm) --> 
         nf( ('r : bool <- read ('RcvdBit['m 'n 'k])),
          return 'r, 'r
          )
       )
       ;;
       (when ('n =T= 'm) --> 
         nf( ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'and pair('x, 'y)), 
          'x 'y
          )
       )
       ;;
       (when ('m <T 'n) --> 
         nf( ('s : bool <- read ('SendBit['n 'm 'k])),
          return 's, 's
          )
       )   
     )
     ||
 (family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Ctrb['n 'm 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('Ctrb ^^ 'party .. 'adv)['n 'm 'k]), 
            return 's, 's)
       )               
 )  
      ||
      (family ('CtrbSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   (when ('m =T= 0) --> 
     nf( ('b : bool <- read ('Ctrb['n 0 'k])),
          return 'b, 'b
          ) 
   )
   ;;
   (when (neg ('m =T= 0)) --> 
     nf( ('s : bool <- read ('CtrbSum['n ('m -- 1) 'k]))
         ('b : bool <- read ('Ctrb['n 'm 'k])),
          return (ap 'xor pair('s, 'b)), 's 'b
          ) 
   )
 )
 ||
 (family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('CtrbSum['n 'm 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('CtrbSum ^^ 'party .. 'adv)['n 'm 'k]), 
            return 's, 's)
       )        
     )
      ||   
 ( family ('Share[ (bound (N + 2)) (bound K)]) ('n 'k) ((bound (N + 2)) (bound K)) ::= 
          nf( ('bs : bool <- read ('CtrbSum['n (N + 1) 'k])),
              return 'bs, 'bs
          )     
 )   
 ||
     (family (('Share ^^ 'party .. 'adv)[ (bound (N + 2)) (bound K)]) ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('Share ^^ 'party .. 'adv)['n 'k]), 
            return 's, 's)
       )        
     ) 
     ) *** end new
   )
  . 
  
  op partyFinal : -> Protocol .
  eq partyFinal = 
   newfamily ('OutShare[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k)
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily ('OutShareSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k)
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   ( *** start new
     (family ('SendOutShare[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k)
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isOutputWire 'k) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's)
       ) 
       ;; 
       (when (neg (apply 'isOutputWire 'k)) --> 
         nf('s : bool <- read ('SendOutShare['m 'n 'k]), return 's, 's)
       )       
     )
     ||
     (family (('SendOutShare ^^ 'party .. 'adv)
               [((bound (N + 2)) (bound (N + 2)) (bound K))]) 
             ('m 'n 'k)
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendOutShare['m 'n 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('SendOutShare ^^ 'party .. 'adv)['m 'n 'k]), 
            return 's, 's)
       )       
     )
     ||
     (family (('RcvdOutShare ^^ 'party .. 'adv)
               [((bound (N + 2)) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendOutShare['n 'm 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('RcvdOutShare ^^ 'party .. 'adv)['n 'm 'k]), 
            return 's, 's)
       )       
     )
     || 
     (family ('OutShare[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
      nf('s : bool <- read ('SendOutShare['n 'm 'k]), return 's, 's)       
     )
     ||
     (family (('OutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('OutShare['n 'm 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('OutShare ^^ 'party .. 'adv)['n 'm 'k]), 
            return 's, 's)
       )       
     )
     ||
     (family ('OutShareSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when ('m =T= 0) --> 
         nf('s : bool <- read ('OutShare['n 0 'k]), 
            return 's, 's)
       )
       ;;
       (otherwise -->
         nf( ('s : bool <- read ('OutShareSum['n ('m -- 1) 'k]))
             ('x : bool <- read ('OutShare['n 'm 'k])),
             return (ap 'xor pair('s, 'x)),
             's 'x
         )
       )
     )        
     ||
     (family (('OutShareSum ^^ 'party .. 'adv)
              [((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('OutShareSum['n 'm 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('OutShareSum ^^ 'party .. 'adv)['n 'm 'k]), 
            return 's, 's)
       )       
     )
     ||
     (family ('Out[((bound (N + 2)) (bound K))]) ('n 'k)
             ((bound (N + 2)) (bound K)) ::=
      nf('s : bool <- read ('OutShareSum['n (N + 1) 'k]),
         return 's, 's)       
     )
     ||
     (family (('Out ^^ 'party .. 'adv)[((bound (N + 2)) (bound K))]) ('n 'k)
             (bound (N + 2) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Out['n 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('Out ^^ 'party .. 'adv)['n 'k]), 
            return 's, 's)
       )       
     )
   ) *** end new
  .
  
    op 1OutOf4 : -> Protocol .
  eq 1OutOf4 =
   ( family (('OTMsg-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   ( family (('OTMsg-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   ( family (('OTMsg-2 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   ( family (('OTMsg-3 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m0 : bool <- read ('OTMsg-0['n 'm 'k]), return (), 'm0)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m1 : bool <- read ('OTMsg-1['n 'm 'k]), return (), 'm1)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m2 : bool <- read ('OTMsg-2['n 'm 'k]), return (), 'm2)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m3 : bool <- read ('OTMsg-3['n 'm 'k]), return (), 'm3)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTChc-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChc-0['n 'm 'k]), return 'oc, 'oc)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read (('OTChc-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChc-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChc-1['n 'm 'k]), return 'oc, 'oc)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read (('OTChc-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChcRcvd-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c0 : bool <- read ('OTChc-0['n 'm 'k]), return (), 'c0)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read (('OTChcRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), 
          return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChcRcvd-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) 
             ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c1 : bool <- read ('OTChc-1['n 'm 'k]), return (), 'c1)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read (('OTChcRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), 
          return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTOut ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('out : bool <- read ('OTOut['n 'm 'k]), return 'out, 'out)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('out : bool <- read (('OTOut ^^ 'ot .. 'adv)['n 'm 'k]), return 'out, 'out)
     )   
   )
   ||
   (family ('OTOut[(bound (N + 2) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     nf( ('m0 : bool <- read ('OTMsg-0['n 'm 'k]))
         ('m1 : bool <- read ('OTMsg-1['n 'm 'k]))
         ('m2 : bool <- read ('OTMsg-2['n 'm 'k]))
         ('m3 : bool <- read ('OTMsg-3['n 'm 'k]))
         ('c0 : bool <- read ('OTChc-0['n 'm 'k]))
         ('c1 : bool <- read ('OTChc-1['n 'm 'k])),
         if 'c0 
         then (if 'c1 then return 'm3 else return 'm2)
         else (if 'c1 then return 'm1 else return 'm0),
         'm0 'm1 'm2 'm3 'c0 'c1
      )        
   )  
  .
  
    *** the restructured protocol
  
  op restr : -> Protocol .
  eq restr =
   newfamily ('InShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('n 'm 'i) 
             ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in   
   newfamily ('Share[((bound (N + 2)) (bound K) )]) ('n 'k) 
             ((bound (N + 2)) (bound K) ) : bool in
     restrInitial || restrInductive || restrFinal
  .

  op restrInitial : -> Protocol . 
  eq restrInitial = 
   newfamily ('InShare$[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in
   newfamily ('InShare$-Sum[((bound (N + 1)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) : bool in         
   newfamily ('SendInShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i) 
             ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in
   ( *** start new
     (family (('In ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) ('n 'i) ((bound (N + 2)) (dependentBound 'I)) ::=
        (when (apply 'isSemiHonest 'n) -->
           nf('in : bool <- read ('In['n 'i]), 
              return 'in, 'in)
        )
       ;;
       (when (apply 'isHonest 'n) -->
           nf('in : bool <- read (('In ^^ 'party .. 'adv)['n 'i]), 
              return 'in, 'in)
       )
    )
    ||
     (family (('InRcvd ^^ 'party .. 'adv)[( (bound (N + 2)) (dependentBound 'I))]) ('n 'i)
             ( (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isHonest 'n) --> 
         nf('x : bool <- read ('In['n 'i]), return (), 'x)
       ) 
       ;; 
       (when (apply 'isSemiHonest 'n)  --> 
         nf('in : unit <- read (('InRcvd ^^ 'party .. 'adv)['n 'i]), return 'in, 'in)
       )       
     )
    ||
     (family ('InShare$[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when ('m =T= N + 1) --> 
          nf(('x : bool <- read ('In['n 'i]))
             ('s : bool <- read ('InShare$-Sum[N 'n 'i])), 
             return (ap 'xor pair('x, 's)), 'x 's)
       )
       ;;
       (otherwise --> 
         nf('x : bool <- read ('In['n 'i]), samp ('flip < () >), 'x)
       )      
     )
     ||
     (family ('InShare$-Sum[((bound (N + 1)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) ::=
        (when ('m =T= 0) --> 
          nf('in : bool <- read ('InShare$[0 'n 'i]), 
             return 'in, 'in)
        )
        ;;
        (otherwise --> 
          nf(('x : bool <- read ('InShare$['m 'n 'i]))
             ('s : bool <- read ('InShare$-Sum[('m -- 1) 'n 'i])), 
             return (ap 'xor pair('s, 'x)), 's 'x)
        )    
     )
     ||
      (family (('InShare$ ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
          nf('in : bool <- read ('InShare$['m 'n 'i]), return 'in, 'in)
       )
       ;;
       (when (apply 'isHonest 'n)  --> 
         nf('in : bool <- read (('InShare$ ^^ 'party .. 'adv)['m 'n 'i]), 
            return 'in, 'in)
       )      
     )
     ||
     (family (('InShare$-Sum ^^ 'party .. 'adv)[((bound (N + 1)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('InShare$-Sum['m 'n 'i]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('InShare$-Sum ^^ 'party .. 'adv)['m 'n 'i]), 
            return 's, 's)
       )       
     ) 
     ||
     (family ('SendInShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
        nf('in : bool <- read ('InShare$['m 'n 'i]), return 'in, 'in)    
     )  
     ||
     (family (('SendInShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendInShare['m 'n 'i]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('SendInShare ^^ 'party .. 'adv)['m 'n 'i]), 
            return 's, 's)
       )        
     )
     ||
     (family (('RcvdInShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendInShare['n 'm 'i]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('RcvdInShare ^^ 'party .. 'adv)['n 'm 'i]), 
            return 's, 's)
       )        
     )
     ||
     (family ('InShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
        nf('s : bool <- read ('SendInShare['n 'm 'i]), return 's, 's)    
     )        
     ||
     (family (('InShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('InShare['n 'm 'i]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('InShare ^^ 'party .. 'adv)['n 'm 'i]), 
            return 's, 's)
       )        
     )
     ) *** end new    
  .
  
    op restrInductive : -> Protocol .
  
  eq restrInductive = 
   newfamily ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in  
   newfamily ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   newfamily ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   newfamily ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   newfamily ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in  
   newfamily ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in                             
   newfamily ('OTOut[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily ('SendBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily ('RcvdBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily ('Ctrb[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily ('CtrbSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   ( *** start new
   
   family ('Circuit[((bound (N + 2)) (bound K))]) ('n 'k) ((bound (N + 2)) (bound K)) ::= 
   (when (apply 'isInputGate 'k) --> 
   *** for input gate
 ( family ('SendBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb)
 )
 ||
 (family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read (('SendBit ^^ 'party .. 'adv)['n 'm 'k]), 
       return 'sb, 'sb) 
 )               
 ||
 ( family ('RcvdBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('rb : bool <- read ('RcvdBit['n 'm 'k]), return 'rb, 'rb)
 )
 ||
 (family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('rb : bool <- read (('RcvdBit ^^ 'party .. 'adv)['n 'm 'k]), 
      return 'rb, 'rb)          
 ) 
 ||
 ( family ('Ctrb[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('b : bool <- read ('Ctrb['n 'm 'k]), return 'b, 'b)           
 )
 ||
 (family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read (('Ctrb ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)           
 )  
 ||
 ( family ('CtrbSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('b : bool <- read ('CtrbSum['n 'm 'k]), return 'b, 'b)  
 )
 ||
 (family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read (('CtrbSum ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)           
 )  
 ||
     ( family ('Share[((bound (N + 2)) (bound K))]) ('n 'k) ((bound (N + 2)) (bound K)) ::= 
       nf('in : bool <- read ('InShare['n (fun 'wire0 'k) (fun 'wire1 'k)]),
          return 'in, 'in)
     )
     ||
     (family (('Share ^^ 'party .. 'adv)[((bound (N + 2))(bound K))])  ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('Share ^^ 'party .. 'adv)['n 'k]), 
            return 's, 's)
       )        
     )
     ||
     (  family ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     (  family ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     (  family ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     (  family ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     (  family ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChc-0['m 'n 'k]),
          return 'oc, 'oc)
     )
     ||
     (  family ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChc-1['m 'n 'k]),
          return 'oc, 'oc)
     )
     ||
     (family (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
     )
||
   (family (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m0 : bool <- read ('OTMsg-0['n 'm 'k]), return (), 'm0)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m1 : bool <- read ('OTMsg-1['n 'm 'k]), return (), 'm1)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m2 : bool <- read ('OTMsg-2['n 'm 'k]), return (), 'm2)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m3 : bool <- read ('OTMsg-3['n 'm 'k]), return (), 'm3)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChc-0['n 'm 'k]), return 'oc, 'oc)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read (('OTChc-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChc-1['n 'm 'k]), return 'oc, 'oc)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read (('OTChc-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c0 : bool <- read ('OTChc-0['n 'm 'k]), return (), 'c0)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read (('OTChcRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), 
          return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c1 : bool <- read ('OTChc-1['n 'm 'k]), return (), 'c1)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read (('OTChcRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), 
          return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('out : bool <- read ('OTOut['n 'm 'k]), return 'out, 'out)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('out : bool <- read (('OTOut ^^ 'ot .. 'adv)['n 'm 'k]), return 'out, 'out)
     )   
   )
   ||
   ( family ('OTOut[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     nf( ('m0 : bool <- read ('OTMsg-0['n 'm 'k]))
         ('m1 : bool <- read ('OTMsg-1['n 'm 'k]))
         ('m2 : bool <- read ('OTMsg-2['n 'm 'k]))
         ('m3 : bool <- read ('OTMsg-3['n 'm 'k]))
         ('c0 : bool <- read ('OTChc-0['n 'm 'k]))
         ('c1 : bool <- read ('OTChc-1['n 'm 'k])),
         if 'c0 
         then (if 'c1 then return 'm3 else return 'm2)
         else (if 'c1 then return 'm1 else return 'm0),
         'm0 'm1 'm2 'm3 'c0 'c1
      )        
   )  
   ) *** end when
   ;;
   (when (apply 'isNotGate 'k) -->
  *** for not gate   
 ( family ('SendBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb)
 )
 ||
 (family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read (('SendBit ^^ 'party .. 'adv)['n 'm 'k]), 
       return 'sb, 'sb) 
 )               
 ||
 ( family ('RcvdBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('rb : bool <- read ('RcvdBit['n 'm 'k]), return 'rb, 'rb)
 )
 ||
 (family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('rb : bool <- read (('RcvdBit ^^ 'party .. 'adv)['n 'm 'k]), 
      return 'rb, 'rb)          
 ) 
 ||
 ( family ('Ctrb[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('b : bool <- read ('Ctrb['n 'm 'k]), return 'b, 'b)           
 )
 ||
 (family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read (('Ctrb ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)           
 )  
 ||
 ( family ('CtrbSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('b : bool <- read ('CtrbSum['n 'm 'k]), return 'b, 'b)  
 )
 ||
 (family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read (('CtrbSum ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)           
 )  
 ||
     ( family ('Share[((bound (N + 2)) (bound K))]) ('n 'k) ((bound (N + 2)) (bound K)) ::= 
        (when ('n =T= N + 1) --> 
          nf( ('x : bool <- read ('Share['n (fun 'wire0 'k)])),
              return (ap 'neg 'x), 'x
          )
        )
        ;;
        (when (neg ('n =T= N + 1)) --> 
          nf('s : bool <- read ('Share['n (fun 'wire0 'k)]),
          return 's, 's)
        )
          
     )
     ||
     (family (('Share ^^ 'party .. 'adv)[((bound (N + 2))(bound K))])  ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('Share ^^ 'party .. 'adv)['n 'k]), 
            return 's, 's)
       )        
     )
     ||
     (  family ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     (  family ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     (  family ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     (  family ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     (  family ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChc-0['m 'n 'k]),
          return 'oc, 'oc)
     )
     ||
     (  family ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChc-1['m 'n 'k]),
          return 'oc, 'oc)
     )
     ||  
  (family (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m0 : bool <- read ('OTMsg-0['n 'm 'k]), return (), 'm0)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m1 : bool <- read ('OTMsg-1['n 'm 'k]), return (), 'm1)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m2 : bool <- read ('OTMsg-2['n 'm 'k]), return (), 'm2)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m3 : bool <- read ('OTMsg-3['n 'm 'k]), return (), 'm3)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChc-0['n 'm 'k]), return 'oc, 'oc)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read (('OTChc-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChc-1['n 'm 'k]), return 'oc, 'oc)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read (('OTChc-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c0 : bool <- read ('OTChc-0['n 'm 'k]), return (), 'c0)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read (('OTChcRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), 
          return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c1 : bool <- read ('OTChc-1['n 'm 'k]), return (), 'c1)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read (('OTChcRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), 
          return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('out : bool <- read ('OTOut['n 'm 'k]), return 'out, 'out)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('out : bool <- read (('OTOut ^^ 'ot .. 'adv)['n 'm 'k]), return 'out, 'out)
     )   
   )
   ||
   ( family ('OTOut[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     nf( ('m0 : bool <- read ('OTMsg-0['n 'm 'k]))
         ('m1 : bool <- read ('OTMsg-1['n 'm 'k]))
         ('m2 : bool <- read ('OTMsg-2['n 'm 'k]))
         ('m3 : bool <- read ('OTMsg-3['n 'm 'k]))
         ('c0 : bool <- read ('OTChc-0['n 'm 'k]))
         ('c1 : bool <- read ('OTChc-1['n 'm 'k])),
         if 'c0 
         then (if 'c1 then return 'm3 else return 'm2)
         else (if 'c1 then return 'm1 else return 'm0),
         'm0 'm1 'm2 'm3 'c0 'c1
      )        
   )
   )*** end when
   ;;
   (when (apply 'isXorGate 'k) --> 
    *** for xor gate 
 ( family ('SendBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb)
 )
 ||
 (family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read (('SendBit ^^ 'party .. 'adv)['n 'm 'k]), 
       return 'sb, 'sb) 
 )               
 ||
 ( family ('RcvdBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('rb : bool <- read ('RcvdBit['n 'm 'k]), return 'rb, 'rb)
 )
 ||
 (family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('rb : bool <- read (('RcvdBit ^^ 'party .. 'adv)['n 'm 'k]), 
      return 'rb, 'rb)          
 ) 
 ||
 ( family ('Ctrb[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('b : bool <- read ('Ctrb['n 'm 'k]), return 'b, 'b)           
 )
 ||
 (family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read (('Ctrb ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)           
 )  
 ||
 ( family ('CtrbSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('b : bool <- read ('CtrbSum['n 'm 'k]), return 'b, 'b)  
 )
 ||
 (family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read (('CtrbSum ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)           
 )          
 ||
     ( family ('Share[((bound (N + 2)) (bound K))]) ('n 'k) ((bound (N + 2)) (bound K)) ::= 
       nf(('x : bool <- read ('Share['n (fun 'wire0 'k)]))
          ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair('x, 'y)), 'x 'y)
     )
     ||
     (family (('Share ^^ 'party .. 'adv)[((bound (N + 2))(bound K))])  ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('Share ^^ 'party .. 'adv)['n 'k]), 
            return 's, 's)
       )        
     )
     ||
     (  family ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     (  family ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     (  family ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     (  family ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om)
     )
     ||
     (  family ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChc-0['m 'n 'k]),
          return 'oc, 'oc)
     )
     ||
     (  family ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChc-1['m 'n 'k]),
          return 'oc, 'oc)
     )
      ||  
  (family (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m0 : bool <- read ('OTMsg-0['n 'm 'k]), return (), 'm0)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m1 : bool <- read ('OTMsg-1['n 'm 'k]), return (), 'm1)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m2 : bool <- read ('OTMsg-2['n 'm 'k]), return (), 'm2)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m3 : bool <- read ('OTMsg-3['n 'm 'k]), return (), 'm3)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChc-0['n 'm 'k]), return 'oc, 'oc)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read (('OTChc-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChc-1['n 'm 'k]), return 'oc, 'oc)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read (('OTChc-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c0 : bool <- read ('OTChc-0['n 'm 'k]), return (), 'c0)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read (('OTChcRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), 
          return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c1 : bool <- read ('OTChc-1['n 'm 'k]), return (), 'c1)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read (('OTChcRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), 
          return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('out : bool <- read ('OTOut['n 'm 'k]), return 'out, 'out)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('out : bool <- read (('OTOut ^^ 'ot .. 'adv)['n 'm 'k]), return 'out, 'out)
     )   
   )
   ||
   ( family ('OTOut[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     nf( ('m0 : bool <- read ('OTMsg-0['n 'm 'k]))
         ('m1 : bool <- read ('OTMsg-1['n 'm 'k]))
         ('m2 : bool <- read ('OTMsg-2['n 'm 'k]))
         ('m3 : bool <- read ('OTMsg-3['n 'm 'k]))
         ('c0 : bool <- read ('OTChc-0['n 'm 'k]))
         ('c1 : bool <- read ('OTChc-1['n 'm 'k])),
         if 'c0 
         then (if 'c1 then return 'm3 else return 'm2)
         else (if 'c1 then return 'm1 else return 'm0),
         'm0 'm1 'm2 'm3 'c0 'c1
      )        
   )
   ) *** end when
   ;;
   (when (apply 'isAndGate 'k) -->
     *** for and gate
     ( family ('SendBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( 
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          samp ('flip < () >), 
             'x 'y
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('sb : bool <- read ('SendBit['n 'm 'k]),
          return 'sb, 'sb)
       )   
     )
     ||
      (family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendBit['n 'm 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('SendBit ^^ 'party .. 'adv)['n 'm 'k]), 
            return 's, 's)
       )        
     )
     ||
     (  family ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return 'b, 'b 'x 'y
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om)
       )   
     )
     ||
     (  family ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair('x, 'b)), 'b 'x 'y
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om)
       )   
     )
     ||
     (  family ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair('y, 'b)), 'b 'x 'y
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om)
       )   
     )
     ||
     (  family ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair(ap 'xor pair('x, 'y), 'b)), 
          'b 'x 'y
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om)
       )   
     )
     ||
     (  family ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
      (when ('n <T 'm) --> 
         nf( ('x : bool <- read ('Share['n (fun 'wire0 'k)])),
          return 'x, 'x
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('oc : bool <- read ('OTChc-0['m 'n 'k]),
          return 'oc, 'oc)
       )   
     )
     ||
     (  family ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('x : bool <- read ('Share['n (fun 'wire1 'k)])),
          return 'x, 'x
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('oc : bool <- read ('OTChc-1['m 'n 'k]),
          return 'oc, 'oc)
       )   
     )
     ||
     ( family ('RcvdBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
          nf( ('out : bool <- read ('OTOut['m 'n 'k])),
              return 'out, 'out
          )     
    )
    ||
     (family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('RcvdBit['n 'm 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('RcvdBit ^^ 'party .. 'adv)['n 'm 'k]), 
            return 's, 's)
       )        
     )
      ||
      ( family ('Ctrb[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
      (when ('n <T 'm) --> 
         nf( ('r : bool <- read ('RcvdBit['m 'n 'k])),
          return 'r, 'r
          )
       )
       ;;
       (when ('n =T= 'm) --> 
         nf( ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'and pair('x, 'y)), 
          'x 'y
          )
       )
       ;;
       (when ('m <T 'n) --> 
         nf( ('s : bool <- read ('SendBit['n 'm 'k])),
          return 's, 's
          )
       )   
     )
     ||
     (family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) -->
             nf('s : bool <- read ('Ctrb['n 'm 'k]), return 's, 's)
       )
       ;;
       (when (apply 'isHonest 'n) -->
             nf('s : bool <- read (('Ctrb ^^ 'party .. 'adv)['n 'm 'k]), return 's, 's)
       ) 
     )
      ||
      ( family ('CtrbSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   (when ('m =T= 0) --> 
     nf( ('b : bool <- read ('Ctrb['n 0 'k])),
          return 'b, 'b
          ) 
   )
   ;;
   (when (neg ('m =T= 0)) --> 
     nf( ('s : bool <- read ('CtrbSum['n ('m -- 1) 'k]))
         ('b : bool <- read ('Ctrb['n 'm 'k])),
          return (ap 'xor pair('s, 'b)), 's 'b
          ) 
   )
 )
 ||
 (family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('CtrbSum['n 'm 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('CtrbSum ^^ 'party .. 'adv)['n 'm 'k]), 
            return 's, 's)
       )        
     )
      ||   
 ( family ('Share[((bound (N + 2)) (bound K))]) ('n 'k) ((bound (N + 2)) (bound K)) ::= 
          nf( ('bs : bool <- read ('CtrbSum['n (N + 1) 'k])),
              return 'bs, 'bs
          )     
 )   
 ||
     (family (('Share ^^ 'party .. 'adv)[((bound (N + 2))(bound K))])  ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('Share ^^ 'party .. 'adv)['n 'k]), 
            return 's, 's)
       )        
     )
     ||
     (family (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]), return 'om, 'om)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read (('OTMsg-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m0 : bool <- read ('OTMsg-0['n 'm 'k]), return (), 'm0)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m1 : bool <- read ('OTMsg-1['n 'm 'k]), return (), 'm1)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m2 : bool <- read ('OTMsg-2['n 'm 'k]), return (), 'm2)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m3 : bool <- read ('OTMsg-3['n 'm 'k]), return (), 'm3)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read (('OTMsgRcvd-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
     )   
   )
   ||
   (family (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChc-0['n 'm 'k]), return 'oc, 'oc)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read (('OTChc-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChc-1['n 'm 'k]), return 'oc, 'oc)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read (('OTChc-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c0 : bool <- read ('OTChc-0['n 'm 'k]), return (), 'c0)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read (('OTChcRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), 
          return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c1 : bool <- read ('OTChc-1['n 'm 'k]), return (), 'c1)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read (('OTChcRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), 
          return 'oc, 'oc)
     )   
   )
   ||
   (family (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('out : bool <- read ('OTOut['n 'm 'k]), return 'out, 'out)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('out : bool <- read (('OTOut ^^ 'ot .. 'adv)['n 'm 'k]), return 'out, 'out)
     )   
   )
   ||
   ( family ('OTOut[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     nf( ('m0 : bool <- read ('OTMsg-0['n 'm 'k]))
         ('m1 : bool <- read ('OTMsg-1['n 'm 'k]))
         ('m2 : bool <- read ('OTMsg-2['n 'm 'k]))
         ('m3 : bool <- read ('OTMsg-3['n 'm 'k]))
         ('c0 : bool <- read ('OTChc-0['n 'm 'k]))
         ('c1 : bool <- read ('OTChc-1['n 'm 'k])),
         if 'c0 
         then (if 'c1 then return 'm3 else return 'm2)
         else (if 'c1 then return 'm1 else return 'm0),
         'm0 'm1 'm2 'm3 'c0 'c1
      )        
   ) 

   )
   ) *** end new

  . 
     
  op restrFinal : -> Protocol .  
  
  eq restrFinal = 
   newfamily ('SendOutShare[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in          
   newfamily ('OutShare[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) : bool in
   newfamily ('OutShareSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) : bool in
   ( *** start new
     (family ('SendOutShare[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isOutputWire 'k) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's)
       ) 
       ;; 
       (when (neg (apply 'isOutputWire 'k)) --> 
         nf('s : bool <- read ('SendOutShare['m 'n 'k]), return 's, 's)
       )       
     )
     ||
     (family (('SendOutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendOutShare['m 'n 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('SendOutShare ^^ 'party .. 'adv)['m 'n 'k]), 
            return 's, 's)
       )       
     )
     ||
     (family (('RcvdOutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendOutShare['n 'm 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('RcvdOutShare ^^ 'party .. 'adv)['n 'm 'k]), 
            return 's, 's)
       )       
     )
     || 
     (family ('OutShare[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
      nf('s : bool <- read ('SendOutShare['n 'm 'k]), return 's, 's)       
     )
     ||
     (family (('OutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('OutShare['n 'm 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('OutShare ^^ 'party .. 'adv)['n 'm 'k]), 
            return 's, 's)
       )       
     )
     ||
     (family ('OutShareSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when ('m =T= 0) --> 
         nf('s : bool <- read ('OutShare['n 0 'k]), 
            return 's, 's)
       )
       ;;
       (otherwise -->
         nf( ('s : bool <- read ('OutShareSum['n ('m -- 1) 'k]))
             ('x : bool <- read ('OutShare['n 'm 'k])),
             return (ap 'xor pair('s, 'x)),
             's 'x
         )
       )
     )        
     ||
     (family (('OutShareSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('OutShareSum['n 'm 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('OutShareSum ^^ 'party .. 'adv)['n 'm 'k]), 
            return 's, 's)
       )       
     )
     ||
     (family ('Out[((bound (N + 2)) (bound K))]) ('n 'k)
             ((bound (N + 2)) (bound K)) ::=
      nf('s : bool <- read ('OutShareSum['n (N + 1) 'k]),
         return 's, 's)       
     )
     ||
     (family (('Out ^^ 'party .. 'adv)[((bound (N + 2)) (bound K))]) ('n 'k)
             (bound (N + 2) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Out['n 'k]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('Out ^^ 'party .. 'adv)['n 'k]), 
            return 's, 's)
       )       
     )
   ) *** end new

 . 
 
  *** before restructuring Circuit, store the results
 op simplRestrInitial : -> Protocol .
  
 eq simplRestrInitial = 
   newfamily ('InShare$[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in
   newfamily ('InShare$-Sum[((bound (N + 1)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) : bool in         
   ( *** start new
     (family (('In ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) ('n 'i) ((bound (N + 2)) (dependentBound 'I)) ::=
        (when (apply 'isSemiHonest 'n) -->
           nf('in : bool <- read ('In['n 'i]), 
              return 'in, 'in)
        )
       ;;
       (when (apply 'isHonest 'n) -->
           nf('in : bool <- read (('In ^^ 'party .. 'adv)['n 'i]), 
              return 'in, 'in)
       )
    )
    ||
     (family (('InRcvd ^^ 'party .. 'adv)[( (bound (N + 2)) (dependentBound 'I))]) ('n 'i)
             ( (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isHonest 'n) --> 
         nf('x : bool <- read ('In['n 'i]), return (), 'x)
       ) 
       ;; 
       (when (apply 'isSemiHonest 'n)  --> 
         nf('in : unit <- read (('InRcvd ^^ 'party .. 'adv)['n 'i]), return 'in, 'in)
       )       
     )
    ||
     (family ('InShare$[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when ('m =T= N + 1) --> 
          nf(('x : bool <- read ('In['n 'i]))
             ('s : bool <- read ('InShare$-Sum[N 'n 'i])), 
             return (ap 'xor pair('x, 's)), 'x 's)
       )
       ;;
       (otherwise --> 
         nf('x : bool <- read ('In['n 'i]), samp ('flip < () >), 'x)
       )      
     )
     ||
     (family ('InShare$-Sum[((bound (N + 1)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) ::=
        (when ('m =T= 0) --> 
          nf('in : bool <- read ('InShare$[0 'n 'i]), 
             return 'in, 'in)
        )
        ;;
        (otherwise --> 
          nf(('x : bool <- read ('InShare$['m 'n 'i]))
             ('s : bool <- read ('InShare$-Sum[('m -- 1) 'n 'i])), 
             return (ap 'xor pair('s, 'x)), 's 'x)
        )    
     )
     ||
      (family (('InShare$ ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
          nf('in : bool <- read ('InShare$['m 'n 'i]), return 'in, 'in)
       )
       ;;
       (when (apply 'isHonest 'n)  --> 
         nf('in : bool <- read (('InShare$ ^^ 'party .. 'adv)['m 'n 'i]), 
            return 'in, 'in)
       )      
     )
     ||
     (family (('InShare$-Sum ^^ 'party .. 'adv)[((bound (N + 1)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('InShare$-Sum['m 'n 'i]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('InShare$-Sum ^^ 'party .. 'adv)['m 'n 'i]), 
            return 's, 's)
       )       
     ) 
     ||
     (family (('SendInShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('in : bool <- read ('InShare$['m 'n 'i]), return 'in, 'in)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('SendInShare ^^ 'party .. 'adv)['m 'n 'i]), 
            return 's, 's)
       )        
     )
     ||
     (family (('RcvdInShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('in : bool <- read ('InShare$['n 'm 'i]), return 'in, 'in)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('RcvdInShare ^^ 'party .. 'adv)['n 'm 'i]), 
            return 's, 's)
       )        
     )
     ||
     (family ('InShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
        nf('in : bool <- read ('InShare$['n 'm 'i]), return 'in, 'in)   
     )        
     ||
     (family (('InShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('InShare['n 'm 'i]), return 's, 's)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read (('InShare ^^ 'party .. 'adv)['n 'm 'i]), 
            return 's, 's)
       )        
     )
     ) *** end new    
  . 
  
   *** restructuring Circuit
  
  *** 1. Shares
  op shares : -> Protocol .
eq shares = 
 family ('Shares[bound K]) 'k (bound K) ::=
 ( *** start family
 
  (when (apply 'isInputGate 'k) --> 
    (family ('RcvdBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
      nf('rb : bool <- read ('RcvdBit['n 'm 'k]), return 'rb, 'rb)
    )
||
(family ('SendBit[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb)
)
    ||
    (family ('Ctrb[((bound (N + 2))(bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('b : bool <- read ('Ctrb['n 'm 'k]), return 'b, 'b)
)
||
(family ('CtrbSum[((bound (N + 2))(bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('b : bool <- read ('CtrbSum['n 'm 'k]), return 'b, 'b)
)
    ||
    (family ('Share[((bound (N + 2)) (bound K))]) ('n 'k) ((bound (N + 2)) (bound K)) ::=
      nf('in : bool <- read ('InShare['n (fun 'wire0 'k) (fun 'wire1 'k)]), 
         return 'in, 'in)
    )
  ) *** end when input gate
  ;;
   (when (apply 'isNotGate 'k) --> 
    (family ('RcvdBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
      nf('rb : bool <- read ('RcvdBit['n 'm 'k]), return 'rb, 'rb)
    )
||
(family ('SendBit[((bound (N + 2))(bound (N + 2))(bound K))])   ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb)
)
    ||
    (family ('Ctrb[((bound (N + 2))(bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('b : bool <- read ('Ctrb['n 'm 'k]), return 'b, 'b)
)
||
(family ('CtrbSum[((bound (N + 2))(bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('b : bool <- read ('CtrbSum['n 'm 'k]), return 'b, 'b)
)
    ||
    (family ('Share[((bound (N + 2)) (bound K))]) ('n 'k) ((bound (N + 2)) (bound K)) ::=
      (when ('n =T= N + 1) -->
 nf('x : bool <- read ('Share['n (fun 'wire0 'k)]), 
 return (ap 'neg 'x), 'x))
;;
(when (neg ('n =T= N + 1)) -->
nf('s : bool <- read ('Share['n (fun 'wire0 'k)]), return 's, 's)
)
    )
  ) *** end when not gate
  ;;
   (when (apply 'isXorGate 'k) --> 
    (family ('RcvdBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
      nf('rb : bool <- read ('RcvdBit['n 'm 'k]), return 'rb, 'rb)
    )
||
(family ('SendBit[((bound (N + 2))(bound (N + 2))(bound K))])   ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb)
)
    ||
    (family ('Ctrb[((bound (N + 2))(bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('b : bool <- read ('Ctrb['n 'm 'k]), return 'b, 'b)
)
||
(family ('CtrbSum[((bound (N + 2))(bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('b : bool <- read ('CtrbSum['n 'm 'k]), return 'b, 'b)
)
    ||
    (family ('Share[((bound (N + 2)) (bound K))]) ('n 'k) ((bound (N + 2)) (bound K)) ::=
      nf(('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
          'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
         return (ap 'xor pair('x, 'y)), 
         'x 'y)
    )
  ) *** end when xor gate
  ;;
   (when (apply 'isAndGate 'k) --> 
    (family ('RcvdBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
      nf(('b : bool <- read ('SendBit['m 'n 'k])) 
         ('xm : bool <- read ('Share['m (fun 'wire0 'k)])) 
         ('xn : bool <- read ('Share['n (fun 'wire0 'k)])) 
         ('ym : bool <- read ('Share['m (fun 'wire1 'k)])) 
          'yn : bool <- read ('Share['n (fun 'wire1 'k)]), 
          return (ap 'xor pair(ap 'xor pair(ap 'and pair('xm, 'yn), 
                                            ap 'and pair('xn, 'ym)), 
                               'b)), 
          'b 'xm 'ym 'xn 'yn)
    )
||
(family ('SendBit[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ('n <T 'm) -->
nf(('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
    'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
    samp ('flip < () >),
    'x 'y))
;;
(when ('m <=T 'n) -->
nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb)
)
)
    ||
    (family ('Ctrb[((bound (N + 2))(bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ('n <T 'm) -->
nf('r : bool <- read ('RcvdBit['m 'n 'k]), return 'r, 'r))
;;
(when ('m =T= 'n) -->
nf(('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
    'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
    return (ap 'and pair('x, 'y)), 'x 'y))
;;
(when ('m <T 'n) -->
nf('s : bool <- read ('SendBit['n 'm 'k]), return 's, 's)
)
)
||
( family ('CtrbSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when (0 =T= 'm) -->
nf('b : bool <- read ('Ctrb['n 0 'k]), return 'b, 'b))
;;
(when (neg (0 =T= 'm)) -->
nf(('b : bool <- read ('Ctrb['n 'm 'k]))  
    's : bool <- read ('CtrbSum['n ('m -- 1) 'k]), 
    return (ap 'xor pair('s, 'b)), 
    's 'b)
)
)
    ||
    (family ('Share[((bound (N + 2)) (bound K))]) ('n 'k) ((bound (N + 2)) (bound K)) ::=
      nf('bs : bool <- read ('CtrbSum['n (N + 1) 'k]), return 'bs, 'bs)
    )
  ) *** end when and gate
  
 
 ) *** end family
 
. 

  *** 2. Adv
  op adv : -> Protocol .
eq adv = 
 family ('Adv[bound K]) 'k (bound K) ::=
 ( *** start family
 
(when (apply 'isInputGate 'k) -->

(family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])   ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('b : bool <- read (('Ctrb ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)
)
||
(family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])   ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('b : bool <- read (('CtrbSum ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)
)
||
(family (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])   ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('oc : bool <- read (('OTChc-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
||
(family (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])   ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('oc : bool <- read (('OTChc-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
||
(family (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])   ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('oc : unit <- read (('OTChcRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
||
(family (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])   ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('oc : unit <- read (('OTChcRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
||
(family (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])   ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : bool <- read (('OTMsg-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])   ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : bool <- read (('OTMsg-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : bool <- read (('OTMsg-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : bool <- read (('OTMsg-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : unit <- read (('OTMsgRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : unit <- read (('OTMsgRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : unit <- read (('OTMsgRcvd-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : unit <- read (('OTMsgRcvd-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('out : bool <- read (('OTOut ^^ 'ot .. 'adv)['n 'm 'k]), return 'out, 'out)
)
||
(family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('rb : bool <- read (('RcvdBit ^^ 'party .. 'adv)['n 'm 'k]), return 'rb, 'rb)
)
||
(family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('sb : bool <- read (('SendBit ^^ 'party .. 'adv)['n 'm 'k]), return 'sb, 'sb)
)
||
(
family (('Share ^^ 'party .. 'adv)[((bound (N + 2))(bound K))])  ('n 'k) ((bound (N + 2)) (bound K)) ::=
(when (apply 'isSemiHonest 'n) -->
nf('s : bool <- read ('Share['n 'k]), return 's, 's))
;;
(when (apply 'isHonest 'n) -->
nf('s : bool <- read (('Share ^^ 'party .. 'adv)['n 'k]), return 's, 's)
)
)
) *** end when input gate        
;;
(when (apply 'isNotGate 'k) -->
(family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('b : bool <- read (('Ctrb ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)
)
||
(family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('b : bool <- read (('CtrbSum ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)
)
||
(family (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('oc : bool <- read (('OTChc-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
||
(family (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('oc : bool <- read (('OTChc-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
||
(family (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('oc : unit <- read (('OTChcRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
||
(family (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('oc : unit <- read (('OTChcRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
||
(family (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : bool <- read (('OTMsg-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : bool <- read (('OTMsg-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : bool <- read (('OTMsg-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : bool <- read (('OTMsg-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : unit <- read (('OTMsgRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : unit <- read (('OTMsgRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : unit <- read (('OTMsgRcvd-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : unit <- read (('OTMsgRcvd-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('out : bool <- read (('OTOut ^^ 'ot .. 'adv)['n 'm 'k]), return 'out, 'out)
)
||
(family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('rb : bool <- read (('RcvdBit ^^ 'party .. 'adv)['n 'm 'k]), return 'rb, 'rb)
)
||
(family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('sb : bool <- read (('SendBit ^^ 'party .. 'adv)['n 'm 'k]), return 'sb, 'sb)
)
||
(family (('Share ^^ 'party .. 'adv)[((bound (N + 2))(bound K))])  ('n 'k)
((bound (N + 2)) (bound K)) ::=
(when (apply 'isSemiHonest 'n) -->
nf('s : bool <- read ('Share['n 'k]), return 's, 's))
;;
(when (apply 'isHonest 'n) -->
nf('s : bool <- read (('Share ^^ 'party .. 'adv)['n 'k]), return 's, 's)
)
)
) *** end when not gate
;;
(when (apply 'isXorGate 'k) -->
(family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('b : bool <- read (('Ctrb ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)
)
||
(family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('b : bool <- read (('CtrbSum ^^ 'party .. 'adv)['n 'm 'k]), return 'b, 'b)
)
||
(family (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('oc : bool <- read (('OTChc-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
||
(family (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('oc : bool <- read (('OTChc-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
||
(family (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('oc : unit <- read (('OTChcRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
||
(family (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('oc : unit <- read (('OTChcRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
||
(family (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : bool <- read (('OTMsg-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : bool <- read (('OTMsg-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : bool <- read (('OTMsg-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : bool <- read (('OTMsg-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : unit <- read (('OTMsgRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : unit <- read (('OTMsgRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : unit <- read (('OTMsgRcvd-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('om : unit <- read (('OTMsgRcvd-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
||
(family (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('out : bool <- read (('OTOut ^^ 'ot .. 'adv)['n 'm 'k]), return 'out, 'out)
)
||
(family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('rb : bool <- read (('RcvdBit ^^ 'party .. 'adv)['n 'm 'k]), return 'rb, 'rb)
)
||
(family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf('sb : bool <- read (('SendBit ^^ 'party .. 'adv)['n 'm 'k]), return 'sb, 'sb)
)
||
(family (('Share ^^ 'party .. 'adv)[((bound (N + 2))(bound K))])  ('n 'k)
((bound (N + 2)) (bound K)) ::=
(when (apply 'isSemiHonest 'n) -->
nf('s : bool <- read ('Share['n 'k]), return 's, 's))
;;
(when (apply 'isHonest 'n) -->
nf('s : bool <- read (('Share ^^ 'party .. 'adv)['n 'k]), return 's, 's)
)
)
)
;;
(when (apply 'isAndGate 'k) -->
(family (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when (apply 'isSemiHonest 'n) -->
nf('s : bool <- read ('Ctrb['n 'm 'k]), return 's, 's))
;;
(when (apply 'isHonest 'n) -->
nf('s : bool <- read (('Ctrb ^^ 'party .. 'adv)['n 'm 'k]), return 's, 's)
)
)
||
(family (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when (apply 'isSemiHonest 'n) -->
nf('s : bool <- read ('CtrbSum['n 'm 'k]), return 's, 's))
;;
(when (apply 'isHonest 'n) -->
nf('s : bool <- read (('CtrbSum ^^ 'party .. 'adv)['n 'm 'k]), return 's, 's)
)
)
||
(family (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ((apply 'isSemiHonest 'm) conj 'n <T 'm) -->
nf('x : bool <- read ('Share['m (fun 'wire0 'k)]), return 'x, 'x))
;;
(when ((apply 'isHonest 'm) disj 'm <=T 'n) -->
nf('oc : bool <- read (('OTChc-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
)
||
(family (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ((apply 'isSemiHonest 'm) conj 'n <T 'm) -->
nf('x : bool <- read ('Share['m (fun 'wire1 'k)]), return 'x, 'x))
;;
(when ((apply 'isHonest 'm) disj 'm <=T 'n) -->
nf('oc : bool <- read (('OTChc-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
)
||
(family (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ((apply 'isHonest 'm) conj 'n <T 'm) -->
nf('x : bool <- read ('Share['m (fun 'wire0 'k)]), return (), 'x))
;;
(when ((apply 'isSemiHonest 'm) disj 'm <=T 'n) -->
nf('oc : unit <- read (('OTChcRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
)
||
(family (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ((apply 'isHonest 'm) conj 'n <T 'm) -->
nf('x : bool <- read ('Share['m (fun 'wire1 'k)]), return (), 'x))
;;
(when ((apply 'isSemiHonest 'm) disj 'm <=T 'n) -->
nf('oc : unit <- read (('OTChcRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'oc, 'oc)
)
)
||
(family (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ((apply 'isSemiHonest 'n) conj 'n <T 'm) -->
nf(('b : bool <- read ('SendBit['n 'm 'k])) 
   ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
    'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
    return 'b, 'b 'x 'y))
;;
(when ((apply 'isHonest 'n) disj 'm <=T 'n) -->
nf('om : bool <- read (('OTMsg-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
)
||
(family (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ((apply 'isSemiHonest 'n) conj 'n <T 'm) -->
nf(('b : bool <- read ('SendBit['n 'm 'k])) 
   ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
    'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
    return (ap 'xor pair('x, 'b)), 'b 'x 'y))
;;
(when ((apply 'isHonest 'n) disj 'm <=T 'n) -->
nf('om : bool <- read (('OTMsg-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
)
||
(family (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ((apply 'isSemiHonest 'n) conj 'n <T 'm) -->
nf(('b : bool <- read ('SendBit['n 'm 'k])) 
   ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
    'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
    return (ap 'xor pair('y, 'b)), 'b 'x 'y)
)
;;
(when ((apply 'isHonest 'n) disj 'm <=T 'n) -->
nf('om : bool <- read (('OTMsg-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
)
||
(family (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ((apply 'isSemiHonest 'n) conj 'n <T 'm) -->
nf(('b : bool <- read ('SendBit['n 'm 'k])) 
   ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
    'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
    return (ap 'xor pair(ap 'xor pair('x, 'y), 'b)), 
    'b 'x 'y)
)
;;
(when ((apply 'isHonest 'n) disj 'm <=T 'n) -->
nf('om : bool <- read (('OTMsg-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
)
||
(family (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ((apply 'isHonest 'n) conj 'n <T 'm) -->
nf(('b : bool <- read ('SendBit['n 'm 'k])) 
   ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
    'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
    return (), 'b 'x 'y))
;;
(when ((apply 'isSemiHonest 'n) disj 'm <=T 'n) -->
nf('om : unit <- read (('OTMsgRcvd-0 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
)
||
(family (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ((apply 'isHonest 'n) conj 'n <T 'm) -->
nf(('b : bool <- read ('SendBit['n 'm 'k])) 
   ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
    'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
    return (), 'b 'x 'y))
;;
(when ((apply 'isSemiHonest 'n) disj 'm <=T 'n) -->
nf('om : unit <- read (('OTMsgRcvd-1 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
)
||
(family (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ((apply 'isHonest 'n) conj 'n <T 'm) -->
nf(('b : bool <- read ('SendBit['n 'm 'k])) 
   ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
    'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
    return (), 'b 'x 'y))
;;
(when ((apply 'isSemiHonest 'n) disj 'm <=T 'n) -->
nf('om : unit <- read (('OTMsgRcvd-2 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
)
||
(family (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ((apply 'isHonest 'n) conj 'n <T 'm) -->
nf(('b : bool <- read ('SendBit['n 'm 'k])) 
   ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
    'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
    return (), 'b 'x 'y))
;;
(when ((apply 'isSemiHonest 'n) disj 'm <=T 'n) -->
nf('om : unit <- read (('OTMsgRcvd-3 ^^ 'ot .. 'adv)['n 'm 'k]), return 'om, 'om)
)
)
||
(family (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when (apply 'isSemiHonest 'm) -->
nf('out : bool <- read ('RcvdBit['m 'n 'k]), return 'out, 'out))
;;
(when (apply 'isHonest 'm) -->
nf('out : bool <- read (('OTOut ^^ 'ot .. 'adv)['n 'm 'k]), return 'out, 'out)
)
)
||
(family (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when (apply 'isSemiHonest 'n) -->
nf('s : bool <- read ('RcvdBit['n 'm 'k]), return 's, 's))
;;
(when (apply 'isHonest 'n) -->
nf('s : bool <- read (('RcvdBit ^^ 'party .. 'adv)['n 'm 'k]), return 's, 's)
)
)
||
(family (('SendBit ^^ 'party .. 'adv)[((bound (N + 2))(bound (N + 2))(bound K))])  ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when (apply 'isSemiHonest 'n) -->
nf('s : bool <- read ('SendBit['n 'm 'k]), return 's, 's))
;;
(when (apply 'isHonest 'n) -->
nf('s : bool <- read (('SendBit ^^ 'party .. 'adv)['n 'm 'k]), return 's, 's)
)
)
||
family (('Share ^^ 'party .. 'adv)[((bound (N + 2))(bound K))])  ('n 'k)
((bound (N + 2)) (bound K)) ::=
(when (apply 'isSemiHonest 'n) -->
nf('s : bool <- read ('Share['n 'k]), return 's, 's))
;;
(when (apply 'isHonest 'n) -->
nf('s : bool <- read (('Share ^^ 'party .. 'adv)['n 'k]), return 's, 's)
)
) *** end when and gate

 
 ) *** end family
 
.

  *** 3. 1OutOf4OT
  op 1OutOf4OT : -> Protocol .
  
  eq 1OutOf4OT =
    newfamily ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in  
    newfamily ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
    newfamily ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
    newfamily ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
    newfamily ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in  
    newfamily ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in                             
    newfamily ('OTOut[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   family ('1OutOf4OT[bound K]) 'k (bound K) ::=
    ( *** start family
      (when (apply 'isInputGate 'k) -->
      ( family ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('om : bool <- read ('OTMsg-0['n 'm 'k]), return 'om, 'om)
      )
      ||
      ( family ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('om : bool <- read ('OTMsg-1['n 'm 'k]), return 'om, 'om)
      )
      ||
      ( family ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('om : bool <- read ('OTMsg-2['n 'm 'k]), return 'om, 'om)
      ) 
      ||
      ( family ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('om : bool <- read ('OTMsg-3['n 'm 'k]), return 'om, 'om)
      )
      ||
      ( family ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('oc : bool <- read ('OTChc-0['m 'n 'k]), return 'oc, 'oc)
      )
      ||
      ( family ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('oc : bool <- read ('OTChc-1['m 'n 'k]), return 'oc, 'oc)
      )
      ||
      ( family ('OTOut[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('o : bool <- read ('OTOut['n 'm 'k]), return 'o, 'o)
      ) 
    ) *** end when input gate
    ;;
    (when (apply 'isNotGate 'k) -->
      ( family ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('om : bool <- read ('OTMsg-0['n 'm 'k]), return 'om, 'om)
      )
      ||
      ( family ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('om : bool <- read ('OTMsg-1['n 'm 'k]), return 'om, 'om)
      )
      ||
      ( family ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('om : bool <- read ('OTMsg-2['n 'm 'k]), return 'om, 'om)
      ) 
      ||
      ( family ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('om : bool <- read ('OTMsg-3['n 'm 'k]), return 'om, 'om)
      )
      ||
      ( family ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('oc : bool <- read ('OTChc-0['m 'n 'k]), return 'oc, 'oc)
      )
      ||
      ( family ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('oc : bool <- read ('OTChc-1['m 'n 'k]), return 'oc, 'oc)
      )
      ||
      ( family ('OTOut[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('o : bool <- read ('OTOut['n 'm 'k]), return 'o, 'o)
      ) 
    ) *** end when not gate
    ;;
    (when (apply 'isXorGate 'k) -->
      ( family ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('om : bool <- read ('OTMsg-0['n 'm 'k]), return 'om, 'om)
      )
      ||
      ( family ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('om : bool <- read ('OTMsg-1['n 'm 'k]), return 'om, 'om)
      )
      ||
      ( family ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('om : bool <- read ('OTMsg-2['n 'm 'k]), return 'om, 'om)
      ) 
      ||
      ( family ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('om : bool <- read ('OTMsg-3['n 'm 'k]), return 'om, 'om)
      )
      ||
      ( family ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('oc : bool <- read ('OTChc-0['m 'n 'k]), return 'oc, 'oc)
      )
      ||
      ( family ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('oc : bool <- read ('OTChc-1['m 'n 'k]), return 'oc, 'oc)
      )
      ||
      ( family ('OTOut[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        nf('o : bool <- read ('OTOut['n 'm 'k]), return 'o, 'o)
      ) 
    ) *** end when xor gate
    ;;
    
    
    (when (apply 'isAndGate 'k) -->

( family ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ('n <T 'm) -->
nf(('b : bool <- read ('SendBit['n 'm 'k])) 
   ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
    'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
    return 'b, 'b 'x 'y)
)
;;
(when ('m <=T 'n) -->
nf('om : bool <- read ('OTMsg-0['n 'm 'k]), return 'om, 'om)
)
)
||
( family ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ('n <T 'm) -->
nf(('b : bool <- read ('SendBit['n 'm 'k])) 
   ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
    'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
    return (ap 'xor pair('x, 'b)), 'b 'x 'y))
;;
(when ('m <=T 'n) -->
nf('om : bool <- read ('OTMsg-1['n 'm 'k]), return 'om, 'om)
)
)
||
( family ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ('n <T 'm) -->
nf(('b : bool <- read ('SendBit['n 'm 'k])) 
   ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
    'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
    return (ap 'xor pair('y, 'b)), 'b 'x 'y))
;;
(when ('m <=T 'n) -->
nf('om : bool <- read ('OTMsg-2['n 'm 'k]), return 'om, 'om)
)
)
||
( family ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
(when ('n <T 'm) -->
nf(('b : bool <- read ('SendBit['n 'm 'k])) 
   ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
    'y : bool <- read ('Share['n (fun 'wire1 'k)]), 
    return (ap 'xor pair(ap 'xor pair('x, 'y), 'b)), 
    'b 'x 'y)
)
;;
(when ('m <=T 'n) -->
nf('om : bool <- read ('OTMsg-3['n 'm 'k]), return 'om, 'om)
)
)
      ||
      ( family ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        (when ('n <T 'm) --> 
          nf('x : bool <- read ('Share['n (fun 'wire0 'k)]), 
             return 'x, 'x))
        ;;
        (when ('m <=T 'n) -->
          nf('oc : bool <- read ('OTChc-0['m 'n 'k]), return 'oc, 'oc)
        )
      )
      ||
      ( family ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
        (when ('n <T 'm) --> 
          nf('x : bool <- read ('Share['n (fun 'wire1 'k)]), 
             return 'x, 'x))
        ;;
        (when ('m <=T 'n) -->
          nf('oc : bool <- read ('OTChc-1['m 'n 'k]), return 'oc, 'oc)
        )
      )

      ||
( family ('OTOut[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
nf(('c0 : bool <- read ('OTChc-0['n 'm 'k])) 
   ('c1 : bool <- read ('OTChc-1['n 'm 'k])) 
   ('m0 : bool <- read ('OTMsg-0['n 'm 'k])) 
   ('m1 : bool <- read ('OTMsg-1['n 'm 'k])) 
   ('m2 : bool <- read ('OTMsg-2['n 'm 'k])) 
    'm3 : bool <- read ('OTMsg-3['n 'm 'k]), 
   if 'c0 then if 'c1 then return 'm3 else return 'm2 
          else if 'c1 then return 'm1 else return 'm0,
    'm0 'm1 'm2 'm3 'c0 'c1)
)
    ) *** end when and gate  
    
    ) *** end family
. 


 op splitCirc : -> Protocol .
 eq splitCirc = 
    newfamily ('SendBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily ('RcvdBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily ('Ctrb[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
    newfamily ('CtrbSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   (adv || shares || 1OutOf4OT)          
 .
 
  op pInt0 : -> Protocol .
 eq pInt0 = 
    newfamily ('InShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('n 'm 'i) 
             ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in   
    newfamily ('Share[((bound (N + 2)) (bound K) )]) ('n 'k) 
             ((bound (N + 2)) (bound K) ) : bool in
    restrFinal || splitCirc || simplRestrInitial
 .
 
  op splitCirc1 : -> Protocol .
 eq splitCirc1 = 
    newfamily ('SendBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily ('RcvdBit[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily ('Ctrb[((bound (N + 2))(bound (N + 2))(bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
    newfamily ('CtrbSum[((bound (N + 2)) (bound (N + 2)) (bound K))]) ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   (adv || shares)          
 .   
  
 op pInt1 : -> Protocol .
 eq pInt1 = 
    newfamily ('InShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) ('n 'm 'i) 
             ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in   
    newfamily ('Share[((bound (N + 2)) (bound K) )]) ('n 'k) 
             ((bound (N + 2)) (bound K) ) : bool in
    restrFinal || splitCirc1 || simplRestrInitial
 .
 
endm

smod EXECUTE is
 pr GMWN .
 pr STRATS .
 
 var e1 e2 e3 e4 : Expression . 
 var Sigma : Signature .
 var Delta : ChannelContext .
 var Gamma : TypeContext .
 var I O : Set{CNameBound} .
 var A : Set{BoolTerm} .
 var x y : Qid .
 var pConf : ProtocolConfig .
 var P : Protocol .

*** xor & and are comm and assoc

 rl [comm-xor] : 
    ap 'xor pair(e1, e2) => ap 'xor pair(e2, e1) . 
 
 rl [comm-and] : 
    ap 'and pair(e1, e2) => ap 'and pair(e2, e1) . 
    
 rl [assoc-1-xor] :
    ap 'xor pair(e1, ap 'xor pair(e2, e3)) => 
    ap 'xor pair(ap 'xor pair(e1, e2), e3) .
    
 rl [assoc-2-xor] :
    ap 'xor pair(ap 'xor pair(e1, e2), e3) 
    => 
    ap 'xor pair(e1, ap 'xor pair(e2, e3)) 
    .   
    
 rl [assoc-1-and] :
    ap 'and pair(e1, ap 'and pair(e2, e3)) => 
    ap 'and pair(ap 'and pair(e1, e2), e3) .
    
 rl [assoc-2-and] :
    ap 'and pair(ap 'and pair(e1, e2), e3) 
    => 
    ap 'and pair(e1, ap 'and pair(e2, e3)) 
    .  
    
 *** distrib
 eq ap 'and pair(ap 'xor pair(e1, e2), e3) =
    ap 'xor pair(ap 'and pair(e1, e3), ap 'and pair(e2, e3)) . 
    
 *** xor axioms
 eq ap 'xor pair(e1, e1) = False .
 eq ap 'xor pair(e1, False) = e1 .
 eq ap 'xor pair(False, e2) = e2 .
 
 *** neg axioms
 rl [neg-xor-1] : 
    ap 'neg e1 => ap 'xor pair(e1, True) .
    
 rl [neg-xor-2] : 
    ap 'xor pair(e1, True) => ap 'neg e1 .   
    
 *** and axioms   
 eq ap 'and pair(e1, True) = e1 .
 eq ap 'and pair(e1, False) = False .   
 eq ap 'and pair(True, e2) = e2 .
 eq ap 'and pair(False, e2) = False .
          
 *** flip
  rl [flip-invar-xor-r] : rConfig(Sigma, Delta, Gamma (x : bool),
            y : bool <- samp ('flip < () >) ; 
            return (ap 'xor pair(x, y)), I, A, bool
            )
            => 
            rConfig(Sigma, Delta , Gamma (x : bool),
            samp ('flip < () >), I, A, bool) . 
  
  *** SYM strategies
 *** because only there we have access to current protocol
 
 strat sym1 @ ProtocolConfig .
 sd sym1 := 
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW-NF{sym1} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O, A) := pConf by pConf 
       using (
       SYM[P1:Protocol <- 
        *** was P
        change (fam ('RcvdBit[((bound (N + 2)) (bound (N + 2))(bound K) )]))
        with ( (when ('n <T 'm) -->

           nf(('b : bool <- read ('SendBit['m 'n 'k])) 
    ('xm : bool <- read ('Share['m (fun 'wire0 'k)])) 
    ('xn : bool <- read ('Share['n (fun 'wire0 'k)])) 
    ('ym : bool <- read ('Share['m (fun 'wire1 'k)])) 
     'yn : bool <- read ('Share['n (fun 'wire1 'k)]),  
           return (ap 'xor pair(ap 'xor pair(ap 'and pair('xm, 'yn),
                                             ap 'and pair('xn, 'ym)), 
                           'b)),
           'b 'xm 'ym 'xn 'yn)
 )          
  ;;  
 (
 when ('m <=T 'n) -->
   nf('z : bool <- read ('RcvdBit['n 'm 'k]), return 'z, 'z)
 )         
 )
        in P
       ]{
          auxSym1
        } ***sym
       )
 .
 
 strat auxSym1 @ ProtocolConfig .
 sd auxSym1 := 
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW-NF{auxSym1} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O, A) := pConf by pConf 
       using (
        CONG-COMP-RIGHT[
         Q:Protocol  <- removeOne P (fam ('RcvdBit[((bound (N + 2)) (bound (N + 2))(bound K) )])), 
         P1:Protocol <- keepOne P (fam ('RcvdBit[((bound (N + 2)) (bound (N + 2))(bound K) )]))]{
        CONG-FAMILY-WHENLIST-R[bt:BoolTerm <- ('n <T 'm),
     R2:Reaction <- 
     nf(('b : bool <- read ('SendBit['m 'n 'k])) 
    ('xm : bool <- read ('Share['m (fun 'wire0 'k)])) 
    ('xn : bool <- read ('Share['n (fun 'wire0 'k)])) 
    ('ym : bool <- read ('Share['m (fun 'wire1 'k)])) 
     'yn : bool <- read ('Share['n (fun 'wire1 'k)]),  
           if 'xn then 
          if 'yn then return (ap 'xor pair(ap 'xor pair('xm, 'ym), 'b)) 
                 else return (ap 'xor pair('ym, 'b)) 
               else 
          if 'yn then return (ap 'xor pair('xm, 'b)) 
                 else return 'b,
           'b 'xm 'ym 'xn 'yn)]{ 
    cong-nf[R2:Reaction <- 
   
        if 'xn then 
          if 'yn then return (ap 'xor pair(ap 'xor pair('xm, 'ym), 'b)) 
                 else return (ap 'xor pair('ym, 'b)) 
               else 
          if 'yn then return (ap 'xor pair('xm, 'b)) 
                 else return 'b
     ]{
        if-intro-ext[q:Qid <- 'yn] ; 
        if-intro-ext[q:Qid <- 'xn]
       } *** cong-nf
       } *** cong-whenlist
        } *** cong-comp
       )
  .
   
   
 strat sym2 @ ProtocolConfig .
 sd sym2 := 
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW-NF{sym2} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O, A) := pConf by pConf 
       using (
       SYM[P1:Protocol <- 
        *** was P
        change (fam ('RcvdBit[((bound (N + 2)) (bound (N + 2))(bound K) )]))
        with ( (when ('n <T 'm) -->

           nf(('b : bool <- read ('SendBit['m 'n 'k])) 
    ('xm : bool <- read ('Share['m (fun 'wire0 'k)])) 
    ('xn : bool <- read ('Share['n (fun 'wire0 'k)])) 
    ('ym : bool <- read ('Share['m (fun 'wire1 'k)])) 
     'yn : bool <- read ('Share['n (fun 'wire1 'k)]),  
           return (ap 'xor pair(ap 'xor pair(ap 'and pair('xm, 'yn),
                                             ap 'and pair('xn, 'ym)), 
                           'b)),
           'b 'xm 'ym 'xn 'yn)
 )          
  ;;  
 (
 when ('m <=T 'n) -->
    nf(('b : bool <- read ('SendBit['m 'n 'k])) 
    ('xm : bool <- read ('Share['m (fun 'wire0 'k)])) 
    ('xn : bool <- read ('Share['n (fun 'wire0 'k)])) 
    ('ym : bool <- read ('Share['m (fun 'wire1 'k)])) 
     'yn : bool <- read ('Share['n (fun 'wire1 'k)]),  
           return (ap 'xor pair(ap 'xor pair(ap 'and pair('xm, 'yn),
                                             ap 'and pair('xn, 'ym)), 
                           'b)),
           'b 'xm 'ym 'xn 'yn)
 )         
 )
        in P
       ]{
          auxSym2
        } ***sym
       )
 .
 
 strat auxSym2 @ ProtocolConfig .
 sd auxSym2 := 
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW-NF{auxSym2} 
     : select-branch-family-r[fns:NameWithScripts <- 'RcvdBit,
                              bt:BoolTerm <- ('m <=T 'n)]{
       matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O, A) := pConf by pConf 
       using (
        CONG-COMP-RIGHT[
          Q:Protocol  <- removeTwo P 
                          (fam ('RcvdBit[((bound (N + 2)) (bound (N + 2))(bound K) )])) 
                          (fam ('SendBit[((bound (N + 2)) (bound (N + 2))(bound K) )])), 
          P1:Protocol <- keepTwo P 
                          (fam ('RcvdBit[((bound (N + 2)) (bound (N + 2))(bound K) )])) 
                          (fam ('SendBit[((bound (N + 2)) (bound (N + 2))(bound K) )]))
                       ]{
              ***    idle
               applySelectCaseDiverge( 
                (fam ('SendBit[((bound (N + 2)) (bound (N + 2))(bound K) )])), 
                (fam ('RcvdBit[((bound (N + 2)) (bound (N + 2))(bound K) )])), 
                ('m <=T 'n), 'z, bool)         
                       }
             )          
       }                
             
     .    
     
   strat sym3 @ ProtocolConfig .
 sd sym3 := 
    *** match pConf s.t. startsWithNew pConf
    ***  ? CONG-NEW-NF{sym3} 
    ***  : 
     matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O, A) := pConf by pConf 
       using (
       SYM[P1:Protocol <- 
         addInternalFamily
           'InShareOK
         typed unit
         params ('m 'n 'i)
                ((bound (N + 2))(bound (N + 2))(dependentBound 'I))  
         assigned
          nf('is : bool  <- read ('InShare['m 'n 'i]),
             return (), 'is)
         in (
         addInternalFamily
           'ShareOK
         typed unit
         params ('n 'k)
                ((bound (N + 2))(bound K))  
         assigned
          nf('s : bool  <- read ('Share['n 'k]),
             return (), 's)
         in P
         )        
       ]{
          sugar-newNF
        ; (moveProtocolUnderNewNF !)
        ; (lift-inner-new-nf !)
        ; absorbFamily(fam ('ShareOK[((bound (N + 2))(bound K))]))
        ; absorbFamily(fam ('InShareOK[((bound (N + 2))(bound (N + 2))(dependentBound 'I))]))
        } ***sym
       )
 .                 
  
      
 ************************************************************
 
 strat eliminateOTDivergent @ ProtocolConfig .
 sd eliminateOTDivergent := 
 
           applyDivergeChannel3FamilyBranch(
            fam ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
            fam (('OTMsg-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) , 
            apply 'isSemiHonest 'n, 'om, bool)

         ; applyAllSameCases(
            fam (('OTMsg-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))])
           )
         
         ; applyDivergeChannel3FamilyBranch(
           fam ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
           fam (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) , 
           apply 'isHonest 'n, 'om, unit)
           
         ; applyAllSameCases(
            fam (('OTMsgRcvd-0 ^^ 'ot .. 'adv) 
              [(bound (N + 2) (bound (N + 2)) (bound K))])   
           )

         ; applyDivergeChannel3FamilyBranch(
            fam ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
            fam (('OTMsg-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) , 
            apply 'isSemiHonest 'n, 'om, bool)
            
         ; applyAllSameCases(
            fam (('OTMsg-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))])
           )
         
         ; applyDivergeChannel3FamilyBranch(
           fam ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
           fam (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) , 
           apply 'isHonest 'n, 'om, unit)
           
         ; applyAllSameCases(
            fam (('OTMsgRcvd-1 ^^ 'ot .. 'adv) 
              [(bound (N + 2) (bound (N + 2)) (bound K))])   
           )
         
         ; applyDivergeChannel3FamilyBranch(
            fam ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
            fam (('OTMsg-2 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) , 
            apply 'isSemiHonest 'n, 'om, bool)
            
         ; applyAllSameCases(
            fam (('OTMsg-2 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))])
           )
         
         ; applyDivergeChannel3FamilyBranch(
           fam ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
           fam (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) , 
           apply 'isHonest 'n, 'om, unit)
           
         ; applyAllSameCases(
            fam (('OTMsgRcvd-2 ^^ 'ot .. 'adv) 
              [(bound (N + 2) (bound (N + 2)) (bound K))])   
           )
         
         ; applyDivergeChannel3FamilyBranch(
            fam ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
            fam (('OTMsg-3 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) , 
            apply 'isSemiHonest 'n, 'om, bool)
            
         ; applyAllSameCases(
            fam (('OTMsg-3 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))])
           )
         
         ; applyDivergeChannel3FamilyBranch(
           fam ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
           fam (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) , 
           apply 'isHonest 'n, 'om, unit)
           
         ; applyAllSameCases(
            fam (('OTMsgRcvd-3 ^^ 'ot .. 'adv) 
              [(bound (N + 2) (bound (N + 2)) (bound K))])   
           )
                                  
         ; alpha-family-three[
           fns:NameWithScripts <- 'OTChc-0, 
           *** TODO: if this does not work, add the bounds!
           q1:Qid <- 'm,
           q2:Qid <- 'n,
           q3:Qid <- 'k,
           q4:Qid <- 'n,
           q5:Qid <- 'm,
           q6:Qid <- 'k]  
           
          ; applyDivergeChannel3FamilyBranch(
             fam ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
             fam (('OTChc-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]), 
             apply 'isSemiHonest 'm, 'oc, bool
            )
            
          ; applyAllSameCases(
             fam (('OTChc-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))])
            )
           
          ; applyDivergeChannel3FamilyBranch(
             fam ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
             fam (('OTChcRcvd-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]), 
              apply 'isHonest 'm, 'oc, unit)
              
          ; applyAllSameCases(
              fam (('OTChcRcvd-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))])
            )
          ; alpha-family-three[
           fns:NameWithScripts <- 'OTChc-0, 
           q1:Qid <- 'n,
           q2:Qid <- 'm,
           q3:Qid <- 'k,
           q4:Qid <- 'm,
           q5:Qid <- 'n,
           q6:Qid <- 'k] 
           
          ; alpha-family-three[
           fns:NameWithScripts <- 'OTChc-1, 
           q1:Qid <- 'm,
           q2:Qid <- 'n,
           q3:Qid <- 'k,
           q4:Qid <- 'n,
           q5:Qid <- 'm,
           q6:Qid <- 'k]  
        
          ; applyDivergeChannel3FamilyBranch(
             fam ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
             fam (('OTChc-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]), 
             apply 'isSemiHonest 'm, 'oc, bool
            )
            
          ; applyAllSameCases(
             fam (('OTChc-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))])
            )
          
          ; applyDivergeChannel3FamilyBranch(
             fam ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
             fam (('OTChcRcvd-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]), 
              apply 'isHonest 'm, 'oc, unit)
              
          ; applyAllSameCases(
              fam (('OTChcRcvd-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))])
            )
          
          ; alpha-family-three[
           fns:NameWithScripts <- 'OTChc-1, 
           q1:Qid <- 'n,
           q2:Qid <- 'm,
           q3:Qid <- 'k,
           q4:Qid <- 'm,
           q5:Qid <- 'n,
           q6:Qid <- 'k]  
              
          ; applySubstDivergeFamily(
             fam ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
             fam ('OTOut[(bound (N + 2) (bound (N + 2)) (bound K))]), 'o, bool)
       
          ; applyDivergeChannel3FamilyBranch(
             fam ('OTOut[(bound (N + 2) (bound (N + 2)) (bound K))]), 
             fam (('OTOut ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]), 
             apply 'isSemiHonest 'm, 'out, bool)
          ; applyAllSameCases(
             fam (('OTOut ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))])
            )  
               
 .    
          
endsm  

set trace off .

***( KEEP
srew [1] pConfig(sig,
             (fam (('InRcvd ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) :: unit) 
             (fam (('InShare$-Sum ^^ 'party .. 'adv)[(bound (N + 1))((bound (N + 2))(dependentBound 'I))]) :: bool)
             (fam (('InShare$ ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]):: bool)
             (fam (('InShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool)
             (fam (('In ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) :: bool)  
             (fam (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit)
             (fam (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam ('Out[((bound (N + 2))(bound K))]) :: bool)    
             (fam (('OutShareSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)
             (fam (('Out ^^ 'party .. 'adv)[((bound (N + 2))(bound K))]) :: bool)  
             (fam (('RcvdInShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool)  
             (fam (('RcvdOutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('SendInShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool) 
             (fam (('SendOutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)  
             (fam (('Share ^^ 'party .. 'adv)[((bound (N + 2))(bound K))]) :: bool)
             (fam (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('SendBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)
             (fam (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)  
             (fam ('In[(bound (N + 2)) (dependentBound 'I)]) :: bool)
             ,
             real,
             fam ('In[(bound (N + 2)) (dependentBound 'I)]), 
             getOutputs(real),
             genA) 
using  
       sugar-newNF
       ; (moveProtocolUnderNewNF !)
       ; (lift-inner-new-nf !)

       ; applyAddToGroupCases(
          fam (('OTChc-0 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]), 
          fam ('Circuit[(bound (N + 2)) (bound K)])
         ) 
       ; applyAddToGroupCases(
          fam (('OTChc-1 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]), 
          fam ('Circuit[(bound (N + 2)) (bound K)])
         ) 
       ; applyAddToGroupCases(
          fam (('OTChcRcvd-0 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]), 
          fam ('Circuit[(bound (N + 2)) (bound K)])
         )
       ; applyAddToGroupCases(
          fam (('OTChcRcvd-1 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]), 
          fam ('Circuit[(bound (N + 2)) (bound K)])
         )
         
       ; applyAddToGroupCases(
          fam (('OTMsg-0 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]), 
          fam ('Circuit[(bound (N + 2)) (bound K)])
         )
       ; applyAddToGroupCases(
          fam (('OTMsg-1 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]), 
          fam ('Circuit[(bound (N + 2)) (bound K)])
         )
       ; applyAddToGroupCases(
          fam (('OTMsg-2 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]), 
          fam ('Circuit[(bound (N + 2)) (bound K)])
        )
       ; applyAddToGroupCases(
          fam (('OTMsg-3 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]), 
          fam ('Circuit[(bound (N + 2)) (bound K)])
       )
       ; applyAddToGroupCases(
          fam (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]), 
          fam ('Circuit[(bound (N + 2)) (bound K)])
         )
       ; applyAddToGroupCases(
          fam (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]), 
          fam ('Circuit[(bound (N + 2)) (bound K)])
         )
       ; applyAddToGroupCases(
          fam (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]), 
          fam ('Circuit[(bound (N + 2)) (bound K)])
        )
       ; applyAddToGroupCases(
          fam (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]), 
          fam ('Circuit[(bound (N + 2)) (bound K)])
       ) 
       
       ; applyAddToGroupCases(
          fam ('OTOut[(bound (N + 2)) (bound (N + 2)) (bound K)]), 
          fam ('Circuit[(bound (N + 2)) (bound K)])
       )  
       
       ; applyAddToGroupCases(
          fam (('OTOut ^^ 'ot .. 'adv)[(bound (N + 2)) (bound (N + 2)) (bound K)]), 
          fam ('Circuit[(bound (N + 2)) (bound K)])
       ) 
       *** restructure the real protocol 10.4     
       ; SYM[P1:Protocol <- restr]{
          sugar-newNF
        ; moveNewToFront
        ; reorder-newNF[ql2:List{CNameBound} <-
           (fam ('SendInShare[(bound (N + 2)) (bound (N + 2)) (dependentBound 'I)]) )
 (fam ('OTMsg-0[(bound (N + 2)) (bound (N + 2)) (bound K)]) )
 (fam ('OTMsg-1[(bound (N + 2)) (bound (N + 2)) (bound K)]) )
 (fam ('OTMsg-2[(bound (N + 2)) (bound (N + 2)) (bound K)]) )
 (fam ('OTMsg-3[(bound (N + 2)) (bound (N + 2)) (bound K)]) )
 (fam ('OTChc-0[(bound (N + 2)) (bound (N + 2)) (bound K)]) )
 (fam ('OTChc-1[(bound (N + 2)) (bound (N + 2)) (bound K)]) )
 (fam ('OTOut[(bound (N + 2)) (bound (N + 2)) (bound K)]) )
 (fam ('SendOutShare[(bound (N + 2)) (bound (N + 2)) (bound K)]) )
 (fam ('InShare[(bound (N + 2)) (bound (N + 2)) (dependentBound 'I)]) )
 (fam ('Share[(bound (N + 2)) (bound K)]) )
 (fam ('InShare$[(bound (N + 2)) (bound (N + 2)) (dependentBound 'I)]) )
 (fam ('InShare$-Sum[(bound (N + 1)) (bound (N + 2)) (dependentBound 'I)]) )
 (fam ('OutShare[(bound (N + 2)) (bound (N + 2)) (bound K)]) )
 (fam ('OutShareSum[(bound (N + 2)) (bound (N + 2)) (bound K)]) )
 (fam ('SendBit[(bound (N + 2)) (bound (N + 2)) (bound K)]) )
 (fam ('RcvdBit[(bound (N + 2)) (bound (N + 2)) (bound K)]) )
 (fam ('Ctrb[(bound (N + 2)) (bound (N + 2)) (bound K)]) )
 (fam ('CtrbSum[(bound (N + 2)) (bound (N + 2)) (bound K)]) )
        ]
       }
            
     
. 
)

set trace off .

***( from restr
*** KEEP, takes very long!
srew [1] pConfig(sig,
             (fam (('InRcvd ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) :: unit) 
             (fam (('InShare$-Sum ^^ 'party .. 'adv)[(bound (N + 1))((bound (N + 2))(dependentBound 'I))]) :: bool)
             (fam (('InShare$ ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]):: bool)
             (fam (('InShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool)
             (fam (('In ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) :: bool)  
             (fam (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit)
             (fam (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam ('Out[((bound (N + 2))(bound K))]) :: bool)    
             (fam (('OutShareSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)
             (fam (('Out ^^ 'party .. 'adv)[((bound (N + 2))(bound K))]) :: bool)  
             (fam (('RcvdInShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool)  
             (fam (('RcvdOutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('SendInShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool) 
             (fam (('SendOutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)  
             (fam (('Share ^^ 'party .. 'adv)[((bound (N + 2))(bound K))]) :: bool)
             (fam (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('SendBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)
             (fam (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)  
             (fam ('In[(bound (N + 2)) (dependentBound 'I)]) :: bool)
             ,
             restr,
             fam ('In[(bound (N + 2)) (dependentBound 'I)]), 
             getOutputs(real),
             genA) 
using    sugar-newNF
       ; (moveProtocolUnderNewNF !)
       ; (lift-inner-new-nf !)
       
       
       
       *** 10.4.1 Simplifying The Real Protocol: Initial Phase
       
       ; applySubstFamily3IdxCase(
          fam ('SendInShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]), 
          fam (('SendInShare ^^ 'party .. 'adv)
            [((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]), 
          'm, 'n, 'i, 
         nf('in : bool <- read ('InShare$['m 'n 'i]), 
                              return 'in, 'in),
         nf('in : bool <- read ('InShare$['m 'n 'i]), 
                              return 'in, 'in),
         apply 'isSemiHonest 'n)
       
       ; alpha-family-three[
           fns:NameWithScripts <- 'SendInShare, 
           q1:Qid <- 'm,
           q2:Qid <- 'n,
           q3:Qid <- 'i,
           q4:Qid <- 'n,
           q5:Qid <- 'm,
           q6:Qid <- 'i]
       
       ; applySubstFamily3IdxCase(
           fam ('SendInShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]),
           fam (('RcvdInShare ^^ 'party .. 'adv)
            [((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]), 
           'n, 'm, 'i, 
         nf('in : bool <- read ('InShare$['n 'm 'i]), 
                              return 'in, 'in),
         nf('in : bool <- read ('InShare$['n 'm 'i]), 
                              return 'in, 'in),
         apply 'isSemiHonest 'n)    
        
       ; substNFFamiliesThree(
           fam ('SendInShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]), 
           fam ('InShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]), 
                            nf('in : bool <- read ('InShare$['n 'm 'i]), 
                               return 'in, 'in)
                           ) 

       ; absorbFamily(
          fam ('SendInShare[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))])
         ) 
                                                  
         
       *** 10.4.2 Simplifying The Real Protocol: Inductive Phase
        
       ; select-branch-family-p[bt:BoolTerm <- apply 'isInputGate 'k, 
                                fns:NameWithScripts <- 'Circuit]{
           eliminateOTDivergent          
         } 
               
       ; select-branch-family-p[bt:BoolTerm <- apply 'isNotGate 'k]{
           eliminateOTDivergent          
         }  
       ; select-branch-family-p[bt:BoolTerm <- apply 'isXorGate 'k]{
           eliminateOTDivergent          
         } 
                   
       ; select-branch-family-p[bt:BoolTerm <- apply 'isAndGate 'k]{
        
           substDivergeJoinCases(
            fam ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
            fam (('OTMsg-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) , 
             nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return 'b, 'b 'x 'y),
                nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return 'b, 'b 'x 'y)
          )
         
        ;
          substDivergeJoinCases(
            fam ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
            fam (('OTMsg-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) ,  
             nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return (ap 'xor pair('x, 'b)), 
                'b 'x 'y),
            nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return (ap 'xor pair('x, 'b)), 
                'b 'x 'y)    
          ) 
            ;
          substDivergeJoinCases(
             fam ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
            fam (('OTMsg-2 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) ,   
             nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return (ap 'xor pair('y, 'b)), 
                'b 'x 'y),
             nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return (ap 'xor pair('y, 'b)), 
                'b 'x 'y)   
          )  
         ;
          substDivergeJoinCases(
            fam ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
            fam (('OTMsg-3 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) ,   
             nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return (ap 'xor pair(ap 'xor pair('x, 'y), 'b)), 
                'b 'x 'y),
             nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return (ap 'xor pair(ap 'xor pair('x, 'y), 'b)), 
                'b 'x 'y)   
          )
        ;
         substDivergeJoinCases(
            fam ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
            fam (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) , 
             nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return (), 'b 'x 'y),
             nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return 'b, 'b 'x 'y)   
          )
       ;
          substDivergeJoinCases(
            fam ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
            fam (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) , 
             nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return (), 
                'b 'x 'y),
             nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return (ap 'xor pair('x, 'b)), 
                'b 'x 'y)   
          )  
           ;
          substDivergeJoinCases(
             fam ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
            fam (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) ,
             nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return (), 
                'b 'x 'y),
             nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return (ap 'xor pair('y, 'b)), 
                'b 'x 'y)   
          )
          ;
          substDivergeJoinCases( 
             fam ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
             fam (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) ,
             nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return (), 
                'b 'x 'y),
             nf(('b : bool <- read ('SendBit['n 'm 'k])) 
                ('x : bool <- read ('Share['n (fun 'wire0 'k)])) 
                ('y : bool <- read ('Share['n (fun 'wire1 'k)])), 
                return (ap 'xor pair(ap 'xor pair('x, 'y), 'b)), 
                'b 'x 'y)   
          ) 
          ;
          substDivergeJoinCases(
             fam ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
             fam (('OTChc-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) ,
             nf('x : bool <- read ('Share['m (fun 'wire0 'k)]), 
                return 'x, 'x),
             nf('x : bool <- read ('Share['m (fun 'wire0 'k)]), 
                return 'x, 'x)  
          )
          ;
          substDivergeJoinCases(
             fam ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
             fam (('OTChc-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) ,
             nf('x : bool <- read ('Share['m (fun 'wire1 'k)]), 
                return 'x, 'x),
             nf('x : bool <- read ('Share['m (fun 'wire1 'k)]), 
                return 'x, 'x)  
          )
          ;
          substDivergeJoinCases(
             fam ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]) , 
             fam (('OTChcRcvd-0 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) ,
             nf('x : bool <- read ('Share['m (fun 'wire0 'k)]), 
                return (), 'x),
             nf('x : bool <- read ('Share['m (fun 'wire0 'k)]), 
                return 'x, 'x)  
          )
          ;
          substDivergeJoinCases(
             fam ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
             fam (('OTChcRcvd-1 ^^ 'ot .. 'adv)[(bound (N + 2) (bound (N + 2)) (bound K))]) , 
             nf('x : bool <- read ('Share['m (fun 'wire1 'k)]), 
                return (), 'x),
             nf('x : bool <- read ('Share['m (fun 'wire1 'k)]), 
                return 'x, 'x)  
          )
           
          ; alpha-family-three[
           fns:NameWithScripts <- 'RcvdBit, 
           q1:Qid <- 'n,
           q2:Qid <- 'm,
           q3:Qid <- 'k,
           q4:Qid <- 'm,
           q5:Qid <- 'n,
           q6:Qid <- 'k] 
           
          ; CONG-NEW-NF{
             select-branch-family-r[bt:BoolTerm <- apply 'isSemiHonest 'm, 
                                    fns:NameWithScripts <- 'OTOut ^^ 'ot .. 'adv]{
                  substNFReadRevFamilies(
                    fam ('OTOut[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
                    fam (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
                    fam ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))])
                  )   
             }
           }       
            
          ; alpha-family-three[
           fns:NameWithScripts <- 'RcvdBit, 
           q1:Qid <- 'm,
           q2:Qid <- 'n,
           q3:Qid <- 'k,
           q4:Qid <- 'n,
           q5:Qid <- 'm,
           q6:Qid <- 'k]  
            
          ; substNFFamiliesThree(
             fam ('OTOut[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
             fam ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
             nf(('c0 : bool <- read ('OTChc-0['m 'n 'k])) 
                ('c1 : bool <- read ('OTChc-1['m 'n 'k])) 
                ('m0 : bool <- read ('OTMsg-0['m 'n 'k])) 
                ('m1 : bool <- read ('OTMsg-1['m 'n 'k])) 
                ('m2 : bool <- read ('OTMsg-2['m 'n 'k]))  
                 'm3 : bool <- read ('OTMsg-3['m 'n 'k]), 
                if 'c0 then if 'c1 then return 'm3 else return 'm2 
                      else  if 'c1 then return 'm1 else return 'm0, 
                'm0 'm1 'm2 'm3 'c0 'c1)
          ) 
          ; applySubstOrDiverge(
            fam ('OTMsg-0[((bound (N + 2)) (bound (N + 2)) (bound K))]),
            fam ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
            'z, 
            nf(('b : bool <- read ('SendBit['m 'n 'k])) 
               ('x : bool <- read ('Share['m (fun 'wire0 'k)])) 
                'y : bool <- read ('Share['m (fun 'wire1 'k)]), 
                return 'b, 'b 'x 'y)
            )
            
          
          ; applyGenSameCasesSubstFirstBranch(
            fam ('OTMsg-1[((bound (N + 2)) (bound (N + 2)) (bound K))]),
            fam ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
            nf(('b : bool <- read ('SendBit['m 'n 'k])) 
               ('x : bool <- read ('Share['m (fun 'wire0 'k)])) 
                'y : bool <- read ('Share['m (fun 'wire1 'k)]), 
                return (ap 'xor pair('x, 'b)), 
                'b 'x 'y)
             )
            

           ; applyGenSameCasesSubstFirstBranch(
            fam ('OTMsg-2[((bound (N + 2)) (bound (N + 2)) (bound K))]),
            fam ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
            nf(('b : bool <- read ('SendBit['m 'n 'k])) 
               ('x : bool <- read ('Share['m (fun 'wire0 'k)])) 
                'y : bool <- read ('Share['m (fun 'wire1 'k)]), 
                return (ap 'xor pair('y, 'b)), 
                'b  'x 'y)
             )  
            ; applyGenSameCasesSubstFirstBranch(
            fam ('OTMsg-3[((bound (N + 2)) (bound (N + 2)) (bound K))]),
            fam ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
            nf(('b : bool <- read ('SendBit['m 'n 'k])) 
               ('x : bool <- read ('Share['m (fun 'wire0 'k)])) 
                'y : bool <- read ('Share['m (fun 'wire1 'k)]), 
                return (ap 'xor pair(ap 'xor pair('x, 'y), 'b)), 
                'b 'x 'y)
             )
                        
             ; applyAlphaBranchCond(
                 fam ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
                 'x, 'xm, when ('n <T 'm) )  
             ; applyAlphaBranchCond(
                 fam ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
                 'y, 'ym, when ('n <T 'm) ) 
            
             ; applyGenSameCasesSubstFirstBranch(
            fam ('OTChc-0[((bound (N + 2)) (bound (N + 2)) (bound K))]),
            fam ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
            nf('x : bool <- read ('Share['n (fun 'wire0 'k)]), 
            return 'x, 'x)
             ) 
             ; applyAlphaBranchCond(
             fam ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
             'x, 'xn, when ('n <T 'm) 
             )  
             ; applyGenSameCasesSubstFirstBranch(
            fam ('OTChc-1[((bound (N + 2)) (bound (N + 2)) (bound K))]),
            fam ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
            nf('x : bool <- read ('Share['n (fun 'wire1 'k)]), 
            return 'x, 'x)
             )
              ; applyAlphaBranchCond(
                fam ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]), 
                'x, 'yn, when ('n <T 'm) )
                
              ; sym1 *** first branch of RcvdBit
              ; sym2 *** second branch of RcvdBit
              *** now we can merge the two branches
              ; applyAllSameCases(fam ('RcvdBit[((bound (N + 2)) (bound (N + 2)) (bound K))]))
              
           
         }   
         
         
         
         *** now we need to restructure Circuit in Adv + Shares + 1OutOf4OT
         
         ; applyNewCombine(fam ('Circuit[(bound (N + 2)) (bound K)]))
         ***(
         *** ; applyGetChannel('OTChc-1) 
         
                 
         ; SYM[P1:Protocol <- pInt0]{
               sugar-newNF
       ; (moveProtocolUnderNewNF !)
       ; (lift-inner-new-nf !)
       ; applyNewCombine('Adv)
       ; applyNewCombine('Shares)
       ; applyNewCombine('1OutOf4OT)
       ; reorder-newNF[ql2:CNameList <- 
         'InShare :: 'Share :: 'InShare$ :: 'InShare$-Sum :: 'SendOutShare :: 
         'OutShare :: 'OutShareSum :: 'OTMsg-0 :: 'OTMsg-1 :: 'OTMsg-2 :: 
         'OTMsg-3 :: 'OTChc-0 :: 'OTChc-1 :: 'OTOut :: 'SendBit :: 
         'RcvdBit :: 'Ctrb :: 'CtrbSum ]
              }

          ; sugar-newNF
       ; (moveProtocolUnderNewNF !)
       ; (lift-inner-new-nf !)
       ; applyNewCombine('Adv)
       ; applyNewCombine('Shares)
       ; applyNewCombine('1OutOf4OT)
       
       ; absorbFamily('OTOut)
       ; absorbFamily('OTMsg-0)
       ; absorbFamily('OTMsg-1)
       ; absorbFamily('OTMsg-2)
       ; absorbFamily('OTMsg-3)
       ; absorbFamily('OTChc-0)
       ; absorbFamily('OTChc-1) 
       
       ; SYM[P1:Protocol <- pInt1]{
               sugar-newNF
       ; (moveProtocolUnderNewNF !)
       ; (lift-inner-new-nf !)
       ; applyNewCombine('Adv)
       ; applyNewCombine('Shares)
       }
       
       ; sugar-newNF
       ; (moveProtocolUnderNewNF !)
       ; (lift-inner-new-nf !)
               
        *** 10.4.3 Simplifying The Real Protocol: Final Phase 
          
        ; substDivergeJoinCases('SendOutShare, 'SendOutShare ^^ 'party .. 'adv,  
            nf('s : bool <- read ('Share['n 'k]), return 's, 's),
            nf('s : bool <- read ('Share['n 'k]), return 's, 's)
          )

        ; alpha-family-three[
           fns:NameWithScripts <- 'SendOutShare, 
           q1:Qid <- 'm,
           q2:Qid <- 'n,
           q3:Qid <- 'k,
           q4:Qid <- 'n,
           q5:Qid <- 'm,
           q6:Qid <- 'k]   
        ; substDivergeJoinCases('SendOutShare, 'RcvdOutShare ^^ 'party .. 'adv,  
            nf('s : bool <- read ('Share['m 'k]), return 's, 's),
            nf('s : bool <- read ('Share['m 'k]), return 's, 's)
          ) 
        ***
        ; applySubstOrDiverge('SendOutShare, 'OutShare, 'z, 
            nf('s : bool <- read ('Share['m 'k]), return 's, 's)    
          )
        *** at this point 'SendOutShare are unused and can be eliminated
        ; absorbFamily('SendOutShare)   
        
        *** 10.4.4 timing of shares 1
        
        *** add two new internal channels InShareOK and ShareOK
         ; sym3
        *** ; applyGetChannel('OTChcRcvd-0)
   )      
.
)

***(KEEP: this is the sym proof from pInt0 to the result of rewriting restr
srew [1] pConfig(sig,
             (fam (('InRcvd ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) :: unit) 
             (fam (('InShare$-Sum ^^ 'party .. 'adv)[(bound (N + 1))((bound (N + 2))(dependentBound 'I))]) :: bool)
             (fam (('InShare$ ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]):: bool)
             (fam (('InShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool)
             (fam (('In ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) :: bool)  
             (fam (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit)
             (fam (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam ('Out[((bound (N + 2))(bound K))]) :: bool)    
             (fam (('OutShareSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)
             (fam (('Out ^^ 'party .. 'adv)[((bound (N + 2))(bound K))]) :: bool)  
             (fam (('RcvdInShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool)  
             (fam (('RcvdOutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('SendInShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool) 
             (fam (('SendOutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)  
             (fam (('Share ^^ 'party .. 'adv)[((bound (N + 2))(bound K))]) :: bool)
             (fam (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('SendBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)
             (fam (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)  
             (fam ('In[(bound (N + 2)) (dependentBound 'I)]) :: bool)
             ,
             pInt0,
             fam ('In[(bound (N + 2)) (dependentBound 'I)]), 
             getOutputs(real),
             genA) 
using sugar-newNF
       ; (moveProtocolUnderNewNF !)
       ; (lift-inner-new-nf !)
       ; applyNewCombine(fam ('Adv[bound K]))
       ; applyNewCombine(fam ('Shares[bound K]))
       ; applyNewCombine(fam ('1OutOf4OT[bound K]))
       ; reorder-newNF[ql2:List{CNameBound} <- 
         fam ('InShare[((bound (N + 2)) (bound (N + 2))(dependentBound 'I) )])
fam ('Share[( (bound (N + 2)) (bound K) )])
fam ('InShare$[((bound (N + 2)) (bound (N + 2))(dependentBound 'I) )])
fam ('InShare$-Sum[bound (N + 1) bound (N + 2) dependentBound 'I])
fam ('SendOutShare[((bound (N + 2)) (bound (N + 2))(bound K) )])
fam ('OutShare[((bound (N + 2)) (bound (N + 2))(bound K) )])
fam ('OutShareSum[((bound (N + 2)) (bound (N + 2))(bound K) )])
fam ('OTMsg-0[((bound (N + 2)) (bound (N + 2))(bound K) )])
fam ('OTMsg-1[((bound (N + 2)) (bound (N + 2))(bound K) )])
fam ('OTMsg-2[((bound (N + 2)) (bound (N + 2))(bound K) )])
fam ('OTMsg-3[((bound (N + 2)) (bound (N + 2))(bound K) )])
fam ('OTChc-0[((bound (N + 2)) (bound (N + 2))(bound K) )])
fam ('OTChc-1[((bound (N + 2)) (bound (N + 2))(bound K) )])
fam ('OTOut[((bound (N + 2)) (bound (N + 2))(bound K) )])
fam ('SendBit[((bound (N + 2)) (bound (N + 2))(bound K) )])
fam ('RcvdBit[((bound (N + 2)) (bound (N + 2))(bound K) )])
fam ('Ctrb[((bound (N + 2)) (bound (N + 2))(bound K) )])
fam ('CtrbSum[((bound (N + 2)) (bound (N + 2))(bound K) )])
] .
)

***( KEEP, from pInt0 to pInt1
srew [1] pConfig(sig,
             (fam (('InRcvd ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) :: unit) 
             (fam (('InShare$-Sum ^^ 'party .. 'adv)[(bound (N + 1))((bound (N + 2))(dependentBound 'I))]) :: bool)
             (fam (('InShare$ ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]):: bool)
             (fam (('InShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool)
             (fam (('In ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) :: bool)  
             (fam (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit)
             (fam (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam ('Out[((bound (N + 2))(bound K))]) :: bool)    
             (fam (('OutShareSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)
             (fam (('Out ^^ 'party .. 'adv)[((bound (N + 2))(bound K))]) :: bool)  
             (fam (('RcvdInShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool)  
             (fam (('RcvdOutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('SendInShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool) 
             (fam (('SendOutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)  
             (fam (('Share ^^ 'party .. 'adv)[((bound (N + 2))(bound K))]) :: bool)
             (fam (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('SendBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)
             (fam (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)  
             (fam ('In[(bound (N + 2)) (dependentBound 'I)]) :: bool)
             ,
             pInt0,
             fam ('In[(bound (N + 2)) (dependentBound 'I)]), 
             getOutputs(real),
             genA) 
using sugar-newNF
       ; (moveProtocolUnderNewNF !)
       ; (lift-inner-new-nf !)

       ; applyNewCombine(fam ('Adv[bound K]))
                
       ; applyNewCombine(fam ('Shares[bound K]))
       ; applyNewCombine(fam ('1OutOf4OT[bound K]))
    
       ; absorbFamily(fam ('OTOut[((bound (N + 2)) (bound (N + 2))(bound K) )]))
           
       ; absorbFamily(fam ('OTMsg-0[((bound (N + 2)) (bound (N + 2))(bound K) )]))
       ; absorbFamily(fam ('OTMsg-1[((bound (N + 2)) (bound (N + 2))(bound K) )]))
             
       ; absorbFamily(fam ('OTMsg-2[((bound (N + 2)) (bound (N + 2))(bound K) )]))
       ; absorbFamily(fam ('OTMsg-3[((bound (N + 2)) (bound (N + 2))(bound K) )]))

       ; absorbFamily(fam ('OTChc-0[((bound (N + 2)) (bound (N + 2))(bound K) )]))
       ; absorbFamily(fam ('OTChc-1[((bound (N + 2)) (bound (N + 2))(bound K) )]))

       ; SYM[P1:Protocol <- pInt1]{
               sugar-newNF
       ; moveNewToFront
       ; applyNewCombine(fam ('Adv[bound K]))
       ; applyNewCombine(fam ('Shares[bound K]))
       }     
.
)

*** from pInt1
srew [1] pConfig(sig,
             (fam (('InRcvd ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) :: unit) 
             (fam (('InShare$-Sum ^^ 'party .. 'adv)[(bound (N + 1))((bound (N + 2))(dependentBound 'I))]) :: bool)
             (fam (('InShare$ ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]):: bool)
             (fam (('InShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool)
             (fam (('In ^^ 'party .. 'adv)[((bound (N + 2))(dependentBound 'I))]) :: bool)  
             (fam (('OTChc-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTChc-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTChcRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTChcRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsg-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsg-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OTMsgRcvd-0 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit)
             (fam (('OTMsgRcvd-1 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsgRcvd-2 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTMsgRcvd-3 ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: unit) 
             (fam (('OTOut ^^ 'ot .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam ('Out[((bound (N + 2))(bound K))]) :: bool)    
             (fam (('OutShareSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('OutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)
             (fam (('Out ^^ 'party .. 'adv)[((bound (N + 2))(bound K))]) :: bool)  
             (fam (('RcvdInShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool)  
             (fam (('RcvdOutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('SendInShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2)) (dependentBound 'I))]) :: bool) 
             (fam (('SendOutShare ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)  
             (fam (('Share ^^ 'party .. 'adv)[((bound (N + 2))(bound K))]) :: bool)
             (fam (('Ctrb ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('RcvdBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool) 
             (fam (('SendBit ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)
             (fam (('CtrbSum ^^ 'party .. 'adv)[((bound (N + 2)) (bound (N + 2))(bound K) )]) :: bool)  
             (fam ('In[(bound (N + 2)) (dependentBound 'I)]) :: bool)
             ,
             pInt1,
             fam ('In[(bound (N + 2)) (dependentBound 'I)]), 
             getOutputs(real),
             genA) 
using   sugar-newNF
      ; moveNewToFront
                    
        *** 10.4.3 Simplifying The Real Protocol: Final Phase 
          
        ; substDivergeJoinCases(
             fam ('SendOutShare[bound (N + 2) bound (N + 2) bound K]) , 
            fam (('SendOutShare ^^ 'party .. 'adv)[bound (N + 2) bound (N + 2) bound K]) ,  
            nf('s : bool <- read ('Share['n 'k]), return 's, 's),
            nf('s : bool <- read ('Share['n 'k]), return 's, 's)
          )
          
        ; alpha-family-three[
           fns:NameWithScripts <- 'SendOutShare, 
           q1:Qid <- 'm,
           q2:Qid <- 'n,
           q3:Qid <- 'k,
           q4:Qid <- 'n,
           q5:Qid <- 'm,
           q6:Qid <- 'k]   
          
        ; substDivergeJoinCases(
            fam ('SendOutShare[bound (N + 2) bound (N + 2) bound K]) , 
            fam (('RcvdOutShare ^^ 'party .. 'adv)[bound (N + 2) bound (N + 2) bound K]) ,   
            nf('s : bool <- read ('Share['m 'k]), return 's, 's),
            nf('s : bool <- read ('Share['m 'k]), return 's, 's)
          ) 
        ***
        ; applySubstOrDiverge(
            fam ('SendOutShare[bound (N + 2) bound (N + 2) bound K]),
            fam ('OutShare[bound (N + 2) bound (N + 2) bound K]),            
            'z, 
            nf('s : bool <- read ('Share['m 'k]), return 's, 's)    
          )
        *** at this point 'SendOutShare are unused and can be eliminated
        ; absorbFamily(fam ('SendOutShare[bound (N + 2) bound (N + 2) bound K]))   
        
        ***( 10.4.4 timing of shares 1
        
        *** add two new internal channels InShareOK and ShareOK
         ; sym3
        *** ; applyGetChannel('OTChcRcvd-0)
        )
.
         
