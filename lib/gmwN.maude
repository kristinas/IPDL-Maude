***( IPDL

  Copyright : (C) 2022-23, Kristina Sojakova, Mihai Codescu
  License   : GNU General Public License v3.0 or later (GPL-3.0-or-later)
  Authors   : Mihai Codescu <mscodescu@gmail.com>
              Kristina Sojakova <sojakova.kristina@gmail.com>

Multi-Party GMW Protocol
See Sec. 9 in doc/case-studies.pdf

)

load ../src/strategies

mod GMWN is
 including APPROX-EQUALITY .
 protecting LIST{NatPairs} .
 
 op delta : -> ChannelContext .
 eq delta = 
    ('InRcvd_party_adv @ (N + 2) 'I :: unit) 
           ('InShareGen-Sum_party_adv @ (N + 1) (N + 2) 'I :: bool)
           ('InShareGen_party_adv @ (N + 2) (N + 2) 'I :: bool)
           ('InShare_party_adv @ (N + 2) (N + 2) 'I :: bool)
           ('In_party_adv @ (N + 2) 'I :: bool)  
           ('OTChoice-0_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTChoice-1_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTChoiceRcvd-0_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTChoiceRcvd-1_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTMsg-0_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsg-1_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsg-2_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsg-3_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsgRcvd-0_ot_adv @ (N + 2) (N + 2) K :: unit)
           ('OTMsgRcvd-1_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTMsgRcvd-2_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTMsgRcvd-3_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTOut_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('Out @ (N + 2) K :: bool)    
           ('OutShareSum_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('OutShare_party_adv @ (N + 2) (N + 2) K :: bool)
           ('Out_party_adv @ (N + 2) K :: bool)  
           ('RcvdInShare_party_adv @ (N + 2) (N + 2) 'I :: bool)  
           ('RcvdOutShare_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('SendInShare_party_adv @ (N + 2) (N + 2) 'I :: bool) 
           ('SendOutShare_party_adv @ (N + 2) (N + 2) K :: bool)  
           ('Share_party_adv @ (N + 2) K :: bool)
           ('Bit_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('RcvdBit_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('SendBit_party_adv @ (N + 2) (N + 2) K :: bool)
           ('BitSum_party_adv @ (N + 2) (N + 2) K :: bool)  
           ('In @ (N + 2) 'I :: bool)
   .        

 op sumF : -> SigElem .
 eq sumF = 'xor : (bool * bool) ~> bool .
 *** xor is +
 
 op mulF : -> SigElem .
 eq mulF = 'and : (bool * bool) ~> bool .
 *** and is *
 
 op negF : -> SigElem .
 eq negF = 'neg : bool ~> bool .
 
 op flipF : -> SigElem .
 eq flipF = 'flip : unit ~>> bool .
 
 op sig : -> Signature .
 eq sig = sumF mulF negF flipF .
 
 var i j l k n : Nat .
 
 *** global parameters
 
 op N : -> Nat . 
 
 op K : -> Nat .
 
 *** for each party p, I(p) is the number of inputs for p
 op I : Nat -> Nat . 
 
 op C : -> Circuit . *** the circuit acting as parameter 
 
 
 *** gates and circuits
 
 sort Gate .
 
 op input-gate : Nat Nat -> Gate [ctor] . *** first nat is the party
 op not-gate : Nat -> Gate [ctor] .
 op xor-gate : Nat Nat -> Gate [ctor] .
 op and-gate : Nat Nat -> Gate [ctor] .
 
 sort Circuit . *** list of gates
 subsort Gate < Circuit .
 op emptyCircuit : -> Circuit [ctor] .
 op __ : Circuit Circuit -> Circuit [ctor assoc id: emptyCircuit] .

 op wellFormed : Circuit Nat -> Bool .
 
 var circuit : Circuit .

 eq wellFormed(emptyCircuit, 0) = true .
 ceq wellFormed(circuit input-gate(i, j), s(n)) = true 
  if wellFormed(circuit, n) /\ i <= N + 1 /\ j < I(i) .
 ceq wellFormed(circuit not-gate(k), s(n)) = true
  if wellFormed(circuit, n) /\ k < n . 
 ceq wellFormed(circuit and-gate(k, l), s(n)) = true
  if wellFormed(circuit, n) /\ k < n /\ l < n .
 ceq wellFormed(circuit xor-gate(k, l), s(n)) = true
  if wellFormed(circuit, n) /\ k < n /\ l < n .
  
   *** helpers
 *** get the gate at the start of the circuit, after i pops
 *** i must be at most the length of circuit
 *** the circuit must be non-empty
 
 var gate : Gate .
 
 op gateAt : Circuit Nat -> Gate .
 eq gateAt(gate circuit, 0) = gate .
 eq gateAt(gate circuit, s(n)) = gateAt(circuit, n) .
 
 *** the wires of a gate, as a list
 op wiresOf : Gate -> List{NatPairs} .
 eq wiresOf(input-gate(i, j)) = (0 ;; i) (1 ;; j) .
 eq wiresOf(not-gate(i)) = (0 ;; i) .
 eq wiresOf(and-gate(k, l)) = (0 ;; k) (1 ;; l) .
 eq wiresOf(xor-gate(k, l)) = (0 ;; k) (1 ;; l) .
 
 *** list as an unsafe map
 var natPairs : List{NatPairs} .
 op _@@_ : List{NatPairs} Nat -> Nat .
 eq ( (i ;; k) natPairs) @@ i = k .
 ceq ( (l ;; k) natPairs) @@ i = natPairs @@ i if l =/= i .
 
 *** wire 0 of the circuit C at a given gate
 op wire0 : Nat -> Nat .
 eq wire0(i) = wiresOf(gateAt(C, i)) @@ 0 .
 
 *** wire 1 of the circuit C at a given gate
 op wire1 : Nat -> Nat .
 eq wire1(i) = wiresOf(gateAt(C, i)) @@ 1 .
 
  *** here we connect 'wire0 with wire0 
 var nt : NatTerm .
 var f : Map{Qid, NatTerm} .
 ceq evalTerm (fun 'wire0 nt) f = wire0(evalTerm nt f) 
  if (evalTerm nt f) : Nat .
 eq evalTerm (fun 'wire0 nt) f = fun 'wire0 nt [owise] . 
 ceq evalTerm (fun 'wire1 nt) f = wire1(evalTerm nt f) 
  if (evalTerm nt f) : Nat .
 eq evalTerm (fun 'wire1 nt) f = fun 'wire1 nt [owise] .
 
 *** for I
 eq evalTerm (fun 'I nt) f = fun 'I (evalTerm nt f) . 

 *** here we record the assumptions on indices
 var q : Qid .
 var A : Set{BoolTerm} .
 
 ceq A |= fun 'wire0 nt <T N + 2 with f = true 
   if (apply 'isInputGate (evalTerm nt f)) in A .
 ceq A |= (fun 'wire1 nt <T fun 'I (fun 'wire0 nt)) with f = true 
    if (apply 'isInputGate (evalTerm nt f)) in A [label depBounds] .
 
 ceq A |= fun 'wire0 nt <T K with f = true 
    if (apply 'isNotGate (evalTerm nt f)) in A [label notIndex].
 
 ceq A |= fun 'wire0 nt <T K with f = true 
    if (apply 'isXorGate (evalTerm nt f)) in A .
 ceq A |= fun 'wire1 nt <T K with f = true 
    if (apply 'isXorGate (evalTerm nt f)) in A .   
 
 ceq A |= fun 'wire0 nt <T K with f = true 
    if (apply 'isAndGate (evalTerm nt f)) in A [label andIndex] .
 ceq A |= fun 'wire1 nt <T K with f = true 
    if (apply 'isAndGate (evalTerm nt f)) in A .
    
 eq A |= fun 'wire0 i <T n with f = (A |= i <T n with f) .
 *** where do we need this? is this N?
 
  *** generic assumptions shared by both proofs
 op genA : -> Set{BoolTerm} .
 eq genA = ( neg (apply 'isXorGate 0), 
             neg (apply 'isAndGate 0), 
             neg (apply 'isNotGate 0),
             0 <T K,
             0 <T N + 2,
             N <T N + 1 )
 . 
  
  *** ideal protocol
  
  op ideal : -> Protocol .
  eq ideal =
   newfamily 'Wire 'k (bound K) : bool in
   leakageIdeal || wiresIdeal || finalIdeal
  .
  
  op leakageIdeal : -> Protocol .
  eq leakageIdeal = 
     (family 'In_id_adv ('n 'i) ((bound (N + 2))(dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('in : bool <- read ('In['n 'i]), return 'in, 'in :: emptyCNameList)
       )
       ;;
       (when (apply 'isHonest 'n) --> 
         nf('in : bool <- read ('In_id_adv['n 'i]), return 'in, 'in :: emptyCNameList)
       )
     ) 
     ||
     (family 'InRcvd_id_adv ('n 'i) ((bound (N + 2))(dependentBound 'I)) ::=
       (when (apply 'isHonest 'n) --> 
         nf('in : bool <- read ('In['n 'i]), return (), 'in :: emptyCNameList)
       )
       ;;
       (when (apply 'isSemiHonest 'n) --> 
         nf('in : unit <- read ('InRcvd_id_adv['n 'i]), return 'in, 'in :: emptyCNameList)
       )
     ) 
       
  .
  
  op wiresIdeal : -> Protocol .
  eq wiresIdeal = 
     family 'Wires 'k (bound K) ::= 
       (
        family 'Wire 'k (bound K) ::=
         (when (apply 'isInputGate 'k) --> 
           nf( 'w : bool <- read ('In[(fun 'wire0 'k) (fun 'wire1 'k)]), 
               return 'w,'w :: emptyCNameList)
         )
         ;;
         (when (apply 'isNotGate 'k) --> 
          nf('x : bool <- read ('Wire[fun 'wire0 'k]),
             return (ap 'neg 'x), 'x :: emptyCNameList)
         )
         ;;
         (when (apply 'isXorGate 'k) --> 
          nf(('x : bool <- read ('Wire[fun 'wire0 'k]))
             ('y : bool <- read ('Wire[fun 'wire1 'k])),
             return (ap 'xor pair('x, 'y)), 'x :: 'y :: emptyCNameList)
         )
         ;;
         (when (apply 'isAndGate 'k) --> 
          nf(('x : bool <- read ('Wire[fun 'wire0 'k]))
             ('y : bool <- read ('Wire[fun 'wire1 'k])),
             return (ap 'and pair('x, 'y)), 'x :: 'y :: emptyCNameList)
         )
       )
  .
  
  op finalIdeal : -> Protocol .
  eq finalIdeal =
     (family 'Out_id_adv ('n 'k) ((bound (N + 2))(bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('out : bool <- read ('Out['n 'k]), return 'out, 'out :: emptyCNameList)
       )
       ;;
       (when (apply 'isHonest 'n) --> 
         nf('out : bool <- read ('Out_id_adv['n 'k]), return 'out, 'out :: emptyCNameList)
       )
     )
     ||
     (family 'Out ('n 'k) ((bound (N + 2))(bound K)) ::=
       (when (apply 'isOutputWire 'k) --> 
         nf('out : bool <- read ('Wire['k]), return 'out, 'out :: emptyCNameList)
       )
       ;;
       (otherwise --> 
         nf('out : bool <- read ('Out['n 'k]), return 'out, 'out :: emptyCNameList)
       )
     
     )
  .
  
  *** sim protocol, missing so far
  
  *** real protocol
  
  op real : -> Protocol .
  eq real = 
   newfamily 'SendInShare ('m 'n 'i) 
             ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in
   newfamily 'OTMsg-0 ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in  
   newfamily 'OTMsg-1 ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   newfamily 'OTMsg-2 ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   newfamily 'OTMsg-3 ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   newfamily 'OTChoice-0 ('m 'n 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in  
   newfamily 'OTChoice-1 ('m 'n 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in                             
   newfamily 'OTOut ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in          
   newfamily 'SendOutShare ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in          
   (parties || 1OutOf4 )
  .
  
  op parties : -> Protocol .
  eq parties = 
   newfamily 'InShare ('n 'm 'i) 
             ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in   
   newfamily 'Share ('n 'k) 
             ((bound (N + 2)) (bound K) ) : bool in
   partyInitial || partyInductive || partyFinal           
  .
  
  op partyInitial : -> Protocol .
  eq partyInitial = 
  newfamily 'InShareGen ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in
  newfamily 'InShareGen-Sum ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) : bool in
  ( *** start new
    (family 'In_party_adv ('n 'i)
             ( (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('in : bool <- read ('In['n 'i]), return 'in, 'in :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n) --> 
         nf('in : bool <- read ('In_party_adv['n 'i]), return 'in, 'in :: emptyCNameList)
       )       
     )
     ||
     (family 'InRcvd_party_adv ('n 'i)
             ( (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isHonest 'n) --> 
         nf('x : bool <- read ('In['n 'i]), return (), 'x :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isSemiHonest 'n)  --> 
         nf('in : unit <- read ('InRcvd_party_adv['n 'i]), return 'in, 'in :: emptyCNameList)
       )       
     )
     ||
     (family 'InShareGen ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when ('m =T= N + 1) --> 
          nf(('x : bool <- read ('In['n 'i]))
             ('s : bool <- read ('InShareGen-Sum[N 'n 'i])), 
             return (ap 'xor pair('x, 's)), 'x :: 's :: emptyCNameList)
       )
       ;;
       (otherwise --> 
         nf('x : bool <- read ('In['n 'i]), samp ('flip < () >), 'x :: emptyCNameList)
       )      
     )
     ||
      (family 'InShareGen_party_adv ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
          nf('in : bool <- read ('InShareGen['m 'n 'i]), return 'in, 'in :: emptyCNameList)
       )
       ;;
       (when (apply 'isHonest 'n)  --> 
         nf('in : bool <- read ('InShareGen_party_adv['m 'n 'i]), 
            return 'in, 'in :: emptyCNameList)
       )      
     )
     ||
     (family 'InShareGen-Sum ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) ::=
        (when ('m =T= 0) --> 
          nf('in : bool <- read ('InShareGen[0 'n 'i]), 
             return 'in, 'in :: emptyCNameList)
        )
        ;;
        (otherwise --> 
          nf(('x : bool <- read ('InShareGen['m 'n 'i]))
             ('s : bool <- read ('InShareGen-Sum[('m -- 1) 'n 'i])), 
             return (ap 'xor pair('s, 'x)), 's :: 'x :: emptyCNameList)
        )    
     )
     ||
     (family 'InShareGen-Sum_party_adv ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('InShareGen-Sum['m 'n 'i]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('InShareGen-Sum_party_adv['m 'n 'i]), 
            return 's, 's :: emptyCNameList)
       )       
     )
     ||
     (family 'SendInShare ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
        nf('in : bool <- read ('InShareGen['m 'n 'i]), return 'in, 'in :: emptyCNameList)    
     )  
     ||
     (family 'SendInShare_party_adv ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendInShare['m 'n 'i]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('SendInShare_party_adv['m 'n 'i]), 
            return 's, 's :: emptyCNameList)
       )        
     )   
     ||
     (family 'RcvdInShare_party_adv ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendInShare['n 'm 'i]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('RcvdInShare_party_adv['n 'm 'i]), 
            return 's, 's :: emptyCNameList)
       )        
     ) 
     ||
     (family 'InShare ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
        nf('s : bool <- read ('SendInShare['n 'm 'i]), return 's, 's :: emptyCNameList)    
     )        
     ||
     (family 'InShare_party_adv ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('InShare['n 'm 'i]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('InShare_party_adv['n 'm 'i]), 
            return 's, 's :: emptyCNameList)
       )        
     )  
  ) *** end new
  .
  
  op partyInductive : -> Protocol .
  eq partyInductive =
   newfamily 'SendBit ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily 'RcvdBit ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily 'Bit ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily 'BitSum ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in   
  family 'Circuit ('n 'k) ((bound (N + 2)) (bound K)) ::= 
   (when (apply 'isInputGate 'k) -->          
      ( *** start new
       ( family 'SendBit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb :: emptyCNameList)
 )
 ||
 (family 'SendBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit_party_adv['n 'm 'k]), 
       return 'sb, 'sb :: emptyCNameList) 
 )               
 ||
 ( family 'RcvdBit ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('rb : bool <- read ('RcvdBit['m 'n 'k]), return 'rb, 'rb :: emptyCNameList)
 )
 ||
 (family 'RcvdBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('rb : bool <- read ('RcvdBit_party_adv['n 'm 'k]), 
      return 'rb, 'rb :: emptyCNameList)          
 ) 
 ||
 ( family 'Bit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('b : bool <- read ('Bit['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )
 ||
 (family 'Bit_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read ('Bit_party_adv['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )  
 ||
 (family 'BitSum ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('b : bool <- read ('BitSum['n 'm 'k]), return 'b, 'b :: emptyCNameList)  
 )
 ||
 (family 'BitSum_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read ('BitSum_party_adv['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )  
 ||
     ( family 'Share ('n 'k) ((bound (N + 2)) (bound K)) ::= 
       nf('in : bool <- read ('InShare['n (fun 'wire0 'k) (fun 'wire1 'k)]),
          return 'in, 'in :: emptyCNameList)
     )
     ||
     (family 'Share_party_adv ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('Share_party_adv['n 'k]), 
            return 's, 's :: emptyCNameList)
       )        
     )
     ||
     ( family 'OTMsg-0 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-1 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-2 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-3 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTChoice-0 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChoice-0['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
     )
     ||
     ( family 'OTChoice-1 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChoice-1['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
     )
     ) *** end new
   )
   ;;
   (when (apply 'isNotGate 'k) -->    
      ( *** start new
       ( family 'SendBit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb :: emptyCNameList)
 )
 ||
 (family 'SendBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit_party_adv['n 'm 'k]), 
       return 'sb, 'sb :: emptyCNameList) 
 )               
 ||
 ( family 'RcvdBit ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('rb : bool <- read ('RcvdBit['m 'n 'k]), return 'rb, 'rb :: emptyCNameList)
 )
 ||
 (family 'RcvdBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('rb : bool <- read ('RcvdBit_party_adv['n 'm 'k]), 
      return 'rb, 'rb :: emptyCNameList)          
 ) 
 ||
 ( family 'Bit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('b : bool <- read ('Bit['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )
 ||
 (family 'Bit_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read ('Bit_party_adv['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )  
 ||
 (family 'BitSum ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('b : bool <- read ('BitSum['n 'm 'k]), return 'b, 'b :: emptyCNameList)  
 )
 ||
 (family 'BitSum_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read ('BitSum_party_adv['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )  
 ||
     ( family 'Share ('n 'k) ((bound (N + 2)) (bound K)) ::= 
        (when ('n =T= N + 1) --> 
          nf( ('x : bool <- read ('Share['n (fun 'wire0 'k)])),
              return (ap 'neg 'x), 'x :: emptyCNameList
          )
        )
        ;;
        (otherwise --> 
          nf('s : bool <- read ('Share['n (fun 'wire0 'k)]),
          return 's, 's :: emptyCNameList)
        )
          
     )
     ||
     (family 'Share_party_adv ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('Share_party_adv['n 'k]), 
            return 's, 's :: emptyCNameList)
       )        
     )
     ||
     ( family 'OTMsg-0 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-1 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-2 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-3 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTChoice-0 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChoice-0['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
     )
     ||
     ( family 'OTChoice-1 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChoice-1['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
     )
     ) *** end new
   )
   ;;
   (when (apply 'isXorGate 'k) --> 
      ( *** start new
       ( family 'SendBit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb :: emptyCNameList)
 )
 ||
 (family 'SendBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit_party_adv['n 'm 'k]), 
       return 'sb, 'sb :: emptyCNameList) 
 )               
 ||
 ( family 'RcvdBit ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('rb : bool <- read ('RcvdBit['m 'n 'k]), return 'rb, 'rb :: emptyCNameList)
 )
 ||
 (family 'RcvdBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('rb : bool <- read ('RcvdBit_party_adv['n 'm 'k]), 
      return 'rb, 'rb :: emptyCNameList)          
 ) 
 ||
 ( family 'Bit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('b : bool <- read ('Bit['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )
 ||
 (family 'Bit_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read ('Bit_party_adv['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )  
 ||
 (family 'BitSum ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('b : bool <- read ('BitSum['n 'm 'k]), return 'b, 'b :: emptyCNameList)  
 )
 ||
 (family 'BitSum_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read ('BitSum_party_adv['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )          
 ||
     ( family 'Share ('n 'k) ((bound (N + 2)) (bound K)) ::= 
       nf(('x : bool <- read ('Share['n (fun 'wire0 'k)]))
          ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair('x, 'y)), 'x :: 'y :: emptyCNameList)
     )
     ||
     (family 'Share_party_adv ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('Share_party_adv['n 'k]), 
            return 's, 's :: emptyCNameList)
       )        
     )
     ||
     ( family 'OTMsg-0 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-1 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-2 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-3 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTChoice-0 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChoice-0['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
     )
     ||
     ( family 'OTChoice-1 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChoice-1['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
     )   
   ) *** end new
   ) 
     ;;
   (when (apply 'isAndGate 'k) -->
     ( *** start new
     ( family 'SendBit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( 
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          samp ('flip < () >), 
             'x :: 'y :: emptyCNameList
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('sb : bool <- read ('SendBit['n 'm 'k]),
          return 'sb, 'sb :: emptyCNameList)
       )   
     )
     ||
      (family 'SendBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendBit['n 'm 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('SendBit_party_adv['n 'm 'k]), 
            return 's, 's :: emptyCNameList)
       )        
     )
     ||
     ( family 'OTMsg-0 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return 'b, 'b :: 'x :: 'y :: emptyCNameList
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
       )   
     )
     ||
     ( family 'OTMsg-1 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair('x, 'b)), 'b :: 'x :: 'y :: emptyCNameList
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
       )   
     )
     ||
     ( family 'OTMsg-2 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair('y, 'b)), 'b :: 'x :: 'y :: emptyCNameList
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
       )   
     )
     ||
     ( family 'OTMsg-3 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair(ap 'xor pair('x, 'y), 'b)), 
          'b :: 'x :: 'y :: emptyCNameList
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
       )   
     )
     ||
     ( family 'OTChoice-0 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
      (when ('n <T 'm) --> 
         nf( ('x : bool <- read ('Share['n (fun 'wire0 'k)])),
          return 'x, 'x :: emptyCNameList
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('oc : bool <- read ('OTChoice-0['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
       )   
     )
     ||
     ( family 'OTChoice-1 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('x : bool <- read ('Share['n (fun 'wire1 'k)])),
          return 'x, 'x :: emptyCNameList
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('oc : bool <- read ('OTChoice-1['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
       )   
     )
     ||
     ( family 'RcvdBit ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
          nf( ('out : bool <- read ('OTOut['m 'n 'k])),
              return 'out, 'out :: emptyCNameList
          )     
    )
    ||
     (family 'RcvdBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('RcvdBit['n 'm 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('RcvdBit_party_adv['n 'm 'k]), 
            return 's, 's :: emptyCNameList)
       )        
     )
      ||
      ( family 'Bit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
      (when ('n <T 'm) --> 
         nf( ('r : bool <- read ('RcvdBit['m 'n 'k])),
          return 'r, 'r :: emptyCNameList
          )
       )
       ;;
       (when ('n =T= 'm) --> 
         nf( ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'and pair('x, 'y)), 
          'x :: 'y :: emptyCNameList
          )
       )
       ;;
       (when ('m <T 'n) --> 
         nf( ('s : bool <- read ('SendBit['n 'm 'k])),
          return 's, 's :: emptyCNameList
          )
       )   
     )
     ||
 (family 'Bit_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Bit['n 'm 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('Bit_party_adv['n 'm 'k]), 
            return 's, 's :: emptyCNameList)
       )               
 )  
      ||
      (family 'BitSum ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   (when ('m =T= 0) --> 
     nf( ('b : bool <- read ('Bit['n 0 'k])),
          return 'b, 'b :: emptyCNameList
          ) 
   )
   ;;
   (otherwise --> 
     nf( ('s : bool <- read ('BitSum['n ('m -- 1) 'k]))
         ('b : bool <- read ('Bit['n 'm 'k])),
          return (ap 'xor pair('s, 'b)), 's :: 'b :: emptyCNameList
          ) 
   )
 )
 ||
 (family 'BitSum_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('BitSum['n 'm 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('BitSum_party_adv['n 'm 'k]), 
            return 's, 's :: emptyCNameList)
       )        
     )
      ||   
 ( family 'Share ('n 'k) ((bound (N + 2)) (bound K)) ::= 
          nf( ('bs : bool <- read ('BitSum['n (N + 1) 'k])),
              return 'bs, 'bs :: emptyCNameList
          )     
 )   
 ||
     (family 'Share_party_adv ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('Share_party_adv['n 'k]), 
            return 's, 's :: emptyCNameList)
       )        
     ) 
     ) *** end new
   )  

  .
  
  op partyFinal : -> Protocol .
  eq partyFinal = 
   newfamily 'OutShare ('n 'm 'k)
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily 'OutShareSum ('n 'm 'k)
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   ( *** start new
     (family 'SendOutShare ('m 'n 'k)
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isOutputWire 'k) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (otherwise --> 
         nf('s : bool <- read ('SendOutShare['m 'n 'k]), return 's, 's :: emptyCNameList)
       )       
     )
     ||
     (family 'SendOutShare_party_adv ('m 'n 'k)
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendOutShare['m 'n 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('SendOutShare_party_adv['m 'n 'k]), 
            return 's, 's :: emptyCNameList)
       )       
     )
     ||
     (family 'RcvdOutShare_party_adv ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendOutShare['n 'm 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('RcvdOutShare_party_adv['n 'm 'k]), 
            return 's, 's :: emptyCNameList)
       )       
     )
     || 
     (family 'OutShare ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
      nf('s : bool <- read ('SendOutShare['n 'm 'k]), return 's, 's :: emptyCNameList)       
     )
     ||
     (family 'OutShare_party_adv ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('OutShare['n 'm 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('OutShare_party_adv['n 'm 'k]), 
            return 's, 's :: emptyCNameList)
       )       
     )
     ||
     (family 'OutShareSum ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when ('m =T= 0) --> 
         nf('s : bool <- read ('OutShare['n 0 'k]), 
            return 's, 's :: emptyCNameList)
       )
       ;;
       (otherwise -->
         nf( ('s : bool <- read ('OutShareSum['n ('m -- 1) 'k]))
             ('x : bool <- read ('OutShare['n 'm 'k])),
             return (ap 'xor pair('s, 'x)),
             's :: 'x :: emptyCNameList
         )
       )
     )        
     ||
     (family 'OutShareSum_party_adv ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('OutShareSum['n 'm 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('OutShareSum_party_adv['n 'm 'k]), 
            return 's, 's :: emptyCNameList)
       )       
     )
     ||
     (family 'Out ('n 'k)
             ((bound (N + 2)) (bound K)) ::=
      nf('s : bool <- read ('OutShareSum['n (N + 1) 'k]),
         return 's, 's :: emptyCNameList)       
     )
     ||
     (family 'Out_party_adv ('n 'k)
             (bound (N + 2) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Out['n 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('Out_party_adv['n 'k]), 
            return 's, 's :: emptyCNameList)
       )       
     )
   ) *** end new
  .
  
  
  op 1OutOf4 : -> Protocol .
  eq 1OutOf4 =
   (family 'OTMsg-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsg-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsg-2_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsg-3_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m0 : bool <- read ('OTMsg-0['n 'm 'k]), return (), 'm0 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-0_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m1 : bool <- read ('OTMsg-1['n 'm 'k]), return (), 'm1 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-1_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-2_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m2 : bool <- read ('OTMsg-2['n 'm 'k]), return (), 'm2 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-2_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-3_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m3 : bool <- read ('OTMsg-3['n 'm 'k]), return (), 'm3 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-3_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoice-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-0['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-0_ot_adv['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoice-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-1['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-1_ot_adv['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoiceRcvd-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c0 : bool <- read ('OTChoice-0['n 'm 'k]), return (), 'c0 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read ('OTChoiceRcvd-0_ot_adv['n 'm 'k]), 
          return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoiceRcvd-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c1 : bool <- read ('OTChoice-1['n 'm 'k]), return (), 'c1 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read ('OTChoiceRcvd-1_ot_adv['n 'm 'k]), 
          return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTOut_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('out : bool <- read ('OTOut['n 'm 'k]), return 'out, 'out :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('out : bool <- read ('OTOut_ot_adv['n 'm 'k]), return 'out, 'out :: emptyCNameList)
     )   
   )
   ||
   (family 'OTOut ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     nf( ('m0 : bool <- read ('OTMsg-0['n 'm 'k]))
         ('m1 : bool <- read ('OTMsg-1['n 'm 'k]))
         ('m2 : bool <- read ('OTMsg-2['n 'm 'k]))
         ('m3 : bool <- read ('OTMsg-3['n 'm 'k]))
         ('c0 : bool <- read ('OTChoice-0['n 'm 'k]))
         ('c1 : bool <- read ('OTChoice-1['n 'm 'k])),
         if 'c0 
         then (if 'c1 then return 'm3 else return 'm2)
         else (if 'c1 then return 'm1 else return 'm0),
         'm0 :: 'm1 :: 'm2 :: 'm3 :: 'c0 :: 'c1 :: emptyCNameList
      )        
   )
   
  .
  
  *** the restructured protocol
  
  op restr : -> Protocol .
  eq restr =
   newfamily 'InShare ('n 'm 'i) 
             ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in   
   newfamily 'Share ('n 'k) 
             ((bound (N + 2)) (bound K) ) : bool in
     restrInitial || restrInductive || restrFinal
  .
  
  op restrInitial : -> Protocol .
  
  eq restrInitial = 
   newfamily 'InShareGen ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in
   newfamily 'InShareGen-Sum ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) : bool in         
   newfamily 'SendInShare ('m 'n 'i) 
             ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) : bool in
   ( *** start new
     (family 'In_party_adv ('n 'i) ((bound (N + 2)) (dependentBound 'I)) ::=
        (when (apply 'isSemiHonest 'n) -->
           nf('in : bool <- read ('In['n 'i]), 
              return 'in, 'in :: emptyCNameList)
        )
       ;;
       (when (apply 'isHonest 'n) -->
           nf('in : bool <- read ('In_party_adv['n 'i]), 
              return 'in, 'in :: emptyCNameList)
       )
    )
    ||
     (family 'InRcvd_party_adv ('n 'i)
             ( (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isHonest 'n) --> 
         nf('x : bool <- read ('In['n 'i]), return (), 'x :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isSemiHonest 'n)  --> 
         nf('in : unit <- read ('InRcvd_party_adv['n 'i]), return 'in, 'in :: emptyCNameList)
       )       
     )
    ||
     (family 'InShareGen ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when ('m =T= N + 1) --> 
          nf(('x : bool <- read ('In['n 'i]))
             ('s : bool <- read ('InShareGen-Sum[N 'n 'i])), 
             return (ap 'xor pair('x, 's)), 'x :: 's :: emptyCNameList)
       )
       ;;
       (otherwise --> 
         nf('x : bool <- read ('In['n 'i]), samp ('flip < () >), 'x :: emptyCNameList)
       )      
     )
     ||
     (family 'InShareGen-Sum ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) ::=
        (when ('m =T= 0) --> 
          nf('in : bool <- read ('InShareGen[0 'n 'i]), 
             return 'in, 'in :: emptyCNameList)
        )
        ;;
        (otherwise --> 
          nf(('x : bool <- read ('InShareGen['m 'n 'i]))
             ('s : bool <- read ('InShareGen-Sum[('m -- 1) 'n 'i])), 
             return (ap 'xor pair('s, 'x)), 's :: 'x :: emptyCNameList)
        )    
     )
     ||
      (family 'InShareGen_party_adv ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
          nf('in : bool <- read ('InShareGen['m 'n 'i]), return 'in, 'in :: emptyCNameList)
       )
       ;;
       (when (apply 'isHonest 'n)  --> 
         nf('in : bool <- read ('InShareGen_party_adv['m 'n 'i]), 
            return 'in, 'in :: emptyCNameList)
       )      
     )
     ||
     (family 'InShareGen-Sum_party_adv ('m 'n 'i)  
            ((bound (N + 1)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('InShareGen-Sum['m 'n 'i]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('InShareGen-Sum_party_adv['m 'n 'i]), 
            return 's, 's :: emptyCNameList)
       )       
     ) 
     ||
     (family 'SendInShare ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
        nf('in : bool <- read ('InShareGen['m 'n 'i]), return 'in, 'in :: emptyCNameList)    
     )  
     ||
     (family 'SendInShare_party_adv ('m 'n 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendInShare['m 'n 'i]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('SendInShare_party_adv['m 'n 'i]), 
            return 's, 's :: emptyCNameList)
       )        
     )
     ||
     (family 'RcvdInShare_party_adv ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendInShare['n 'm 'i]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('RcvdInShare_party_adv['n 'm 'i]), 
            return 's, 's :: emptyCNameList)
       )        
     )
     ||
     (family 'InShare ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
        nf('s : bool <- read ('SendInShare['n 'm 'i]), return 's, 's :: emptyCNameList)    
     )        
     ||
     (family 'InShare_party_adv ('n 'm 'i)  
            ((bound (N + 2)) (bound (N + 2)) (dependentBound 'I)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('InShare['n 'm 'i]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('InShare_party_adv['n 'm 'i]), 
            return 's, 's :: emptyCNameList)
       )        
     )
     ) *** end new    
  .
  
  op restrInductive : -> Protocol .
  
  eq restrInductive = 
    newfamily 'OTMsg-0 ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in  
   newfamily 'OTMsg-1 ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   newfamily 'OTMsg-2 ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   newfamily 'OTMsg-3 ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   newfamily 'OTChoice-0 ('m 'n 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in  
   newfamily 'OTChoice-1 ('m 'n 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in                             
   newfamily 'OTOut ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily 'SendBit ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily 'RcvdBit ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily 'Bit ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in
   newfamily 'BitSum ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in 
   ( *** start new
   
   family 'Circuit ('n 'k) ((bound (N + 2)) (bound K)) ::= 
   (when (apply 'isInputGate 'k) --> 
   *** for input gate
 ( family 'SendBit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb :: emptyCNameList)
 )
 ||
 (family 'SendBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit_party_adv['n 'm 'k]), 
       return 'sb, 'sb :: emptyCNameList) 
 )               
 ||
 ( family 'RcvdBit ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('rb : bool <- read ('RcvdBit['m 'n 'k]), return 'rb, 'rb :: emptyCNameList)
 )
 ||
 (family 'RcvdBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('rb : bool <- read ('RcvdBit_party_adv['n 'm 'k]), 
      return 'rb, 'rb :: emptyCNameList)          
 ) 
 ||
 ( family 'Bit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('b : bool <- read ('Bit['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )
 ||
 (family 'Bit_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read ('Bit_party_adv['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )  
 ||
 (family 'BitSum ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('b : bool <- read ('BitSum['n 'm 'k]), return 'b, 'b :: emptyCNameList)  
 )
 ||
 (family 'BitSum_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read ('BitSum_party_adv['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )  
 ||
     ( family 'Share ('n 'k) ((bound (N + 2)) (bound K)) ::= 
       nf('in : bool <- read ('InShare['n (fun 'wire0 'k) (fun 'wire1 'k)]),
          return 'in, 'in :: emptyCNameList)
     )
     ||
     (family 'Share_party_adv ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('Share_party_adv['n 'k]), 
            return 's, 's :: emptyCNameList)
       )        
     )
     ||
     ( family 'OTMsg-0 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-1 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-2 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-3 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTChoice-0 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChoice-0['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
     )
     ||
     ( family 'OTChoice-1 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChoice-1['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
     )
     ||
     (family 'OTMsg-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
     )
||
   (family 'OTMsg-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsg-2_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsg-3_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m0 : bool <- read ('OTMsg-0['n 'm 'k]), return (), 'm0 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-0_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m1 : bool <- read ('OTMsg-1['n 'm 'k]), return (), 'm1 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-1_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-2_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m2 : bool <- read ('OTMsg-2['n 'm 'k]), return (), 'm2 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-2_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-3_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m3 : bool <- read ('OTMsg-3['n 'm 'k]), return (), 'm3 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-3_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoice-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-0['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-0_ot_adv['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoice-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-1['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-1_ot_adv['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoiceRcvd-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c0 : bool <- read ('OTChoice-0['n 'm 'k]), return (), 'c0 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read ('OTChoiceRcvd-0_ot_adv['n 'm 'k]), 
          return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoiceRcvd-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c1 : bool <- read ('OTChoice-1['n 'm 'k]), return (), 'c1 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read ('OTChoiceRcvd-1_ot_adv['n 'm 'k]), 
          return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTOut_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('out : bool <- read ('OTOut['n 'm 'k]), return 'out, 'out :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('out : bool <- read ('OTOut_ot_adv['n 'm 'k]), return 'out, 'out :: emptyCNameList)
     )   
   )
   ||
   (family 'OTOut ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     nf( ('m0 : bool <- read ('OTMsg-0['n 'm 'k]))
         ('m1 : bool <- read ('OTMsg-1['n 'm 'k]))
         ('m2 : bool <- read ('OTMsg-2['n 'm 'k]))
         ('m3 : bool <- read ('OTMsg-3['n 'm 'k]))
         ('c0 : bool <- read ('OTChoice-0['n 'm 'k]))
         ('c1 : bool <- read ('OTChoice-1['n 'm 'k])),
         if 'c0 
         then (if 'c1 then return 'm3 else return 'm2)
         else (if 'c1 then return 'm1 else return 'm0),
         'm0 :: 'm1 :: 'm2 :: 'm3 :: 'c0 :: 'c1 :: emptyCNameList
      )        
   )  
   ) *** end when
   
   ;;
   (when (apply 'isNotGate 'k) -->
  *** for not gate   
 ( family 'SendBit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb :: emptyCNameList)
 )
 ||
 (family 'SendBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit_party_adv['n 'm 'k]), 
       return 'sb, 'sb :: emptyCNameList) 
 )               
 ||
 ( family 'RcvdBit ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('rb : bool <- read ('RcvdBit['m 'n 'k]), return 'rb, 'rb :: emptyCNameList)
 )
 ||
 (family 'RcvdBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('rb : bool <- read ('RcvdBit_party_adv['n 'm 'k]), 
      return 'rb, 'rb :: emptyCNameList)          
 ) 
 ||
 ( family 'Bit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('b : bool <- read ('Bit['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )
 ||
 (family 'Bit_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read ('Bit_party_adv['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )  
 ||
 (family 'BitSum ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('b : bool <- read ('BitSum['n 'm 'k]), return 'b, 'b :: emptyCNameList)  
 )
 ||
 (family 'BitSum_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read ('BitSum_party_adv['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )  
 ||
     ( family 'Share ('n 'k) ((bound (N + 2)) (bound K)) ::= 
        (when ('n =T= N + 1) --> 
          nf( ('x : bool <- read ('Share['n (fun 'wire0 'k)])),
              return (ap 'neg 'x), 'x :: emptyCNameList
          )
        )
        ;;
        (otherwise --> 
          nf('s : bool <- read ('Share['n (fun 'wire0 'k)]),
          return 's, 's :: emptyCNameList)
        )
          
     )
     ||
     (family 'Share_party_adv ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('Share_party_adv['n 'k]), 
            return 's, 's :: emptyCNameList)
       )        
     )
     ||
     ( family 'OTMsg-0 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-1 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-2 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-3 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTChoice-0 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChoice-0['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
     )
     ||
     ( family 'OTChoice-1 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChoice-1['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
     )
     ||  
  (family 'OTMsg-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsg-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsg-2_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsg-3_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m0 : bool <- read ('OTMsg-0['n 'm 'k]), return (), 'm0 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-0_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m1 : bool <- read ('OTMsg-1['n 'm 'k]), return (), 'm1 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-1_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-2_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m2 : bool <- read ('OTMsg-2['n 'm 'k]), return (), 'm2 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-2_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-3_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m3 : bool <- read ('OTMsg-3['n 'm 'k]), return (), 'm3 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-3_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoice-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-0['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-0_ot_adv['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoice-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-1['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-1_ot_adv['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoiceRcvd-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c0 : bool <- read ('OTChoice-0['n 'm 'k]), return (), 'c0 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read ('OTChoiceRcvd-0_ot_adv['n 'm 'k]), 
          return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoiceRcvd-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c1 : bool <- read ('OTChoice-1['n 'm 'k]), return (), 'c1 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read ('OTChoiceRcvd-1_ot_adv['n 'm 'k]), 
          return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTOut_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('out : bool <- read ('OTOut['n 'm 'k]), return 'out, 'out :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('out : bool <- read ('OTOut_ot_adv['n 'm 'k]), return 'out, 'out :: emptyCNameList)
     )   
   )
   ||
   (family 'OTOut ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     nf( ('m0 : bool <- read ('OTMsg-0['n 'm 'k]))
         ('m1 : bool <- read ('OTMsg-1['n 'm 'k]))
         ('m2 : bool <- read ('OTMsg-2['n 'm 'k]))
         ('m3 : bool <- read ('OTMsg-3['n 'm 'k]))
         ('c0 : bool <- read ('OTChoice-0['n 'm 'k]))
         ('c1 : bool <- read ('OTChoice-1['n 'm 'k])),
         if 'c0 
         then (if 'c1 then return 'm3 else return 'm2)
         else (if 'c1 then return 'm1 else return 'm0),
         'm0 :: 'm1 :: 'm2 :: 'm3 :: 'c0 :: 'c1 :: emptyCNameList
      )        
   )
   )
   ;;
   (when (apply 'isXorGate 'k) --> 
    *** for xor gate 
 ( family 'SendBit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit['n 'm 'k]), return 'sb, 'sb :: emptyCNameList)
 )
 ||
 (family 'SendBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('sb : bool <- read ('SendBit_party_adv['n 'm 'k]), 
       return 'sb, 'sb :: emptyCNameList) 
 )               
 ||
 ( family 'RcvdBit ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('rb : bool <- read ('RcvdBit['m 'n 'k]), return 'rb, 'rb :: emptyCNameList)
 )
 ||
 (family 'RcvdBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('rb : bool <- read ('RcvdBit_party_adv['n 'm 'k]), 
      return 'rb, 'rb :: emptyCNameList)          
 ) 
 ||
 ( family 'Bit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
    nf('b : bool <- read ('Bit['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )
 ||
 (family 'Bit_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read ('Bit_party_adv['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )  
 ||
 (family 'BitSum ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   nf('b : bool <- read ('BitSum['n 'm 'k]), return 'b, 'b :: emptyCNameList)  
 )
 ||
 (family 'BitSum_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
  nf('b : bool <- read ('BitSum_party_adv['n 'm 'k]), return 'b, 'b :: emptyCNameList)           
 )          
 ||
     ( family 'Share ('n 'k) ((bound (N + 2)) (bound K)) ::= 
       nf(('x : bool <- read ('Share['n (fun 'wire0 'k)]))
          ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair('x, 'y)), 'x :: 'y :: emptyCNameList)
     )
     ||
     (family 'Share_party_adv ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('Share_party_adv['n 'k]), 
            return 's, 's :: emptyCNameList)
       )        
     )
     ||
     ( family 'OTMsg-0 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-1 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-2 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTMsg-3 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
     )
     ||
     ( family 'OTChoice-0 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChoice-0['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
     )
     ||
     ( family 'OTChoice-1 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       nf('oc : bool <- read ('OTChoice-1['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
     )
      ||  
  (family 'OTMsg-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsg-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsg-2_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsg-3_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m0 : bool <- read ('OTMsg-0['n 'm 'k]), return (), 'm0 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-0_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m1 : bool <- read ('OTMsg-1['n 'm 'k]), return (), 'm1 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-1_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-2_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m2 : bool <- read ('OTMsg-2['n 'm 'k]), return (), 'm2 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-2_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-3_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m3 : bool <- read ('OTMsg-3['n 'm 'k]), return (), 'm3 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-3_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoice-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-0['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-0_ot_adv['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoice-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-1['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-1_ot_adv['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoiceRcvd-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c0 : bool <- read ('OTChoice-0['n 'm 'k]), return (), 'c0 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read ('OTChoiceRcvd-0_ot_adv['n 'm 'k]), 
          return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoiceRcvd-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c1 : bool <- read ('OTChoice-1['n 'm 'k]), return (), 'c1 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read ('OTChoiceRcvd-1_ot_adv['n 'm 'k]), 
          return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTOut_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('out : bool <- read ('OTOut['n 'm 'k]), return 'out, 'out :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('out : bool <- read ('OTOut_ot_adv['n 'm 'k]), return 'out, 'out :: emptyCNameList)
     )   
   )
   ||
   (family 'OTOut ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     nf( ('m0 : bool <- read ('OTMsg-0['n 'm 'k]))
         ('m1 : bool <- read ('OTMsg-1['n 'm 'k]))
         ('m2 : bool <- read ('OTMsg-2['n 'm 'k]))
         ('m3 : bool <- read ('OTMsg-3['n 'm 'k]))
         ('c0 : bool <- read ('OTChoice-0['n 'm 'k]))
         ('c1 : bool <- read ('OTChoice-1['n 'm 'k])),
         if 'c0 
         then (if 'c1 then return 'm3 else return 'm2)
         else (if 'c1 then return 'm1 else return 'm0),
         'm0 :: 'm1 :: 'm2 :: 'm3 :: 'c0 :: 'c1 :: emptyCNameList
      )        
   )
   ) 
     ;;
   (when (apply 'isAndGate 'k) -->
     *** for and gate
     ( family 'SendBit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( 
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          samp ('flip < () >), 
             'x :: 'y :: emptyCNameList
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('sb : bool <- read ('SendBit['n 'm 'k]),
          return 'sb, 'sb :: emptyCNameList)
       )   
     )
     ||
      (family 'SendBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendBit['n 'm 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('SendBit_party_adv['n 'm 'k]), 
            return 's, 's :: emptyCNameList)
       )        
     )
     ||
     ( family 'OTMsg-0 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return 'b, 'b :: 'x :: 'y :: emptyCNameList
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-0['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
       )   
     )
     ||
     ( family 'OTMsg-1 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair('x, 'b)), 'b :: 'x :: 'y :: emptyCNameList
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-1['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
       )   
     )
     ||
     ( family 'OTMsg-2 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair('y, 'b)), 'b :: 'x :: 'y :: emptyCNameList
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-2['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
       )   
     )
     ||
     ( family 'OTMsg-3 ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('b : bool <- read ('SendBit['n 'm 'k]))
             ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'xor pair(ap 'xor pair('x, 'y), 'b)), 
          'b :: 'x :: 'y :: emptyCNameList
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('om : bool <- read ('OTMsg-3['n 'm 'k]),
          return 'om, 'om :: emptyCNameList)
       )   
     )
     ||
     ( family 'OTChoice-0 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
      (when ('n <T 'm) --> 
         nf( ('x : bool <- read ('Share['n (fun 'wire0 'k)])),
          return 'x, 'x :: emptyCNameList
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('oc : bool <- read ('OTChoice-0['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
       )   
     )
     ||
     ( family 'OTChoice-1 ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when ('n <T 'm) --> 
         nf( ('x : bool <- read ('Share['n (fun 'wire1 'k)])),
          return 'x, 'x :: emptyCNameList
          )
       )
       ;;
       (when ('m <=T 'n) --> 
         nf('oc : bool <- read ('OTChoice-1['m 'n 'k]),
          return 'oc, 'oc :: emptyCNameList)
       )   
     )
     ||
     ( family 'RcvdBit ('m 'n 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
          nf( ('out : bool <- read ('OTOut['m 'n 'k])),
              return 'out, 'out :: emptyCNameList
          )     
    )
    ||
     (family 'RcvdBit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('RcvdBit['n 'm 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('RcvdBit_party_adv['n 'm 'k]), 
            return 's, 's :: emptyCNameList)
       )        
     )
      ||
      ( family 'Bit ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
      (when ('n <T 'm) --> 
         nf( ('r : bool <- read ('RcvdBit['m 'n 'k])),
          return 'r, 'r :: emptyCNameList
          )
       )
       ;;
       (when ('n =T= 'm) --> 
         nf( ('x : bool <- read ('Share['n (fun 'wire0 'k)]))
             ('y : bool <- read ('Share['n (fun 'wire1 'k)])),
          return (ap 'and pair('x, 'y)), 
          'x :: 'y :: emptyCNameList
          )
       )
       ;;
       (when ('m <T 'n) --> 
         nf( ('s : bool <- read ('SendBit['n 'm 'k])),
          return 's, 's :: emptyCNameList
          )
       )   
     )
     ||
     (family 'Bit_party_adv ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) -->
             nf('s : bool <- read ('Bit['n 'm 'k]), return 's, 's :: emptyCNameList)
       )
       ;;
       (when (apply 'isHonest 'n) -->
             nf('s : bool <- read ('Bit_party_adv['n 'm 'k]), return 's, 's :: emptyCNameList)
       ) 
     )
      ||
      (family 'BitSum ('n 'm 'k) ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
   (when ('m =T= 0) --> 
     nf( ('b : bool <- read ('Bit['n 0 'k])),
          return 'b, 'b :: emptyCNameList
          ) 
   )
   ;;
   (otherwise --> 
     nf( ('s : bool <- read ('BitSum['n ('m -- 1) 'k]))
         ('b : bool <- read ('Bit['n 'm 'k])),
          return (ap 'xor pair('s, 'b)), 's :: 'b :: emptyCNameList
          ) 
   )
 )
 ||
 (family 'BitSum_party_adv ('n 'm 'k) 
           ((bound (N + 2)) (bound (N + 2)) (bound K)) ::= 
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('BitSum['n 'm 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('BitSum_party_adv['n 'm 'k]), 
            return 's, 's :: emptyCNameList)
       )        
     )
      ||   
 ( family 'Share ('n 'k) ((bound (N + 2)) (bound K)) ::= 
          nf( ('bs : bool <- read ('BitSum['n (N + 1) 'k])),
              return 'bs, 'bs :: emptyCNameList
          )     
 )   
 ||
     (family 'Share_party_adv ('n 'k)  
             ((bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('Share_party_adv['n 'k]), 
            return 's, 's :: emptyCNameList)
       )        
     )
     ||
     (family 'OTMsg-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-0_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsg-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-1_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsg-2_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-2_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsg-3_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'n) --> 
       nf('om : bool <- read ('OTMsg-3_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m0 : bool <- read ('OTMsg-0['n 'm 'k]), return (), 'm0 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-0_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m1 : bool <- read ('OTMsg-1['n 'm 'k]), return (), 'm1 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-1_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-2_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m2 : bool <- read ('OTMsg-2['n 'm 'k]), return (), 'm2 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-2_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTMsgRcvd-3_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'n) --> 
       nf('m3 : bool <- read ('OTMsg-3['n 'm 'k]), return (), 'm3 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'n) --> 
       nf('om : unit <- read ('OTMsgRcvd-3_ot_adv['n 'm 'k]), return 'om, 'om :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoice-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-0['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-0_ot_adv['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoice-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-1['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('oc : bool <- read ('OTChoice-1_ot_adv['n 'm 'k]), return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoiceRcvd-0_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c0 : bool <- read ('OTChoice-0['n 'm 'k]), return (), 'c0 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read ('OTChoiceRcvd-0_ot_adv['n 'm 'k]), 
          return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTChoiceRcvd-1_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isHonest 'm) --> 
       nf('c1 : bool <- read ('OTChoice-1['n 'm 'k]), return (), 'c1 :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isSemiHonest 'm) --> 
       nf('oc : unit <- read ('OTChoiceRcvd-1_ot_adv['n 'm 'k]), 
          return 'oc, 'oc :: emptyCNameList)
     )   
   )
   ||
   (family 'OTOut_ot_adv ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     (when (apply 'isSemiHonest 'm) --> 
       nf('out : bool <- read ('OTOut['n 'm 'k]), return 'out, 'out :: emptyCNameList)
     ) 
     ;;
     (when (apply 'isHonest 'm) --> 
       nf('out : bool <- read ('OTOut_ot_adv['n 'm 'k]), return 'out, 'out :: emptyCNameList)
     )   
   )
   ||
   (family 'OTOut ('n 'm 'k) 
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
     nf( ('m0 : bool <- read ('OTMsg-0['n 'm 'k]))
         ('m1 : bool <- read ('OTMsg-1['n 'm 'k]))
         ('m2 : bool <- read ('OTMsg-2['n 'm 'k]))
         ('m3 : bool <- read ('OTMsg-3['n 'm 'k]))
         ('c0 : bool <- read ('OTChoice-0['n 'm 'k]))
         ('c1 : bool <- read ('OTChoice-1['n 'm 'k])),
         if 'c0 
         then (if 'c1 then return 'm3 else return 'm2)
         else (if 'c1 then return 'm1 else return 'm0),
         'm0 :: 'm1 :: 'm2 :: 'm3 :: 'c0 :: 'c1 :: emptyCNameList
      )        
   ) 

   )
   

   ) *** end new

  .             
   
  op restrFinal : -> Protocol .  
  
  eq restrFinal = 
   newfamily 'SendOutShare ('n 'm 'k) 
             ((bound (N + 2)) (bound (N + 2)) (bound K)) : bool in          
   newfamily 'OutShare ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) : bool in
   newfamily 'OutShareSum ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) : bool in
   ( *** start new
     (family 'SendOutShare ('m 'n 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isOutputWire 'k) --> 
         nf('s : bool <- read ('Share['n 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (otherwise --> 
         nf('s : bool <- read ('SendOutShare['m 'n 'k]), return 's, 's :: emptyCNameList)
       )       
     )
     ||
     (family 'SendOutShare_party_adv ('m 'n 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendOutShare['m 'n 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('SendOutShare_party_adv['m 'n 'k]), 
            return 's, 's :: emptyCNameList)
       )       
     )
     ||
     (family 'RcvdOutShare_party_adv ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('SendOutShare['n 'm 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('RcvdOutShare_party_adv['n 'm 'k]), 
            return 's, 's :: emptyCNameList)
       )       
     )
     || 
     (family 'OutShare ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
      nf('s : bool <- read ('SendOutShare['n 'm 'k]), return 's, 's :: emptyCNameList)       
     )
     ||
     (family 'OutShare_party_adv ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('OutShare['n 'm 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('OutShare_party_adv['n 'm 'k]), 
            return 's, 's :: emptyCNameList)
       )       
     )
     ||
     (family 'OutShareSum ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when ('m =T= 0) --> 
         nf('s : bool <- read ('OutShare['n 0 'k]), 
            return 's, 's :: emptyCNameList)
       )
       ;;
       (otherwise -->
         nf( ('s : bool <- read ('OutShareSum['n ('m -- 1) 'k]))
             ('x : bool <- read ('OutShare['n 'm 'k])),
             return (ap 'xor pair('s, 'x)),
             's :: 'x :: emptyCNameList
         )
       )
     )        
     ||
     (family 'OutShareSum_party_adv ('n 'm 'k)
             (bound (N + 2) (bound (N + 2)) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('OutShareSum['n 'm 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('OutShareSum_party_adv['n 'm 'k]), 
            return 's, 's :: emptyCNameList)
       )       
     )
     ||
     (family 'Out ('n 'k)
             ((bound (N + 2)) (bound K)) ::=
      nf('s : bool <- read ('OutShareSum['n (N + 1) 'k]),
         return 's, 's :: emptyCNameList)       
     )
     ||
     (family 'Out_party_adv ('n 'k)
             (bound (N + 2) (bound K)) ::=
       (when (apply 'isSemiHonest 'n) --> 
         nf('s : bool <- read ('Out['n 'k]), return 's, 's :: emptyCNameList)
       ) 
       ;; 
       (when (apply 'isHonest 'n)  --> 
         nf('s : bool <- read ('Out_party_adv['n 'k]), 
            return 's, 's :: emptyCNameList)
       )       
     )
   ) *** end new

  .
  
  
endm

smod EXECUTE is
 pr GMWN .
 pr STRATS .
 
 strat eliminateOTDivergent @ ProtocolConfig .
 sd eliminateOTDivergent := 
           applyDivergeChannel3FamilyBranch('OTMsg-0, 'OTMsg-0_ot_adv, 
                                           apply 'isSemiHonest 'n, 'om, bool)
         ; applyAllSameCases('OTMsg-0_ot_adv)
         
         ; applyDivergeChannel3FamilyBranch('OTMsg-0, 'OTMsgRcvd-0_ot_adv, 
                                            apply 'isHonest 'n, 'om, unit)
         ; applyAllSameCases('OTMsgRcvd-0_ot_adv)
         
         ; applyDivergeChannel3FamilyBranch('OTMsg-1, 'OTMsg-1_ot_adv, 
                                           apply 'isSemiHonest 'n, 'om, bool)
         ; applyAllSameCases('OTMsg-1_ot_adv)
         
         ; applyDivergeChannel3FamilyBranch('OTMsg-1, 'OTMsgRcvd-1_ot_adv, 
                                            apply 'isHonest 'n, 'om, unit)
         ; applyAllSameCases('OTMsgRcvd-1_ot_adv)
         ; applyDivergeChannel3FamilyBranch('OTMsg-2, 'OTMsg-2_ot_adv, 
                                           apply 'isSemiHonest 'n, 'om, bool)
         ; applyAllSameCases('OTMsg-2_ot_adv)
         
         ; applyDivergeChannel3FamilyBranch('OTMsg-2, 'OTMsgRcvd-2_ot_adv, 
                                            apply 'isHonest 'n, 'om, unit)
         ; applyAllSameCases('OTMsgRcvd-2_ot_adv)
         ; applyDivergeChannel3FamilyBranch('OTMsg-3, 'OTMsg-3_ot_adv, 
                                           apply 'isSemiHonest 'n, 'om, bool)
         ; applyAllSameCases('OTMsg-3_ot_adv)
         
         
         ; applyDivergeChannel3FamilyBranch('OTMsg-3, 'OTMsgRcvd-3_ot_adv, 
                                            apply 'isHonest 'n, 'om, unit)
         ; applyAllSameCases('OTMsgRcvd-3_ot_adv)
                 
         ; alpha-family-three[
           fns:NameWithScripts <- 'OTChoice-0, 
           q1:Qid <- 'm,
           q2:Qid <- 'n,
           q3:Qid <- 'k,
           q4:Qid <- 'n,
           q5:Qid <- 'm,
           q6:Qid <- 'k]  
           
          ; applyDivergeChannel3FamilyBranch('OTChoice-0, 'OTChoice-0_ot_adv, 
                                             apply 'isSemiHonest 'm, 'oc, bool)
          ; applyAllSameCases('OTChoice-0_ot_adv)
          ; applyDivergeChannel3FamilyBranch('OTChoice-0, 'OTChoiceRcvd-0_ot_adv, 
                                             apply 'isHonest 'm, 'oc, unit)
          ; applyAllSameCases('OTChoiceRcvd-0_ot_adv)
          ; alpha-family-three[
           fns:NameWithScripts <- 'OTChoice-0, 
           q1:Qid <- 'n,
           q2:Qid <- 'm,
           q3:Qid <- 'k,
           q4:Qid <- 'm,
           q5:Qid <- 'n,
           q6:Qid <- 'k] 
          ; alpha-family-three[
           fns:NameWithScripts <- 'OTChoice-1, 
           q1:Qid <- 'm,
           q2:Qid <- 'n,
           q3:Qid <- 'k,
           q4:Qid <- 'n,
           q5:Qid <- 'm,
           q6:Qid <- 'k]  
        
          ; applyDivergeChannel3FamilyBranch('OTChoice-1, 'OTChoice-1_ot_adv, 
                                             apply 'isSemiHonest 'm, 'oc, bool)
                                               
          ; applyAllSameCases('OTChoice-1_ot_adv)
          
          ; applyDivergeChannel3FamilyBranch('OTChoice-1, 'OTChoiceRcvd-1_ot_adv, 
                                             apply 'isHonest 'm, 'oc, unit)
                                             
          ; applyAllSameCases('OTChoiceRcvd-1_ot_adv)
          
          ; alpha-family-three[
           fns:NameWithScripts <- 'OTChoice-1, 
           q1:Qid <- 'n,
           q2:Qid <- 'm,
           q3:Qid <- 'k,
           q4:Qid <- 'm,
           q5:Qid <- 'n,
           q6:Qid <- 'k]  
          
          ; applySubstDivergeFamily('OTMsg-0, 'OTOut, 'o, bool)
          
          ; applyDivergeChannel3FamilyBranch('OTOut, 'OTOut_ot_adv, 
                                           apply 'isSemiHonest 'm, 'out, bool)
          ; applyAllSameCases('OTOut_ot_adv) 
    
 .
 
endsm 


*** KEEP!
set trace off .

srew [1] pConfig(sig,
          ('InRcvd_party_adv @ (N + 2) 'I :: unit) 
           ('InShareGen-Sum_party_adv @ (N + 1) (N + 2) 'I :: bool)
           ('InShareGen_party_adv @ (N + 2) (N + 2) 'I :: bool)
           ('InShare_party_adv @ (N + 2) (N + 2) 'I :: bool)
           ('In_party_adv @ (N + 2) 'I :: bool)  
           ('OTChoice-0_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTChoice-1_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTChoiceRcvd-0_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTChoiceRcvd-1_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTMsg-0_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsg-1_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsg-2_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsg-3_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsgRcvd-0_ot_adv @ (N + 2) (N + 2) K :: unit)
           ('OTMsgRcvd-1_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTMsgRcvd-2_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTMsgRcvd-3_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTOut_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('Out @ (N + 2) K :: bool)    
           ('OutShareSum_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('OutShare_party_adv @ (N + 2) (N + 2) K :: bool)
           ('Out_party_adv @ (N + 2) K :: bool)  
           ('RcvdInShare_party_adv @ (N + 2) (N + 2) 'I :: bool)  
           ('RcvdOutShare_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('SendInShare_party_adv @ (N + 2) (N + 2) 'I :: bool) 
           ('SendOutShare_party_adv @ (N + 2) (N + 2) K :: bool)  
           ('Share_party_adv @ (N + 2) K :: bool)
           ('Bit_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('RcvdBit_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('SendBit_party_adv @ (N + 2) (N + 2) K :: bool)
           ('BitSum_party_adv @ (N + 2) (N + 2) K :: bool)  
           ('In @ (N + 2) 'I :: bool)
             ,
             real,
             'In @ (N + 2) 'I, 
             getOutputs(real),
             genA) 
using    sugar-newNF
       ; (moveProtocolUnderNewNF !)
       ; (lift-inner-new-nf !) 
       
       *** ; get-structure

       ; applyAddToGroupCases('OTChoice-0_ot_adv, 'Circuit)
       ; applyAddToGroupCases('OTChoice-1_ot_adv, 'Circuit)
       ; applyAddToGroupCases('OTChoiceRcvd-0_ot_adv, 'Circuit)
       ; applyAddToGroupCases('OTChoiceRcvd-1_ot_adv, 'Circuit)
       ; applyAddToGroupCases('OTMsg-0_ot_adv, 'Circuit)
       ; applyAddToGroupCases('OTMsg-1_ot_adv, 'Circuit)
       ; applyAddToGroupCases('OTMsg-2_ot_adv, 'Circuit)
       ; applyAddToGroupCases('OTMsg-3_ot_adv, 'Circuit)
       ; applyAddToGroupCases('OTMsgRcvd-0_ot_adv, 'Circuit)
       ; applyAddToGroupCases('OTMsgRcvd-1_ot_adv, 'Circuit)
       ; applyAddToGroupCases('OTMsgRcvd-2_ot_adv, 'Circuit)
       ; applyAddToGroupCases('OTMsgRcvd-3_ot_adv, 'Circuit)
       ; applyAddToGroupCases('OTOut, 'Circuit)
       ; applyAddToGroupCases('OTOut_ot_adv, 'Circuit)

       ; SYM[P1:Protocol <- restr]{
         sugar-newNF
        ; moveNewToFront
        ; reorder-newNF[ql2:CNameList <-
        'SendInShare :: 'OTMsg-0 :: 'OTMsg-1 :: 'OTMsg-2 :: 'OTMsg-3 :: 'OTChoice-0 :: 'OTChoice-1 :: 'OTOut :: 'SendOutShare
    :: 'InShare :: 'Share :: 'InShareGen :: 'InShareGen-Sum :: 'OutShare :: 'OutShareSum :: 'SendBit :: 'RcvdBit :: 'Bit
    :: 'BitSum :: emptyCNameList]
       }
        *** ; applyGetChannel('SendInShare_party_adv)
       ; sugar-newNF
       ; moveNewToFront
       ; applySubstFamily3IdxCase('SendInShare, 'SendInShare_party_adv, 'm, 'n, 'i, 
         nf('in : bool <- read ('InShareGen['m 'n 'i]), 
                              return 'in, 'in :: emptyCNameList),
         nf('in : bool <- read ('InShareGen['m 'n 'i]), 
                              return 'in, 'in :: emptyCNameList),
         apply 'isSemiHonest 'n)
       ; alpha-family-three[
           fns:NameWithScripts <- 'SendInShare, 
           q1:Qid <- 'm,
           q2:Qid <- 'n,
           q3:Qid <- 'i,
           q4:Qid <- 'n,
           q5:Qid <- 'm,
           q6:Qid <- 'i]
       ; applySubstFamily3IdxCase('SendInShare, 'RcvdInShare_party_adv, 'n, 'm, 'i, 
         nf('in : bool <- read ('InShareGen['n 'm 'i]), 
                              return 'in, 'in :: emptyCNameList),
         nf('in : bool <- read ('InShareGen['n 'm 'i]), 
                              return 'in, 'in :: emptyCNameList),
         apply 'isSemiHonest 'n)    
       ; substNFFamiliesThree('SendInShare, 'InShare, 
                            nf('in : bool <- read ('InShareGen['n 'm 'i]), 
                               return 'in, 'in :: emptyCNameList)
                           )                      
        
       ; absorbFamily('SendInShare) 
       ; select-branch-family-p[bt:BoolTerm <- apply 'isInputGate 'k]{
           eliminateOTDivergent          
         } 
       ; select-branch-family-p[bt:BoolTerm <- apply 'isNotGate 'k]{
           eliminateOTDivergent          
         }  
       ; select-branch-family-p[bt:BoolTerm <- apply 'isXorGate 'k]{
           eliminateOTDivergent          
         } 
       ; applyGetChannel('Circuit)   
             
.


***(
srew [1] pConfig(sig,
           ('InRcvd_party_adv @ (N + 2) 'I :: unit) 
           ('InShareGen-Sum_party_adv @ (N + 1) (N + 2) 'I :: bool)
           ('InShareGen_party_adv @ (N + 2) (N + 2) 'I :: bool)
           ('InShare_party_adv @ (N + 2) (N + 2) 'I :: bool)
           ('In_party_adv @ (N + 2) 'I :: bool)  
           ('OTChoice-0_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTChoice-1_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTChoiceRcvd-0_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTChoiceRcvd-1_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTMsg-0_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsg-1_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsg-2_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsg-3_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsgRcvd-0_ot_adv @ (N + 2) (N + 2) K :: unit)
           ('OTMsgRcvd-1_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTMsgRcvd-2_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTMsgRcvd-3_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTOut_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('Out @ (N + 2) K :: bool)    
           ('OutShareSum_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('OutShare_party_adv @ (N + 2) (N + 2) K :: bool)
           ('Out_party_adv @ (N + 2) K :: bool)  
           ('RcvdInShare_party_adv @ (N + 2) (N + 2) 'I :: bool)  
           ('RcvdOutShare_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('SendInShare_party_adv @ (N + 2) (N + 2) 'I :: bool) 
           ('SendOutShare_party_adv @ (N + 2) (N + 2) K :: bool)  
           ('Share_party_adv @ (N + 2) K :: bool)
           ('Bit_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('RcvdBit_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('SendBit_party_adv @ (N + 2) (N + 2) K :: bool)
           ('BitSum_party_adv @ (N + 2) (N + 2) K :: bool)  
           ('In @ (N + 2) 'I :: bool)
             ,
             restr,
             'In @ (N + 1) 'I, 
             getOutputs(real),
             genA) 
using     sugar-newNF
        ; moveNewToFront
        ; reorder-newNF[ql2:CNameList <-
        'SendInShare :: 'OTMsg-0 :: 'OTMsg-1 :: 'OTMsg-2 :: 'OTMsg-3 :: 'OTChoice-0 :: 'OTChoice-1 :: 'OTOut :: 'SendOutShare
    :: 'InShare :: 'Share :: 'InShareGen :: 'InShareGen-Sum :: 'OutShare :: 'OutShareSum :: 'SendBit :: 'RcvdBit :: 'Bit
    :: 'BitSum :: emptyCNameList]
.
)
  
       
***(
       ; (moveProtocolUnderNewNF !)
       ; (lift-inner-new-nf !) 
       ; reorder-newNF[ql2:CNameList <- 
          'SendInShare :: 'OTMsg-0 :: 'OTMsg-1 :: 'OTMsg-2 :: 'OTMsg-3 :: 'OTChoice-0 :: 'OTChoice-1 :: 'OTOut :: 'SendOutShare :: 'InShare :: 'Share :: 'InShare$ :: 'InShare$Sum :: 'OutShare :: 'OutShareSum :: 'SendBit :: 'RcvdBit :: 'Bit :: 'BitSum :: emptyCNameList  
         ]
       ; get-structure
    
       *** ; applyGetChannel('SendInShare)  ***   tt ('OTChoice-0_ot_adv)
       *** ; applyAddToGroupCases('OTChoice-0_ot_adv, 'Circuit)
       *** ; applyGetChannel('Circuit)
.
)

***(
red typeOf(sig,
           ('InRcvd_party_adv @ (N + 1) 'I :: unit) 
           ('InShareGen-Sum_party_adv @ (N + 1) (N + 1) 'I :: bool)
           ('InShareGen_party_adv @ (N + 1) (N + 1) 'I :: bool)
           ('InShare_party_adv @ (N + 1) (N + 1) 'I :: bool)
           ('In_party_adv @ (N + 1) 'I :: bool)  
           ('OTChoice-0_ot_adv @ (N + 1) (N + 1) K :: bool) 
           ('OTChoice-1_ot_adv @ (N + 1) (N + 1) K :: bool) 
           ('OTChoiceRcvd-0_ot_adv @ (N + 1) (N + 1) K :: unit) 
           ('OTChoiceRcvd-1_ot_adv @ (N + 1) (N + 1) K :: unit) 
           ('OTMsg-0_ot_adv @ (N + 1) (N + 1) K :: bool) 
           ('OTMsg-1_ot_adv @ (N + 1) (N + 1) K :: bool) 
           ('OTMsg-2_ot_adv @ (N + 1) (N + 1) K :: bool) 
           ('OTMsg-3_ot_adv @ (N + 1) (N + 1) K :: bool) 
           ('OTMsgRcvd-0_ot_adv @ (N + 1) (N + 1) K :: unit)
           ('OTMsgRcvd-1_ot_adv @ (N + 1) (N + 1) K :: unit) 
           ('OTMsgRcvd-2_ot_adv @ (N + 1) (N + 1) K :: unit) 
           ('OTMsgRcvd-3_ot_adv @ (N + 1) (N + 1) K :: unit) 
           ('OTOut_ot_adv @ (N + 1) (N + 1) K :: bool) 
           ('Out @ (N + 1) K :: bool)    
           ('OutShareSum_party_adv @ (N + 1) (N + 1) K :: bool) 
           ('OutShare_party_adv @ (N + 1) (N + 1) K :: bool)
           ('Out_party_adv @ (N + 1) K :: bool)  
           ('RcvdInShare_party_adv @ (N + 1) (N + 1) 'I :: bool)  
           ('RcvdOutShare_party_adv @ (N + 1) (N + 1) K :: bool) 
           ('SendInShare_party_adv @ (N + 1) (N + 1) 'I :: bool) 
           ('SendOutShare_party_adv @ (N + 1) (N + 1) K :: bool)  
           ('Share_party_adv @ (N + 1) K :: bool)
           ('Bit_party_adv @ (N + 1) (N + 1) K :: bool) 
           ('RcvdBit_party_adv @ (N + 1) (N + 1) K :: bool) 
           ('SendBit_party_adv @ (N + 1) (N + 1) K :: bool)
           ('BitSum_party_adv @ (N + 1) (N + 1) K :: bool)  
           ('In @ (N + 1) 'I :: bool)
             ,
             'In @ (N + 1) 'I, genA, real) .
) 


***(
set trace off .

red typeOf(sig,
           ('InRcvd_party_adv @ (N + 2) 'I :: unit) 
           ('InShareGen-Sum_party_adv @ (N + 1) (N + 2) 'I :: bool)
           ('InShareGen_party_adv @ (N + 2) (N + 2) 'I :: bool)
           ('InShare_party_adv @ (N + 2) (N + 2) 'I :: bool)
           ('In_party_adv @ (N + 2) 'I :: bool)  
           ('OTChoice-0_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTChoice-1_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTChoiceRcvd-0_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTChoiceRcvd-1_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTMsg-0_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsg-1_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsg-2_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsg-3_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('OTMsgRcvd-0_ot_adv @ (N + 2) (N + 2) K :: unit)
           ('OTMsgRcvd-1_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTMsgRcvd-2_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTMsgRcvd-3_ot_adv @ (N + 2) (N + 2) K :: unit) 
           ('OTOut_ot_adv @ (N + 2) (N + 2) K :: bool) 
           ('Out @ (N + 2) K :: bool)    
           ('OutShareSum_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('OutShare_party_adv @ (N + 2) (N + 2) K :: bool)
           ('Out_party_adv @ (N + 2) K :: bool)  
           ('RcvdInShare_party_adv @ (N + 2) (N + 2) 'I :: bool)  
           ('RcvdOutShare_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('SendInShare_party_adv @ (N + 2) (N + 2) 'I :: bool) 
           ('SendOutShare_party_adv @ (N + 2) (N + 2) K :: bool)  
           ('Share_party_adv @ (N + 2) K :: bool)
           ('Bit_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('RcvdBit_party_adv @ (N + 2) (N + 2) K :: bool) 
           ('SendBit_party_adv @ (N + 2) (N + 2) K :: bool)
           ('BitSum_party_adv @ (N + 2) (N + 2) K :: bool)  
           ('In @ (N + 2) 'I :: bool)
             ,
             'In @ (N + 2) 'I, genA, real) .          


red typeOf(sig, 
           ('Out @ (N + 2) K :: bool)
           ('Out_id_adv @ (N + 2) K :: bool)
           ('In_id_adv @ (N + 2) 'I :: bool)
           ('InRcvd_id_adv @ (N + 2) 'I :: unit)
           ('In @ (N + 2) 'I :: bool)
           , 'In @ (N + 2) 'I, genA, ideal) .
          
)  

red toJSON restr delta .

