***( IPDL

  Copyright : (C) 2022-23, Kristina Sojakova, Mihai Codescu
  License   : GNU General Public License v3.0 or later (GPL-3.0-or-later)
  Authors   : Mihai Codescu <mscodescu@gmail.com>
              Kristina Sojakova <sojakova.kristina@gmail.com>

Symmetric-Key Encryption: CPA $ -To-CPA Security
Sec. 2 of doc/case_studies.pdf


)
load ../src/strategies

mod PSEUDORANDOM is
 protecting APPROX-EQUALITY .
 
 op q : -> Nat .
 
 op msg  : -> Type .
 op key  : -> Type .
 op ctxt : -> Type .
 
 op zerosF : -> SigElem .
 eq zerosF = 'zeros : unit ~> msg .
 
 op unifCtxtF : -> SigElem .
 eq unifCtxtF = 'unifCtxt : unit ~>> ctxt .
 
 op genKeyF : -> SigElem .
 eq genKeyF = 'genKey : unit ~>> key .
 
 op encF : -> SigElem .
 eq encF = 'enc : (msg * key) ~>> ctxt .
 
 op sig : -> Signature .
 eq sig = unifCtxtF encF genKeyF zerosF .
 
  op lrLeft : -> Protocol .
 eq lrLeft = 
  new 'Key : key in
   (
    ('Key ::= nf(emptyBRList, samp ('genKey < () >), nil))
    ||
    (family ('Enc[bound q]) 'i (bound q) ::= 
      nf( ('ml : msg <- read ('Msg-L['i]))
          ('mr : msg <- read ('Msg-R['i]))
          ('k : key <- read 'Key),
          samp ('enc < pair('ml, 'k) >),
           'ml 'mr 'k)
    ) 
   ) 
 .
 
 op lrRight : -> Protocol .
 eq lrRight = 
  new 'Key : key in
   (
    ('Key ::= nf(emptyBRList, samp ('genKey < () >), nil))
    ||
    (family ('Enc[bound q]) 'i (bound q) ::= 
      nf( ('ml : msg <- read ('Msg-L['i]))
          ('mr : msg <- read ('Msg-R['i]))
          ('k : key <- read 'Key),
          samp ('enc < pair('mr, 'k) >),
           'ml 'mr 'k)
    ) 
   ) 
 .
 
 op cmLeft : -> Protocol .
 eq cmLeft = 
  new 'Key : key in
   (
    ('Key ::= nf(emptyBRList, samp ('genKey < () >), nil))
    ||
    (family ('Enc[bound q]) 'i (bound q) ::= 
      nf( ('m : msg <- read ('Msg['i]))
          ('k : key <- read 'Key),
          samp ('enc < pair('m, 'k) >),
           'm 'k )
    ) 
   ) 
 .

 
  op int1 : -> Protocol .
 eq int1 = 
     newfamily ('Msg[bound q]) 'i (bound q) : msg in 
     (
     cmLeft ||
     (family ('Msg[bound q]) 'i (bound q) ::= 
      nf(
      ('ml : msg <- read ('Msg-L['i]))
      ('mr : msg <- read ('Msg-R['i])),
      return 'ml,
      'ml 'mr
      )
    )
     )
 .
 
 op int2 : -> Protocol .
 eq int2 =
    newfamily ('Msg[bound q]) 'i (bound q) : msg in
      ( 
    (family ('Enc[bound q]) 'i (bound q) ::= 
      nf( 'm : msg <- read ('Msg['i]),
          samp ('unifCtxt < () >),
          'm )
    )
    ||
     (family ('Msg[bound q]) 'i (bound q) ::= 
      nf(
      ('ml : msg <- read ('Msg-L['i]))
      ('mr : msg <- read ('Msg-R['i])),
      return 'mr,
      'ml 'mr 
      )
    ) 
    )      
 .
 
 op int3 : -> Protocol .
 eq int3 =
   newfamily ('Msg[bound q]) 'i (bound q) : msg in
      (
          (family ('Msg[bound q]) 'i (bound q) ::= 
      nf(
      ('ml : msg <- read ('Msg-L['i]))
      ('mr : msg <- read ('Msg-R['i])),
      return 'mr,
      'ml 'mr
      )
    )
    ||
    new 'Key : key in
   (
    ('Key ::= nf(emptyBRList, samp ('genKey < () >), nil))
    ||
    (family ('Enc[bound q]) 'i (bound q) ::= 
      nf( ('m : msg <- read ('Msg['i]))
          ('k : key <- read 'Key),
          samp ('enc < pair('m, 'k) >),
          'm 'k )
    ) 
   )

    ) 
 .
 
 
endm 

smod EXECUTE is
 pr STRATS .
 pr PSEUDORANDOM .
 
 var i m ml mr k l ka kb C sk Key Enc Msg Msg-L Msg-R : Qid .
 var Sigma : Signature .
 var Delta Delta' : ChannelContext .
 var Gamma : TypeContext .
 var I O : Set{CNameBound} .
 var li : List{NatTerm} .
 var A : Set{BoolTerm} .
 var wid len : Nat . 
 var pConf : ProtocolConfig .
 var aConf : ApproxEqConfig .
 var P : Protocol .
 
  crl [cm] : 
    aConfig(Sigma, Delta ,
            newNF( < Key : key >, 
   (
    (Key ::= nf(emptyBRList, samp ('genKey < () >), nil))
    ||
    (family (Enc[bound q]) i (bound q) ::= 
      nf( (m : msg <- read (Msg[i]))
          (k : key <- read Key),
          samp ('enc < pair(m, k) >),
          m k )
    ) 
   ), chn Key) , I, O, A, width wid, length len
   )
   =>
   aConfig(Sigma, Delta ,
            newNF( < Key : key >, 
   (
    (Key ::= nf(emptyBRList, samp ('genKey < () >), nil))
    ||
    (family (Enc[bound q]) i (bound q) ::= 
      nf( (m : msg <- read (Msg[i]))
          (k : key <- read Key),
          samp ('enc < pair(ap 'zeros (), k) >),
          m k)
    ) 
   ), chn Key) , I, O, A, width (wid + 1), length (diff(len + | I |, 1))
   )
   
   if
   
    (fam (Msg [bound q])) in I 
    
    /\
    
    O == fam (Enc[bound q])
    
   .
   
   strat applyCM @ ProtocolConfig .
   sd applyCM :=
    match aConf s.t. aConfStartsWithNew aConf
    ? CONG-NEW-NF-APPROX{applyCM}
    : CONG-COMP-APPROX{cm}
     .  
 
 crl [cpaD] : 
    aConfig(Sigma, Delta ,
            newNF( < Key : key >, 
   (
    (Key ::= nf(emptyBRList, samp ('genKey < () >), nil))
    ||
    (family (Enc[bound q]) i (bound q) ::= 
      nf( (m : msg <- read (Msg[i]))
          (k : key <- read Key),
          samp ('enc < pair(m, k) >),
          m k)
    ) 
   ), chn Key) , I, O, A, width wid, length len
   )
   =>
   aConfig(Sigma, Delta ,
           
    family (Enc[bound q]) i (bound q) ::= 
      nf( m : msg <- read (Msg[i]),
          samp ('unifCtxt < () >),
          m)
    
    , I, O, A, width (wid + 1), length (diff(len + | I |, 1))
   )
   
   if
   
    (fam (Msg [bound q])) in I 
    
    /\
    
    O == fam (Enc [bound q])
    
   .
   
   strat applyCPAD @ ProtocolConfig .
   sd applyCPAD :=
    match aConf s.t. aConfStartsWithNew aConf
    ? CONG-NEW-NF-APPROX{applyCPAD}
    : CONG-COMP-APPROX{cpaD}
     .     

endsm

srew [1]
 aConfig(sig,(fam ('Msg-L[bound q]) :: msg) 
              (fam ('Msg-R[bound q]) :: msg)
              (fam ('Enc[bound q]) :: ctxt), lrLeft, 
         insert(fam ('Msg-L[bound q]) , fam ('Msg-R[bound q])), 
         getOutputs(lrLeft), empty, width 0, length 0)
using 
 TRANS{
 TRANS{
 TRANS{
 TRANS{
 STRICT{
    sugar-newNF
    ; SYM[P1:Protocol <- int1]{
         sugar-newNF
     ; moveNewToFront
     ; foldNFFamily(fam ('Msg[bound q]), fam ('Enc[bound q]))
       }
     ; sugar-newNF 
 },
 applyCPAD
 },
 STRICT{
     foldNFFamily(fam ('Msg[bound q]), fam ('Enc[bound q]))
   ; SYM[P1:Protocol <- int2]{
       sugar-newNF
       ; foldNFFamily(fam ('Msg[bound q]), fam ('Enc[bound q]))
     }
   ; sugar-newNF  
 }
 },
 SYM-APPROX[Q:Protocol <- int3]{
  TRANS{
      STRICT{
         sugar-newNF
      },
      applyCPAD
      }
 }
 },
 STRICT{
     sugar-newNF
   ; moveNewToFront
   ; foldNFFamily(fam ('Msg[bound q]), fam ('Enc[bound q]))
   ; SYM[P1:Protocol <- lrRight]{
       sugar-newNF
     }  
 }
 }
.   
       


