***( IPDL

  Copyright : (C) 2022-23, Kristina Sojakova
  License   : GNU General Public License v3.0 or later (GPL-3.0-or-later)
  Authors   : Mihai Codescu <mscodescu@gmail.com>
              Kristina Sojakova <sojakova.kristina@gmail.com>

Hello world-like example,
see Sec. 2.7 of doc/tech_report_maude.pdf

)

load ../src/strategies

mod HELLO-WORLD is
 protecting APPROX-EQUALITY .
 
 op xorF : -> SigElem .
 eq xorF = 'xor : (bool * bool) ~> bool .
 
 op flipF : -> SigElem .
 eq flipF = 'flip : unit ~>> bool .
 
 op sig : -> Signature .
 eq sig = xorF flipF .
 
 op idealPlusSim : -> Protocol .
 eq idealPlusSim = 
    new 'Ctxt : bool in
    new 'LeakCtxt_id_adv : bool in
    (
    ('LeakCtxt_id_adv ::= 
       nf(('c : bool <- read 'Ctxt),
          return 'c,
          'c :: emptyCNameList )
    )  
    ||
    ('LeakCtxt_Alice_adv ::= 
       nf('c : bool <- read 'LeakCtxt_id_adv,
          return 'c, 
          'c :: emptyCNameList)
    )
    ||
    ('Ctxt ::= 
       nf( 'm : bool <- read 'In,
           samp ('flip < () >),
           'm :: emptyCNameList)
    )
    )
 .
 
  op real : -> Protocol .
  eq real = 
    new 'Key : bool in
    new 'Ctxt : bool in
    (
     ('Key ::= samp ('flip < () >))
     || 
     ('Ctxt ::= 
       nf( ('m : bool <- read 'In)
            'k : bool <- read 'Key,
            return (ap 'xor pair('m, 'k)),
           'm :: 'k :: emptyCNameList
               )
     )
     ||
     ('LeakCtxt_Alice_adv ::= 
       nf( 'c : bool <- read 'Ctxt ,
           return 'c,
          'c :: emptyCNameList )  
     )
    ) 
         
  .
  
endm 
 
smod EXECUTE is
  protecting STRATS .
  protecting HELLO-WORLD .
 
 var x y : Qid . 
 var Sigma : Signature .
 var Delta : ChannelContext .
 var Gamma : TypeContext .
 var I O : Set{CNameBound} .
 var A : Set{BoolTerm} .
 var cn f : ChannelName .
 var pConf : ProtocolConfig .
 var P : Protocol .
  
  rl [assumption] :
    rConfig(Sigma, Delta (f @ nil :: bool), Gamma (x : bool),
            y : bool <- samp ('flip < () >) ; 
            return (ap 'xor pair(x, y)), I, A, bool
            )
     => 
     rConfig(Sigma, Delta (f @ nil :: bool), Gamma (x : bool),
             samp ('flip < () >), I, A, bool)
  .  
  
  strat applyAssumption : ChannelName @ ProtocolConfig .
  sd applyAssumption(cn) := 
   match pConf s.t. startsWithNew pConf
    ? CONG-NEW-NF{applyAssumption(cn)}
    : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O, A) := pConf by pConf 
       using CONG-REACT[o:ChannelName <- cn]
                { cong-pre-nf{assumption} ; 
                  try (pre2Nf)}   
  .
   
 endsm
 

***(
srew [1] 
pConfig(sig, 
         ('In @ nil :: bool) 
         ('LeakCtxt_Alice_adv @ nil :: bool), 
         idealPlusSim, 
         'In @ nil, 
         getOutputs(idealPlusSim), 
         empty)
using 
       sugar-newNF
     ; foldNF('LeakCtxt_id_adv, 'LeakCtxt_Alice_adv) 
     ; foldNF('Ctxt, 'LeakCtxt_Alice_adv)    
.
)


srew [1] 
 pConfig(sig, 
         ('In @ nil :: bool) 
         ('LeakCtxt_Alice_adv @ nil :: bool), 
         real, 
         'In @ nil, 
         getOutputs(real), 
         empty)
using 
       sugar-newNF
     ; foldNF('Key, 'Ctxt)
     ; foldNF('Ctxt, 'LeakCtxt_Alice_adv)
     ; applyAssumption('LeakCtxt_Alice_adv)
     ; SYM[P1:Protocol <- idealPlusSim]{
       sugar-newNF
     ; foldNF('LeakCtxt_id_adv, 'LeakCtxt_Alice_adv) 
     ; foldNF('Ctxt, 'LeakCtxt_Alice_adv)  
     }
.  

***(
srew [1] 
 pConfig(('xor : bool * bool ~> bool) 'flip : unit ~>>
    bool, ('In @ nil :: bool) 'LeakCtxt_Alice_adv @ nil :: bool, newNF(<
    'Ctxt : bool >, ('Ctxt ::= preNF('m : bool <- read 'In, 'k : bool <-
    samp ('flip < () >) ; return (ap 'xor pair('m, 'k)), 'm ::
    emptyCNameList)) || 'LeakCtxt_Alice_adv ::= nf('c : bool <- read 'Ctxt,
    return 'c, 'c :: emptyCNameList), 'Ctxt :: emptyCNameList), 'In @ nil,
    'LeakCtxt_Alice_adv @ nil, empty)
using foldNF('Ctxt, 'LeakCtxt_Alice_adv)
   
.   
 )
***(
srew [1] 
 pConfig(('xor : bool * bool ~> bool) 'flip : unit ~>>
    bool, ('In @ nil :: bool) 'LeakCtxt_Alice_adv @ nil :: bool, 
     'LeakCtxt_Alice_adv ::= preNF(('m : bool <- read
    'In) 'c : bool <~ 'k : bool <- samp ('flip < () >) ; return (ap 'xor
    pair('m, 'k)), return 'c, 'm :: 'c :: emptyCNameList),
    'In @ nil, 'LeakCtxt_Alice_adv @ nil, empty)
using CONG-REACT{
        bind-ret-2-pre
     }
.    
)
 
***(
srew [1] 
 pConfig(('xor : bool * bool ~> bool) 'flip : unit ~>> bool, 
         ('In @ nil :: bool) 'LeakCtxt_Alice_adv @ nil :: bool, 
           newNF(emptyTypedCNameList, 
                 'LeakCtxt_Alice_adv ::= 
                    preNF('c : bool <~ preNF('m : bool <- read 'In, 
                                             'k : bool <- samp ('flip < () >) ; 
                                             return (ap 'xor pair('m, 'k)), 
                                             'm :: emptyCNameList), 
                           return 'c, 
                           'c :: emptyCNameList),
                  emptyCNameList), 
          'In @ nil, 
          'LeakCtxt_Alice_adv @ nil, 
          empty)
using liftInnerBindsNF('LeakCtxt_Alice_adv)
      *** CONG-NEW-NF{CONG-REACT{(bind-bind-pre or-else bind-bind-pre-pre) ; (read-det-pre !)}} 
.
)
 
***(

srew [1] 
 pConfig(sig, 
         ('In @ nil :: bool) 
         ('LeakCtxt_Alice_adv @ nil :: bool), 
         real, 
         'In @ nil, 
         getOutputs(real), 
         empty)
using 
   sugar-newNF
 ; foldNF('Flip, 'LeakCtxt_Alice_adv)   
 ; applyAssumption('LeakCtxt_Alice_adv)
.  


srew [1] 
 pConfig(sig, 
         ('In @ nil :: bool) 
         ('LeakCtxt_Alice_adv @ nil :: bool), 
         real, 
         'In @ nil, 
         getOutputs(real), 
         empty)
using 
   sugar-newNF
 ; foldNF('Flip, 'LeakCtxt_Alice_adv)   
 ; applyAssumption('LeakCtxt_Alice_adv)
 ; SYM[P1:Protocol <- idealPlusSim]{
     sugar-newNF 
   ; foldNF('LeakCtxt_id_adv, 'LeakCtxt_Alice_adv)   
   ; foldNF('Flip, 'LeakCtxt_Alice_adv)
   }
.  
)

