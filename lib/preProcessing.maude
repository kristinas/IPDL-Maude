***( IPDL

  Copyright : (C) 2022-23, Kristina Sojakova, Mihai Codescu
  License   : GNU General Public License v3.0 or later (GPL-3.0-or-later)
  Authors   : Mihai Codescu <mscodescu@gmail.com>
              Kristina Sojakova <sojakova.kristina@gmail.com>

Oblivious Transfer: 1-Out-Of-2 Pre-Processing
Sec. 6 in doc/case-studies.pdf

)

in ../src/strategies

mod PREPROCESSING is
 protecting PROTOCOL-EQUALITY .

 op msg : -> Type .

 op xorF : -> SigElem .
 eq xorF = 'xor : (msg * msg) ~> msg .
 
 op flipF : -> SigElem .
 eq flipF = 'flip : unit ~>> bool .

 op muMsgSym : -> SigElem .
 eq muMsgSym = 'mu_msg : unit ~>> msg .

 op idealPlusSim : -> Protocol .
 eq idealPlusSim = 
    new 'ChoiceEnc : bool in
    new 'Flip : bool in
    new 'Key0 : msg in
    new 'Key1 : msg in
    new 'MsgEnc0 : msg in
    new 'MsgEnc1 : msg in
    new 'LeakChoice_id_adv : bool in
    new 'LeakOut_id_adv : msg in  
    new 'SharedKey : msg in
    (
    ('Out ::= nf(('m0 : msg <- read 'In0)
                 ('m1 : msg <- read 'In1)
                 ('c : bool <- read 'Choice),
                 if 'c then return 'm1 else return 'm0,
                 'm0 :: 'm1 :: 'c :: emptyCNameList)
    )
    ||
    ('LeakChoice_id_adv ::= nf(('c : bool <- read 'Choice), 
                               return 'c, 
                               'c :: emptyCNameList)
    )
    ||
    ('LeakOut_id_adv ::= nf(('out : msg <- read 'Out), 
                               return 'out, 
                               'out :: emptyCNameList))
    ||
    ('Key0 ::= samp ('mu_msg < () >))
    ||
    ('Key1 ::= samp ('mu_msg < () >))
    || 
    ('Flip ::= samp ('flip < () >))
    ||
    ('LeakFlip_rec_adv ::= nf(('flip : bool <- read 'Flip), 
                               return 'flip, 
                               'flip :: emptyCNameList))
    ||
    ('SharedKey ::= nf(('k0 : msg <- read 'Key0), 
                               return 'k0, 
                               'k0 :: emptyCNameList))
    ||
    ('LeakSharedKey_rec_adv ::= nf(('k0 : msg <- read 'Key0), 
                               return 'k0, 
                               'k0 :: emptyCNameList))
    ||
    ('LeakChoice_rec_adv ::= nf(('leakChoice : bool <- read 'LeakChoice_id_adv), 
                               return 'leakChoice, 
                               'leakChoice :: emptyCNameList)
    )
    ||
    ('ChoiceEnc ::= nf(('f : bool <- read 'Flip)
                    ('leakChoice : bool <- read 'LeakChoice_id_adv), 
                     if 'f then
                (if 'leakChoice then return False else return True)
              else 
                (if 'leakChoice then return True else return False),
                'f :: 'leakChoice :: emptyCNameList)
    )
    ||
    ( 'LeakChoiceEnc_rec_adv ::= nf(('e : bool <- read 'ChoiceEnc), 
                               return 'e, 
                               'e :: emptyCNameList)
    )
    ||
    ('MsgEnc0 ::= nf(
                  ('m : msg <- read 'LeakOut_id_adv )
                  ('k0 : msg <- read 'Key0 )
                  ('k1 : msg <- read 'Key1 )
                  ('leakChoice : bool <- read 'LeakChoice_id_adv) ,
                  if 'leakChoice then return 'k1
                        else return (ap 'xor pair('m, 'k0)),
                  'm :: 'k0 :: 'k1 :: 'leakChoice :: emptyCNameList
                        )
    )
     ||
    ('MsgEnc1 ::= nf(
                  ('m : msg <- read 'LeakOut_id_adv )
                  ('k0 : msg <- read 'Key0 )
                  ('k1 : msg <- read 'Key1 )
                  ('leakChoice : bool <- read 'LeakChoice_id_adv) ,
                   if 'leakChoice then return (ap 'xor pair('m, 'k0))
                   else return 'k1,
                   'm :: 'k0 :: 'k1 :: 'leakChoice :: emptyCNameList
                   )
     )              
    ||
    ('LeakMsgEnc0_rec_adv ::= nf(('msgEnc0 : msg <- read 'MsgEnc0), 
                               return 'msgEnc0, 
                               'msgEnc0 :: emptyCNameList)
    )
    ||
    ('LeakMsgEnc1_rec_adv ::= nf(('msgEnc1 : msg <- read 'MsgEnc1), 
                               return 'msgEnc1, 
                               'msgEnc1 :: emptyCNameList)
    )
    ||
    ('LeakOut_rec_adv ::= nf(('out : msg <- read 'LeakOut_id_adv), 
                               return 'out, 
                               'out :: emptyCNameList)
    )
  ) *** end new, leave here
   .

  op real : -> Protocol .
  eq real = 
    new 'ChoiceEnc : bool in
    new 'Flip : bool in
    new 'Key0 : msg in
    new 'Key1 : msg in
    new 'MsgEnc0 : msg in
    new 'MsgEnc1 : msg in
    new 'SharedKey : msg in   
   (
    ('Key0 ::= samp ('mu_msg < () >))
    ||
    ('Key1 ::= samp ('mu_msg < () >))
    || 
    ('Flip ::= samp ('flip < () >))
    ||
    ('LeakFlip_rec_adv ::= nf(('flip : bool <- read 'Flip), 
                               return 'flip, 
                               'flip :: emptyCNameList)
                               )
    ||
    ('SharedKey ::= nf(('k0 : msg <- read 'Key0 )
                    ('k1 : msg <- read 'Key1 )
                    ('f : bool <- read 'Flip),
                    if 'f then return 'k1 else return 'k0,
                    'k0 :: 'k1 :: 'f :: emptyCNameList )
    )
    ||
    ('LeakSharedKey_rec_adv ::= nf(('s : msg <- read 'SharedKey), 
                               return 's, 
                               's :: emptyCNameList)
                               )
    ||
    ('LeakChoice_rec_adv ::= nf(('c : bool <- read 'Choice), 
                               return 'c, 
                               'c :: emptyCNameList)
    )
    ||
    ('ChoiceEnc ::= nf(
                    ('f : bool <- read 'Flip )
                    ('c : bool <- read 'Choice),
                    if 'f then
                      (if 'c then return False 
                             else return True)
                    else 
                      (if 'c then return True
                             else return False),
                     'f :: 'c :: emptyCNameList        
                       )
    ) 
    ||
    ('LeakChoiceEnc_rec_adv ::= nf(('e : bool <- read 'ChoiceEnc), 
                               return 'e, 
                               'e :: emptyCNameList)) 
    || 
    ('MsgEnc0 ::= nf(
                  ('m0 : msg <- read 'In0 )
                  ('m1 : msg <- read 'In1 )
                  ('k0 : msg <- read 'Key0 )
                  ('k1 : msg <- read 'Key1 )
                  ('e : bool <- read 'ChoiceEnc)
                  ,
                  if 'e then return (ap 'xor pair('m0, 'k1))
                  else return (ap 'xor pair('m0, 'k0))
                  ,
                  'm0 :: 'm1 :: 'k0 :: 'k1 :: 'e :: emptyCNameList
                  )
    )                                        
    ||
    ('MsgEnc1 ::= nf( 
                  ('m0 : msg <- read 'In0 )
                  ('m1 : msg <- read 'In1 )
                  ('k0 : msg <- read 'Key0 )
                  ('k1 : msg <- read 'Key1 )
                  ('e : bool <- read 'ChoiceEnc ),
                  if 'e then return (ap 'xor pair('m1, 'k0))
                  else return (ap 'xor pair('m1, 'k1)),
                  'm0 :: 'm1 :: 'k0 :: 'k1 :: 'e :: emptyCNameList
                  )
     )
    ||
    ('LeakMsgEnc0_rec_adv ::= nf(('msgEnc0 : msg <- read 'MsgEnc0), 
                               return 'msgEnc0, 
                               'msgEnc0 :: emptyCNameList)
    )
    ||
    ('LeakMsgEnc1_rec_adv ::= nf(('msgEnc1 : msg <- read 'MsgEnc1), 
                               return 'msgEnc1, 
                               'msgEnc1 :: emptyCNameList)
    )
    ||
    ('Out ::= nf(
              ('e0 : msg <- read 'MsgEnc0)
              ('e1 : msg <- read 'MsgEnc1)
              ('s : msg <- read 'SharedKey)
              ('c : bool <- read 'Choice) ,
              if 'c then return (ap 'xor pair('e1, 's))
              else return (ap 'xor pair('e0, 's)),
              'e0 :: 'e1 :: 's :: 'c :: emptyCNameList
              )
    )
     ||
     ('LeakOut_rec_adv ::= nf(('out : msg <- read 'Out), 
                               return 'out, 
                               'out :: emptyCNameList))          
   ) *** end new leave here
      .
     
 op addSharedKey : -> Protocol .
 eq addSharedKey = 
  newNF(
   < 'ChoiceEnc : bool > 
   < 'Flip : bool > 
   < 'Key0 : msg > 
   < 'Key1 : msg > 
   < 'KeyPair : msg * msg > 
   < 'MsgEnc0 : msg > 
   < 'MsgEnc1 : msg > 
   < 'SharedKey : msg >, 
   ('ChoiceEnc ::= nf(('c : bool <- read 'Choice) 
                       'f : bool <- read 'Flip, 
                       if 'f then if 'c then return False else return True 
                             else if 'c then return True else return False,
                       'f :: 'c :: emptyCNameList)
   ) || 
   ('Flip ::= samp ('flip < () >)) || 
   ('Key0 ::= samp ('mu_msg < () >)) || 
   ('Key1 ::= samp ('mu_msg < () >)) || 
   ('KeyPair ::= nf(('f : bool <- read 'Flip) 
                    ('k0 : msg <- read 'Key0) 
                     'k1 : msg <- read 'Key1, 
                     if 'f then return pair('k1, 'k0) 
                           else return pair('k0, 'k1), 
                     'k0 :: 'k1 :: 'f :: emptyCNameList)
   ) || 
   ('LeakChoiceEnc_rec_adv ::= nf('e : bool <- read 'ChoiceEnc,  
                                  return 'e, 
                                  'e :: emptyCNameList)
   ) || 
   ( 'LeakChoice_rec_adv ::= nf('c : bool <- read 'Choice, 
                                return 'c, 
                                'c :: emptyCNameList)
   ) || 
   ('LeakFlip_rec_adv ::= nf('flip : bool <- read 'Flip, 
                             return 'flip, 
                             'flip :: emptyCNameList)
   ) || 
   ('LeakMsgEnc0_rec_adv ::= nf('msgEnc0 : msg <- read 'MsgEnc0,
                                return 'msgEnc0, 
                                'msgEnc0 :: emptyCNameList)
   ) || 
   ('LeakMsgEnc1_rec_adv ::= nf('msgEnc1 : msg <- read 'MsgEnc1, 
                                return 'msgEnc1,
                                'msgEnc1 :: emptyCNameList)
   ) || 
   ('LeakOut_rec_adv ::= nf('out : msg <- read 'Out, 
                            return 'out, 
                            'out :: emptyCNameList)
   ) || 
   ( 'LeakSharedKey_rec_adv ::= nf('s : msg <- read 'SharedKey, 
                                   return 's, 
                                   's :: emptyCNameList)
   ) || 
   ('MsgEnc0 ::= nf(('c : bool <- read 'Choice) 
                    ('k : msg * msg <- read 'KeyPair) 
                    ('m0 : msg <- read 'In0) 
                    'm1 : msg <- read 'In1, 
                    if 'c then return (ap 'xor pair('m0, snd 'k)) 
                          else return (ap 'xor pair('m0, fst 'k)), 
                    'm0 :: 'm1 :: 'k :: 'c :: emptyCNameList)
   ) || 
   ('MsgEnc1 ::= nf(('c : bool <- read 'Choice) 
                    ('k : msg * msg <- read 'KeyPair) 
                    ('m0 : msg <- read 'In0) 
                    'm1 : msg <- read 'In1, 
                    if 'c then return (ap 'xor pair('m1, fst 'k)) 
                          else return (ap 'xor pair('m1, snd 'k)), 
                    'm0 :: 'm1 :: 'k :: 'c :: emptyCNameList)
   ) || 
   ('Out ::= nf(('c : bool <- read 'Choice) 
                ('m0 : msg <- read 'In0) 
                 'm1 : msg <- read 'In1, 
                 if 'c then return 'm1 else return 'm0, 
                 'm0 :: 'm1 :: 'c :: emptyCNameList)
   ) || 
   ('SharedKey ::= nf('k : msg * msg <- read 'KeyPair, 
                      return fst 'k, 
                      'k :: emptyCNameList)
   ), 
   'KeyPair :: 'ChoiceEnc :: 'Flip :: 
   'Key0 :: 'Key1 :: 
   'MsgEnc0 :: 'MsgEnc1 :: 'SharedKey :: emptyCNameList)
 .    
           
  op addKey0Key1 : -> Protocol .
  eq addKey0Key1 = 
  newNF(
    < 'ChoiceEnc : bool > 
    < 'Flip : bool > 
    < 'Key0 : msg > 
    < 'Key1 : msg > 
    < 'KeyPair : msg * msg > 
    < 'MsgEnc0 : msg > 
    < 'MsgEnc1 : msg > 
    < 'SharedKey : msg >, 
    ('ChoiceEnc ::= nf(('c : bool <- read 'Choice) 
                        'f : bool <- read 'Flip, 
                       if 'f then if 'c then return False else return True 
                             else if 'c then return True else return False, 
                       'f :: 'c :: emptyCNameList)
    ) || 
    ('Flip ::= samp ('flip < () >)) || 
    ('Key0 ::= samp ('mu_msg < () >)) || 
    ('Key1 ::= samp ('mu_msg < () >)) || 
    ('KeyPair ::= nf(('k0 : msg <- read 'Key0) 
                      'k1 : msg <- read 'Key1, 
                      return pair('k0, 'k1), 
                      'k0 :: 'k1 :: emptyCNameList)
    ) || 
    ('LeakChoiceEnc_rec_adv ::= nf('e : bool <- read 'ChoiceEnc, 
                                   return 'e, 
                                   'e :: emptyCNameList)
    ) || 
    ('LeakChoice_rec_adv ::= nf('c : bool <- read 'Choice, 
                                return 'c, 
                                'c :: emptyCNameList)
    ) || 
    ('LeakFlip_rec_adv ::= nf('flip : bool <- read 'Flip, 
                              return 'flip, 
                              'flip :: emptyCNameList)
    ) ||
    ('LeakMsgEnc0_rec_adv ::= nf('msgEnc0 : msg <- read 'MsgEnc0, 
                                 return 'msgEnc0, 
                                 'msgEnc0 :: emptyCNameList)
    ) || 
    ('LeakMsgEnc1_rec_adv ::= nf('msgEnc1 : msg <- read 'MsgEnc1, 
                                 return 'msgEnc1, 
                                 'msgEnc1 :: emptyCNameList)
    ) || 
    ('LeakOut_rec_adv ::= nf('out : msg <- read 'Out, 
                             return 'out,
                             'out :: emptyCNameList)
    ) || 
    ('LeakSharedKey_rec_adv ::= nf('s : msg <- read 'SharedKey, 
                                   return 's, 
                                   's :: emptyCNameList)
    ) || 
    ('MsgEnc0 ::= nf(('c : bool <- read 'Choice)  
                     ('k : msg * msg <- read 'KeyPair) 
                     ('m0 : msg <- read 'In0) 
                      'm1 : msg <- read 'In1,
                      if 'c then return (ap 'xor pair('m0, snd 'k)) 
                            else return (ap 'xor pair('m0, fst 'k)), 
                      'm0 :: 'm1 :: 'k :: 'c ::  emptyCNameList)
    ) || 
    ('MsgEnc1 ::= nf(('c : bool <- read 'Choice) 
                     ('k : msg * msg <- read 'KeyPair) 
                     ('m0 : msg <- read 'In0) 
                      'm1 : msg <- read 'In1, 
                      if 'c then return (ap 'xor pair('m1, fst 'k)) 
                            else return (ap 'xor pair('m1, snd 'k)), 
                      'm0 :: 'm1 :: 'k :: 'c :: emptyCNameList)
    ) || 
    ('Out ::= nf(('c : bool <- read 'Choice) 
                 ('m0 : msg <- read 'In0) 
                  'm1 : msg <- read 'In1, 
                  if 'c then return 'm1 else return 'm0, 
                  'm0 :: 'm1 :: 'c :: emptyCNameList)
    ) || 
    ('SharedKey ::= nf('k : msg * msg <- read 'KeyPair, 
                       return fst 'k, 
                       'k :: emptyCNameList)
    )
    , 'KeyPair :: 'ChoiceEnc :: 'Flip :: 
      'Key0 :: 'Key1 :: 
      'MsgEnc0 :: 'MsgEnc1 :: 'SharedKey :: emptyCNameList)
  .
    
  op addPvtMsg : -> Protocol .
  eq addPvtMsg = 
   newNF(
    < 'ChoiceEnc : bool > 
    < 'Flip : bool > 
    < 'Key0 : msg > 
    < 'Key1 : msg > 
    < 'MsgEnc0 : msg > 
    < 'MsgEnc1 : msg > 
    < 'PvtMsg : msg > 
    < 'SharedKey : msg >, 
    ('ChoiceEnc ::= nf(('c : bool <- read 'Choice) 
                        'f : bool <- read 'Flip, 
                        if 'f then if 'c then return False else return True
                              else if 'c then return True else return False, 
                        'f :: 'c :: emptyCNameList)
    ) || 
    ('Flip ::= samp ('flip < () >)) || 
    ('Key0 ::= samp ('mu_msg < () >)) || 
    ('Key1 ::= samp ('mu_msg < () >)) || 
    ('LeakChoiceEnc_rec_adv ::= nf('e : bool <- read 'ChoiceEnc, 
                                   return 'e, 
                                   'e :: emptyCNameList)
    ) || 
    ('LeakChoice_rec_adv ::= nf('c : bool <- read 'Choice, 
                                return 'c, 
                                'c :: emptyCNameList)
    ) || 
    ('LeakFlip_rec_adv ::= nf('flip : bool <- read 'Flip, 
                              return 'flip, 
                              'flip :: emptyCNameList)
    ) || 
    ('LeakMsgEnc0_rec_adv ::= nf('msgEnc0 : msg <- read 'MsgEnc0, 
                                 return 'msgEnc0, 
                                 'msgEnc0 :: emptyCNameList)
    ) || 
    ('LeakMsgEnc1_rec_adv ::= nf('msgEnc1 : msg <- read 'MsgEnc1,
                                 return 'msgEnc1, 
                                 'msgEnc1 :: emptyCNameList)
    ) || 
    ('LeakOut_rec_adv ::= nf('out : msg <- read 'Out, 
                             return 'out, 
                             'out :: emptyCNameList)
    ) || 
    ('LeakSharedKey_rec_adv ::= nf('s : msg <- read 'SharedKey, 
                                   return 's, 
                                   's :: emptyCNameList)
    ) || 
    ('MsgEnc0 ::= nf(('c : bool <- read 'Choice) 
                     ('k0 : msg <- read 'Key0) 
                     ('m0 : msg <- read 'In0) 
                     ('m1 : msg <- read 'In1) 
                      'p : msg <- read 'PvtMsg, 
                      if 'c then return 'p else return (ap 'xor pair('m0, 'k0)), 
                      'm0 :: 'm1 :: 'k0 :: 'p :: 'c :: emptyCNameList)
    ) || 
    ('MsgEnc1 ::= nf(('c : bool <- read 'Choice) 
                     ('k0 : msg <- read 'Key0) 
                     ('m0 : msg <- read 'In0) 
                     ('m1 : msg <- read 'In1) 
                      'p : msg <- read 'PvtMsg, 
                     if 'c then return (ap 'xor pair('m1, 'k0)) else return 'p, 
                     'm0 :: 'm1 :: 'k0 :: 'p :: 'c :: emptyCNameList)
    ) || 
    ('Out ::= nf(('c : bool <- read 'Choice) 
                 ('m0 : msg <- read 'In0) 
                  'm1 : msg <- read 'In1, 
                  if 'c then return 'm1 else return 'm0, 
                  'm0 :: 'm1 :: 'c :: emptyCNameList)
    ) || 
    ('PvtMsg ::= nf(('c : bool <- read 'Choice) 
                    ('k1 : msg <- read 'Key1) 
                    ('m0 : msg <- read 'In0) 
                     'm1 : msg <- read 'In1, 
                     if 'c then return (ap 'xor pair('m0, 'k1)) 
                           else return (ap 'xor pair('m1, 'k1)), 
                     'm0 :: 'm1 :: 'k1 :: 'c :: emptyCNameList)
    ) || 
    ('SharedKey ::= nf('k0 : msg <- read 'Key0, 
                       return 'k0, 
                       'k0 :: emptyCNameList)), 
    'ChoiceEnc :: 'Flip :: 'Key0 :: 'Key1 :: 
    'MsgEnc0 :: 'MsgEnc1 :: 'PvtMsg :: 'SharedKey :: emptyCNameList)
  .  
    
  op addKey1 : -> Protocol .
  eq addKey1 = 
   newNF(
    < 'ChoiceEnc : bool > 
    < 'Flip : bool > 
    < 'Key0 : msg > 
    < 'Key1 : msg > 
    < 'MsgEnc0 : msg > 
    < 'MsgEnc1 : msg > 
    < 'PvtMsg : msg > 
    < 'SharedKey : msg >, 
    ('ChoiceEnc ::= nf(('c : bool <- read 'Choice) 
                        'f : bool <- read 'Flip, 
                        if 'f then if 'c then return False else return True
                              else if 'c then return True else return False, 
                        'f :: 'c :: emptyCNameList)
    ) || 
    ('Flip ::= samp ('flip < () >)) || 
    ('Key0 ::= samp ('mu_msg < () >)) ||
    ('Key1 ::= samp ('mu_msg < () >)) || 
    ('LeakChoiceEnc_rec_adv ::= nf('e : bool <- read 'ChoiceEnc, 
                                   return 'e, 
                                   'e :: emptyCNameList)
    ) || 
    ('LeakChoice_rec_adv ::= nf('c : bool <- read 'Choice, 
                                return 'c, 
                                'c :: emptyCNameList)
    ) || 
    ('LeakFlip_rec_adv ::= nf('flip : bool <- read 'Flip, 
                              return 'flip, 
                              'flip :: emptyCNameList)
    ) || 
    ('LeakMsgEnc0_rec_adv ::= nf('msgEnc0 : msg <- read 'MsgEnc0, 
                                 return 'msgEnc0, 
                                 'msgEnc0 :: emptyCNameList)
    ) || 
    ('LeakMsgEnc1_rec_adv ::= nf('msgEnc1 : msg <- read 'MsgEnc1,
                                 return 'msgEnc1, 
                                 'msgEnc1 :: emptyCNameList)
    ) || 
    ('LeakOut_rec_adv ::= nf('out : msg <- read 'Out, 
                             return 'out, 
                             'out :: emptyCNameList)
    ) || 
    ('LeakSharedKey_rec_adv ::= nf('s : msg <- read 'SharedKey, 
                                   return 's, 
                                   's :: emptyCNameList)
    ) || 
    ('MsgEnc0 ::= nf(('c : bool <- read 'Choice) 
                     ('k0 : msg <- read 'Key0) 
                     ('m0 : msg <- read 'In0) 
                     ('m1 : msg <- read 'In1) 
                     'p : msg <- read 'PvtMsg, 
                     if 'c then return 'p else return (ap 'xor pair('m0, 'k0)), 
                     'm0 :: 'm1 :: 'k0 :: 'p :: 'c :: emptyCNameList)
    ) || 
    ('MsgEnc1 ::= nf(('c : bool <- read 'Choice) 
                     ('k0 : msg <- read 'Key0) 
                     ('m0 : msg <- read 'In0) 
                     ('m1 : msg <- read 'In1) 
                      'p : msg <- read 'PvtMsg, 
                      if 'c then return (ap 'xor pair('m1, 'k0)) else return 'p, 
                      'm0 :: 'm1 :: 'k0 :: 'p :: 'c :: emptyCNameList)
    ) || 
    ('Out ::= nf(('c : bool <- read 'Choice) 
                 ('m0 : msg <- read 'In0) 
                  'm1 : msg <- read 'In1, 
                  if 'c then return 'm1 else return 'm0, 
                  'm0 :: 'm1 :: 'c :: emptyCNameList)
    ) ||
    ('PvtMsg ::= nf(('c : bool <- read 'Choice) 
                    ('k1 : msg <- read 'Key1) 
                    ('m0 : msg <- read 'In0) 
                     'm1 : msg <- read 'In1, 
                     return 'k1, 
                     'm0 :: 'm1 :: 'c :: 'k1 :: emptyCNameList)
    ) || 
    ('SharedKey ::= nf('k0 : msg <- read 'Key0, 
                       return 'k0, 
                       'k0 :: emptyCNameList)), 
    'ChoiceEnc :: 'Flip :: 'Key0 :: 'Key1 :: 
    'MsgEnc0 :: 'MsgEnc1 :: 'PvtMsg :: 'SharedKey :: emptyCNameList)
  .  
    
endm

smod EXECUTE is
 pr STRATS .
 pr PREPROCESSING .
 
 var Sigma : Signature .
 var Delta : ChannelContext .
 var Gamma : TypeContext .
 vars i1 i2 X Y Z : ChannelName .  
 vars x y x1 x2 Q Q1 Q2 Q3 : Qid .
 var I O : Set{CNameBound} .
 
 eq ap 'xor pair(ap 'xor pair(x1, x2), x2) = x1 .
 eq ap 'xor pair(x1, ap 'xor pair(x1, x2)) = x2 .  
                       
 crl [uniform-dist-invar-xor] : rConfig(Sigma, Delta ((X @ nil) :: msg), Gamma,
            x : msg <- read X ; 
            y : msg <- samp ('mu_msg < () >) ;
            return (ap 'xor pair(x, y)), I, A, msg
            )
            => 
            rConfig(Sigma, Delta ((X @ nil) :: msg), Gamma,
            x : msg <- read X ; 
            samp ('mu_msg < () >), I, A, msg
            ) if (X @ nil) in I . 
            
 var pConf : ProtocolConfig .
 
 var P : Protocol .
 var A : Set{BoolTerm} .
            
 strat localAssumptionProof : ChannelName @ ProtocolConfig .
 sd localAssumptionProof(X) :=      
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW-NF{localAssumptionProof(X)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O, A) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P X, 
                             P1:Protocol <- keepOne P X]{CONG-REACT[o:ChannelName <- X]
        {cong-pre-nf{
          cong-branch-refl{
              exchange 
            ; cong-bind{idle, uniform-dist-invar-xor}
            ; exchange
            , cong-bind{idle, uniform-dist-invar-xor}       
          } ;
          same-reaction-if
                    } ;
          (bind2R-pre-reverse !) ;
          cong-pre-nf{bind-ret-2[x:ChannelName <- 'k1]}
        }
       }
    .            
 
 var vx vy : Qid .
 var C : ChannelName .
                            
 strat localProof : ChannelName @ ProtocolConfig .
 sd localProof(C) := 
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW-NF{localProof(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O, A) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]{ 
         CONG-REACT[o:ChannelName <- C]
          {cong-pre-nf{
            cong-branch-refl{exchange ; 
                              alpha[vx:Qid <- 'k1 , vy:Qid <- 't] ;
                              exchange ; 
                              alpha[vx:Qid <- 'k0 , vy:Qid <- 'k1] ;
                              exchange ; 
                              alpha[vx:Qid <- 't , vy:Qid <- 'k0] , 
                             idle} ;
            same-reaction-if                 
           }
          }
         } .
         
endsm



srew [1] pConfig(muMsgSym xorF flipF, 
                 ('In0 @ nil :: msg) 
                 ('In1 @ nil :: msg) 
                 ('Choice @ nil :: bool) 
                 ('Out @ nil :: msg)
                 ('LeakMsgEnc0_rec_adv @ nil :: msg)
                 ('LeakMsgEnc1_rec_adv @ nil :: msg)
                 ('LeakOut_rec_adv @ nil :: msg)
                 ('LeakFlip_rec_adv @ nil :: bool)
                 ('LeakSharedKey_rec_adv @ nil :: msg)
                 ('LeakChoiceEnc_rec_adv @ nil :: bool)
                 ('LeakChoice_rec_adv @ nil :: bool), 
                 real,  
                 insert('In0 @ nil, insert('In1 @ nil,'Choice @ nil )),
                 *** getOutputs(real)
                 insert('LeakChoiceEnc_rec_adv @ nil, 
                  insert('LeakChoice_rec_adv @ nil, 
                  insert('LeakFlip_rec_adv @ nil, 
                  insert('LeakMsgEnc0_rec_adv @ nil, 
                  insert('LeakMsgEnc1_rec_adv @ nil,
                  insert('LeakOut_rec_adv @ nil, 
                  insert('LeakSharedKey_rec_adv @ nil, 
                  'Out @ nil))))))),
                  empty
                  )
          using   sugar-newNF ;
                  substNF('ChoiceEnc, 'MsgEnc0) 
                ; substNF('ChoiceEnc, 'MsgEnc1) 
                ; substNF('SharedKey, 'Out) 
                ; substNF('MsgEnc0, 'Out)
                ; substNF('MsgEnc1, 'Out) 
       
                ; applyDropNF('Flip, 'Out) 
                ; applyDropNF('Key0, 'Out)
                ; applyDropNF('Key1, 'Out) 
                   
                ; SYM[P1:Protocol <- addSharedKey] 
                    { 
                      substNF('KeyPair, 'SharedKey) 
                    ; substNF('KeyPair, 'MsgEnc0) 
                    ; substNF('KeyPair, 'MsgEnc1)
                    ; absorbChannel('KeyPair)
                    }  
                  
                ; foldNF('Key1, 'KeyPair)
                ; foldNF('Key0, 'KeyPair) 
  
                ; localProof('KeyPair) 
               
                ; applyDropPreNF('Flip, 'KeyPair) 
                ; SYM[P1:Protocol <- addKey0Key1]
                   {
                    foldNF('Key1, 'KeyPair) ;
                    foldNF('Key0, 'KeyPair)
                   } 
                ; substNF('KeyPair, 'SharedKey) 
                ; substNF('KeyPair, 'MsgEnc0) 
                ; substNF('KeyPair, 'MsgEnc1)
                ; absorbChannel('KeyPair)
                ; applyDropNF('Key1, 'SharedKey)
                 
                ; SYM[P1:Protocol <- addPvtMsg]
                   { 
                     substNF('PvtMsg, 'MsgEnc0) 
                   ; substNF('PvtMsg, 'MsgEnc1)
                   ; absorbChannel('PvtMsg)
                   ; changeOrder('MsgEnc0, 'm0 :: 'm1 :: 'k0 :: 'k1 :: 'c :: emptyCNameList)
                   ; changeOrder('MsgEnc1, 'm0 :: 'm1 :: 'k0 :: 'k1 :: 'c :: emptyCNameList)
                   } 
               ; foldNF('Key1, 'PvtMsg)  
               ; moveBindInPre('PvtMsg, 'm1) 
               ; applyReadInsideIfPre('PvtMsg) 
               ; moveBindInPre('PvtMsg, 'm0)
               ; applyReadInsideIfPre('PvtMsg)
              
               ; localAssumptionProof('PvtMsg) 
            
               ; SYM[P1:Protocol <- addKey1]
                  { 
                    nf2PreNF('PvtMsg)
                  ; foldNFPre('Key1, 'PvtMsg)
                  ; changeOrder('PvtMsg, 'm1 :: 'm0 :: 'c :: emptyCNameList)
                  } 
                  
               ; substNF('PvtMsg, 'MsgEnc0) 
               ; substNF('PvtMsg, 'MsgEnc1) 
               ; absorbChannel('PvtMsg)
               ; smart-subst-nf('SharedKey, 'LeakSharedKey_rec_adv)
               ; SYM[P1:Protocol <- idealPlusSim]
                  { sugar-newNF ;
                  substNF('LeakOut_id_adv, 'LeakOut_rec_adv) 
                ; substNF('LeakOut_id_adv, 'MsgEnc0)
                ; substNF('LeakOut_id_adv, 'MsgEnc1)
                ; substNF('LeakChoice_id_adv, 'LeakChoice_rec_adv) 
                ; substNF('LeakChoice_id_adv, 'MsgEnc0)
                ; substNF('LeakChoice_id_adv, 'MsgEnc1)
                ; substNF('LeakChoice_id_adv, 'ChoiceEnc)
                ; substNF('Out, 'MsgEnc0)
                ; substNF('Out, 'MsgEnc1)
                ; absorbChannel('LeakOut_id_adv)
                ; absorbChannel('LeakChoice_id_adv)
                ; changeOrder('MsgEnc0, 'k0 :: 'm0 :: 'm1 :: 'k1 :: 'c :: emptyCNameList)
                ; changeOrder('MsgEnc1, 'k0 :: 'm0 :: 'm1 :: 'k1 :: 'c :: emptyCNameList)
                  }
               .
                                    
 
