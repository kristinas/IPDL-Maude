***( IPDL

  Copyright : (C) 2022-23, Kristina Sojakova
  License   : GNU General Public License v3.0 or later (GPL-3.0-or-later)
  Authors   : Mihai Codescu <mscodescu@gmail.com>
              Kristina Sojakova <sojakova.kristina@gmail.com>

Hello world-like example

)
load ../src/strategies

mod CPA-SECURITY is
 protecting APPROX-EQUALITY .
 
 op q : -> Nat .
 
 op msg  : -> Type .
 op key  : -> Type .
 op ctxt : -> Type .
 
 op zerosF : -> SigElem .
 eq zerosF = 'zeros : unit ~> msg .
 
 op genKeyF : -> SigElem .
 eq genKeyF = 'genKey : unit ~>> key .
 
 op encF : -> SigElem .
 eq encF = 'enc : (msg * key) ~>> ctxt .
 
 op sig : -> Signature .
 eq sig = encF genKeyF zerosF .
 
 op lrLeft : -> Protocol .
 eq lrLeft = 
  new 'Key : key in
   (
    ('Key ::= nf(emptyBRList, samp ('genKey < () >), emptyCNameList))
    ||
    (family 'Enc 'i (bound q) ::= 
      nf( ('ml : msg <- read ('Msg-L['i]))
          ('mr : msg <- read ('Msg-R['i]))
          ('k : key <- read 'Key),
          samp ('enc < pair('ml, 'k) >),
           'ml :: 'mr :: 'k :: emptyCNameList)
    ) 
   ) 
 .
 
 op lrRight : -> Protocol .
 eq lrRight = 
  new 'Key : key in
   (
    ('Key ::= nf(emptyBRList, samp ('genKey < () >), emptyCNameList))
    ||
    (family 'Enc 'i (bound q) ::= 
      nf( ('ml : msg <- read ('Msg-L['i]))
          ('mr : msg <- read ('Msg-R['i]))
          ('k : key <- read 'Key),
          samp ('enc < pair('mr, 'k) >),
           'ml :: 'mr :: 'k :: emptyCNameList)
    ) 
   ) 
 .
 
 op cmLeft : -> Protocol .
 eq cmLeft = 
  new 'Key : key in
   (
    ('Key ::= nf(emptyBRList, samp ('genKey < () >), emptyCNameList))
    ||
    (family 'Enc 'i (bound q) ::= 
      nf( ('m : msg <- read ('Msg['i]))
          ('k : key <- read 'Key),
          samp ('enc < pair('m, 'k) >),
           'm :: 'k :: emptyCNameList)
    ) 
   ) 
 .

 op cmRight : -> Protocol .
 eq cmRight = 
  new 'Key : key in
   (
    ('Key ::= nf(emptyBRList, samp ('genKey < () >), emptyCNameList))
    ||
    (family 'Enc 'i (bound q) ::= 
      nf( ('m : msg <- read ('Msg['i]))
          ('k : key <- read 'Key),
          samp ('enc < pair(ap 'zeros (), 'k) >),
           'm :: 'k :: emptyCNameList)
    ) 
   ) 
 .
 
 *** intermediary protocol in first proof
 
 op int0 : -> Protocol .
 eq int0 = newfamily 'Msg-L 'i (bound q) : msg in 
           newfamily 'Msg-R 'i (bound q) : msg in
    (
    lrLeft ||
    (family 'Msg-L 'i (bound q) ::= 
      nf(
      'm : msg <- read ('Msg['i]),
      return 'm,
      'm :: emptyCNameList
      )
    )
    ||
    (family 'Msg-R 'i (bound q) ::= 
      nf(emptyBRList, return (ap 'zeros ()), emptyCNameList)
    )
    )
 .
    
  *** first intermediary protocol in second proof
 
 op int1 : -> Protocol .
 eq int1 = 
     newfamily 'Msg 'i (bound q) : msg in 
     (
     cmLeft ||
     (family 'Msg 'i (bound q) ::= 
      nf(
      ('ml : msg <- read ('Msg-L['i]))
      ('mr : msg <- read ('Msg-R['i])),
      return 'ml,
      'ml :: 'mr :: emptyCNameList
      )
    )
     )
 . 
 
 *** second intermediary protocol in second proof
 
 op int2 : -> Protocol .
 eq int2 = 
     newfamily 'Msg 'i (bound q) : msg in 
     (
     cmRight ||
     (family 'Msg 'i (bound q) ::= 
      nf(
      ('ml : msg <- read ('Msg-L['i]))
      ('mr : msg <- read ('Msg-R['i])),
      return 'mr,
      'ml :: 'mr :: emptyCNameList
      )
    )
     )
 . 
 
  *** third intermediary protocol in second proof
 
 op int3 : -> Protocol .
 eq int3 = 
     newfamily 'Msg 'i (bound q) : msg in 
     (
     cmLeft ||
     (family 'Msg 'i (bound q) ::= 
      nf(
      ('ml : msg <- read ('Msg-L['i]))
      ('mr : msg <- read ('Msg-R['i])),
      return 'mr,
      'ml :: 'mr :: emptyCNameList
      )
    )
     )
 .
    
 
endm 

smod EXECUTE is
 pr STRATS .
 pr CPA-SECURITY .
 
 var i m ml mr k l ka kb C sk Key Enc Msg Msg-L Msg-R : Qid .
 var Sigma : Signature .
 var Delta Delta' : ChannelContext .
 var Gamma : TypeContext .
 var I O : Set{CNameBound} .
 var li : List{NatTerm} .
 var A : Set{BoolTerm} .
 var wid len : Nat . 
 var pConf : ProtocolConfig .
 var aConf : ApproxEqConfig .
 var P : Protocol .

 crl [cm] : 
    aConfig(Sigma, Delta ,
            newNF( < Key : key >, 
   (
    (Key ::= nf(emptyBRList, samp ('genKey < () >), emptyCNameList))
    ||
    (family Enc i (bound q) ::= 
      nf( (m : msg <- read (Msg[i]))
          (k : key <- read Key),
          samp ('enc < pair(m, k) >),
          m :: k :: emptyCNameList)
    ) 
   ), Key :: emptyCNameList) , I, O, A, width wid, length len
   )
   =>
   aConfig(Sigma, Delta ,
            newNF( < Key : key >, 
   (
    (Key ::= nf(emptyBRList, samp ('genKey < () >), emptyCNameList))
    ||
    (family Enc i (bound q) ::= 
      nf( (m : msg <- read (Msg[i]))
          (k : key <- read Key),
          samp ('enc < pair(ap 'zeros (), k) >),
          m :: k :: emptyCNameList)
    ) 
   ), Key :: emptyCNameList) , I, O, A, width (wid + 1), length (len + | I | - 1)
   )
   
   if
   
    (Msg @ q) in I 
    
    /\
    
    O == Enc @ q
    
   .
   
   strat applyCM @ ProtocolConfig .
   sd applyCM :=
    match aConf s.t. aConfStartsWithNew aConf
    ? CONG-NEW-NF-APPROX{applyCM}
    : CONG-COMP-APPROX{cm}
     .     
   
   crl [lr] : 
    aConfig(Sigma, Delta ,
            newNF( < Key : key >, 
   (
    (Key ::= nf(emptyBRList, samp ('genKey < () >), emptyCNameList))
    ||
    (family Enc i (bound q) ::= 
      nf( (ml : msg <- read (Msg-L[ i ]))
          (mr : msg <- read (Msg-R[ i ]))
          (k : key <- read Key),
          samp ('enc < pair(ml, k) >),
          ml :: mr :: k :: emptyCNameList)
    ) 
   ) , Key :: emptyCNameList)  , I, O, A, width wid, length len
   )
   =>
   aConfig(Sigma, Delta ,
            newNF( < Key : key > , 
   (
    (Key ::= nf(emptyBRList, samp ('genKey < () >), emptyCNameList))
    ||
    (family Enc i (bound q) ::= 
      nf( (ml : msg <- read (Msg-L[ i ]))
          (mr : msg <- read (Msg-R[ i ]))
          (k : key <- read Key),
          samp ('enc < pair(mr, k) >),
          ml :: mr :: k :: emptyCNameList)
    ) 
   ), Key :: emptyCNameList) , I, O, A, width (wid + 1), length (len + | I | - 2)
   )
   if
   
    (Msg-L @ q) in I 
    
    /\
    
    (Msg-R @ q) in I 
    
    /\
    
    O == Enc @ q
   .
   
   strat applyLR @ ProtocolConfig .
   sd applyLR :=
    match aConf s.t. aConfStartsWithNew aConf
    ? CONG-NEW-NF-APPROX{applyLR}
    : CONG-COMP-APPROX{lr}
     .     
   
   
endsm

srew [1]
 aConfig(sig, ('Msg @ q :: msg) ('Enc @ q :: ctxt), cmLeft, insert('Msg @ q, empty),   getOutputs(cmLeft), empty, width 0, length 0)
using TRANS{
      STRICT{
        sugar-newNF
      ; SYM[P1:Protocol <- int0]{
       sugar-newNF
     ; moveNewToFront
     ; foldNFFamily('Msg-L, 'Enc)
     ; foldNFFamily('Msg-R, 'Enc)
      }
         
      },
      TRANS{
      TRANS{
      STRICT{
         sugar-newNF
      }
      ,
      applyLR
      },
      STRICT{
       moveNewToFront
     ; foldNFFamily('Msg-L, 'Enc)
     ; foldNFFamily('Msg-R, 'Enc)
     ; SYM[P1:Protocol <- cmRight]{sugar-newNF}
      }
      }
      }
.       

srew [1]
 aConfig(sig, ('Msg-L @ q :: msg) ('Msg-R @ q :: msg)('Enc @ q :: ctxt), lrLeft, insert('Msg-L @ q, 'Msg-R @ q), getOutputs(lrLeft), empty, width 0, length 0)
using 
   TRANS{
   TRANS{   
      TRANS{
      TRANS{
      STRICT{
       sugar-newNF
      ; SYM[P1:Protocol <- int1]{
         sugar-newNF
     ; moveNewToFront
     ; foldNFFamily('Msg, 'Enc)
       }
     ; sugar-newNF   
      },
      applyCM
      },
      STRICT{
        moveNewToFront
      ; foldNFFamily('Msg, 'Enc)
      ; SYM[P1:Protocol <- int2]{
         sugar-newNF
     ; moveNewToFront
     ; foldNFFamily('Msg, 'Enc)
      }
      ; sugar-newNF
      }  
      },
      SYM-APPROX[Q:Protocol <- int3]{
        TRANS{
          STRICT{sugar-newNF},
          applyCM
        }
      }
   },
   STRICT{ 
       sugar-newNF
     ; moveNewToFront
     ; foldNFFamily('Msg, 'Enc)
     ; SYM[P1:Protocol <- lrRight]{sugar-newNF}
   } 
   }    
.

