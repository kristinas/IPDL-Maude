***( IPDL

  Copyright : (C) 2022, Kristina Sojakova
  License   : GNU General Public License v3.0 or later (GPL-3.0-or-later)
  Authors   : Mihai Codescu <mscodescu@gmail.com>
              Kristina Sojakova <sojakova.kristina@gmail.com>

)

in ../src/syntax

smod STRATS is
 pr PROTOCOL-EQUALITY .
 
 strat moveToLast : Qid @ ProtocolConfig .
 
 op isLastNew___ : ProtocolConfig Qid Bool -> Bool .
 
 var S Sigma : Signature .
 var D Delta : ChannelContext .
 var G : VarContext .
 var P P1 P2 : Protocol .
 var R R1 R2 R3 R4 : Reaction .
 *** var Q Q' C Q1 Q2 x1 x2 y x : Qid .
 var I O : Set{CName} .
 var T T' T1 : Type .
 var flag : Bool .
 var M M1 M2 : Message .
 var Dis : Distribution .
 var C C1 C2 : ChannelName .
 var Q Q' x1 : Qid .
 
 eq isLastNew pConfig(S, D, emptyProtocol, I, O) Q flag = not flag .
 eq isLastNew pConfig(S, D, P1 || P2, I, O) Q flag = not flag .
 eq isLastNew pConfig(S, D, C ::= R, I, O) Q flag = not flag .
 eq isLastNew pConfig(S, D, new Q : T in P, I, O) Q false = false .
 eq isLastNew pConfig(S, D, new Q : T in P, I, O) Q true = 
    isLastNew pConfig(S, D, P, I, O) Q false .
 ceq isLastNew pConfig(S, D, new Q' : T in P, I, O) Q true = 
     isLastNew pConfig(S, D, P, I, O) Q true if Q =/= Q' .
 ceq isLastNew pConfig(S, D, new Q' : T in P, I, O) Q false = 
     false if Q =/= Q' .    
     
 op foundQ__  : ProtocolConfig Qid -> Bool .
 eq foundQ pConfig(S, D, emptyProtocol, I, O) Q = false .
 eq foundQ pConfig(S, D, P1 || P2, I, O) Q = false .
 eq foundQ pConfig(S, D, C ::= R, I, O) Q = false .
 eq foundQ pConfig(S, D, new Q : T in P, I, O) Q = true .
 ceq foundQ pConfig(S, D, new Q' : T in P, I, O) Q = false if Q' =/= Q .   
 
 var pConf : ProtocolConfig .
 
 sd moveToLast(Q) := match pConf s.t. (foundQ pConf Q) 
                       ? (match pConf s.t. (isLastNew pConf Q true) 
                         ? idle 
                         : (NEW-EXCH ; CONG-NEW{moveToLast(Q)})) 
                       : CONG-NEW{moveToLast(Q)} .
                        
 var N : Nat .
 
 op startsWithNew_ : ProtocolConfig -> Bool .
 eq startsWithNew pConfig(S, D, emptyProtocol, I, O) = false .
 eq startsWithNew pConfig(S, D, P1 || P2, I, O) = false .
 eq startsWithNew pConfig(S, D, C ::= R, I, O) = false .
 eq startsWithNew pConfig(S, D, new Q : T in P, I, O) = true .

 op startsWithNewC__ : ProtocolConfig ChannelName -> Bool .
 eq startsWithNewC pConfig(S, D, emptyProtocol, I, O) C = false .
 eq startsWithNewC pConfig(S, D, P1 || P2, I, O) C = false .
 eq startsWithNewC pConfig(S, D, C ::= R, I, O) C = false .
 eq startsWithNewC pConfig(S, D, new Q : T in P, I, O) C = (Q == C) .
 
 strat nTimesCong : ChannelName @ ProtocolConfig .
 sd nTimesCong(C) := 
      match pConf s.t. startsWithNewC pConf C
      ? COMP-NEW-2 ; ABSORB-RIGHT 
      : CONG-NEW{nTimesCong(C)} .
 
 strat nTimesBindRet2 : ChannelName @ ProtocolConfig .
 sd nTimesBindRet2(C) := 
  match pConf s.t. startsWithNew pConf
  ? CONG-NEW{nTimesBindRet2(C)}
  : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{bind-ret-2[x:Qid <- 'x]}} .
 
 strat nTimesSubst @ ProtocolConfig .
 sd nTimesSubst := 
    match pConf s.t. startsWithNew pConf
    ? CONG-NEW{nTimesSubst}
    : CONG-COMP-RIGHT{(SUBST [x2:Qid <- 'x2]{read-det})} . 
    *** P || Q1 => P || Q2 if Q1 => Q2
    *** subst (C, D) 
     *** Q1 : C ::= RC || D ::= RD
     *** P : the rest
   
 strat nTimesBindRet @ ProtocolConfig .
 sd nTimesBindRet := 
    match pConf s.t. startsWithNew pConf
    ? CONG-NEW{nTimesBindRet} 
    : CONG-COMP-RIGHT{CONG-REACT{bind-ret}} .
 
 var rConf : ReactionConfig .
 
 op startsWithBind : Reaction -> Bool .
 eq startsWithBind(return M) = false .
 eq startsWithBind(samp Dis) = false .
 eq startsWithBind(read M) = false .
 eq startsWithBind(if M then R1 else R2) = false .
 eq startsWithBind(Q : T <- R1 ; R2) = true .
 
 op startsWithBindRead : Reaction -> Bool .
 eq startsWithBindRead(Q : T <- read M ; R2) = true .
 eq startsWithBindRead(R) = false [owise] .
 
 op startsWithIfRead : ReactionConfig -> Bool .
 eq startsWithIfRead(rConfig(S, D, G, if M then x1 : T1 <- R1 ; R2 else 
                                                x1 : T1 <- R1 ; R3, I, T)) = true . 
 eq startsWithIfRead(rConfig(S, D, G, R, I, T)) = false [owise] .
 
 op rBindRead : ReactionConfig -> Bool .
 eq rBindRead(rConfig(S, D, G, R, I, T)) = startsWithBindRead(R) .
 
 op firstBind : ReactionConfig -> Qid .
 eq firstBind(rConfig(S, D, G, Q : T <- R1 ; R2, I, T')) = Q .
 
 op rBind : ReactionConfig -> Bool .
 eq rBind(rConfig(S, D, G, R, I, T)) = startsWithBind(R) .
 
 strat liftInnerBinds @ ReactionConfig .
 sd liftInnerBinds := bind-bind ? cong-bind{idle, liftInnerBinds} : idle .
 
 strat liftAllInnerBinds @ ReactionConfig .
 sd liftAllInnerBinds := 
      match rConf s.t. rBind(rConf) 
       ? (liftInnerBinds ; cong-bind{idle, liftAllInnerBinds})
       : idle .  
 
 strat liftInnerBindsPr : ChannelName @ ProtocolConfig .
 sd liftInnerBindsPr(C) := 
  match pConf s.t. startsWithNew pConf 
  ? CONG-NEW{liftInnerBindsPr(C)}
  : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{liftAllInnerBinds}} .


 strat moveBindToLast @ ReactionConfig .
 sd moveBindToLast := exchange ? cong-bind{idle, moveBindToLast} : idle . 
 
 strat moveCertainBindToLast : Qid @ ReactionConfig .
 sd moveCertainBindToLast(Q) :=
    match rConf s.t. Q =/= firstBind(rConf)
    ? cong-bind{idle, moveCertainBindToLast(Q)}
    : moveBindToLast . 
  
 strat moveBindToFirst : Qid @ ReactionConfig .
 sd moveBindToFirst(Q) := 
   match rConf s.t. Q =/= firstBind(rConf)
     ? moveBindToLast ; moveBindToFirst(Q)
     : idle .
     
 strat moveBindProtocol : Qid ChannelName @ ProtocolConfig .
 sd moveBindProtocol(Q, C) := CONG-REACT[o:ChannelName <- C]{moveBindToFirst(Q)} . 
 
 
 strat moveCertainBindLastProtocol : Qid ChannelName @ ProtocolConfig .
 sd moveCertainBindLastProtocol(Q, C) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{moveCertainBindLastProtocol(Q, C)}
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{moveCertainBindToLast(Q)}} .   

 strat moveFirst : Qid ChannelName @ ProtocolConfig .
 sd moveFirst(Q, C) := 
     matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{moveBindToFirst(Q)}} .
        
 strat nTimesMoveFirst : Qid ChannelName @ ProtocolConfig .
 sd nTimesMoveFirst(Q, C) := 
   match pConf s.t. startsWithNew pConf
   ? CONG-NEW{nTimesMoveFirst(Q, C)}
   : moveFirst(Q, C) .
   
 strat absorbChannel : ChannelName @ ProtocolConfig .
 sd absorbChannel(C) := 
    sugar-newNF ;
    absorb-new-nf[c:ChannelName <- C] ;  
    desugar-newNF 
 .   
   
 strat foldNF : ChannelName ChannelName @ ProtocolConfig .
 sd foldNF(C1, C2) := 
                 sugar-newNF ;
                 (fold-bind-new-nf[c:ChannelName <- C1,
                                   o:ChannelName <- C2] 
                  or-else 
                  fold-bind-new-prenf[c:ChannelName <- C1,
                                      o:ChannelName <- C2] )
                 ; desugar-newNF  *** TODO these last 2 steps should be reusable from subst!
                 ; liftInnerBindsNF(C2) 
                 ; handleRNF(C2) 
                 .
                 
 strat foldNFPre : ChannelName ChannelName @ ProtocolConfig .  
 sd foldNFPre(C1, C2) := 
                 sugar-newNF ;
                 fold-bind-new-prenf[c:ChannelName <- C1,
                                     o:ChannelName <- C2] ;
                 desugar-newNF ;
                 liftInnerBindsNF(C2) ;
                 handleRpreNF(C2) 
                 .  
                 
 var ql : QidList .                
                           
 strat changeOrder : ChannelName QidList @ ProtocolConfig .
 sd changeOrder(C, ql) :=
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW{changeOrder(C, ql)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]{
         CONG-REACT[o:ChannelName <- C]
         {change-order[QL':QidList <- ql]}
       } .
       
 strat changeOrderPre : ChannelName QidList @ ProtocolConfig .
 sd changeOrderPre(C, ql) :=
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW{changeOrderPre(C, ql)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]{
         CONG-REACT[o:ChannelName <- C]
         {change-order-pre[QL':QidList <- ql]}
       } .      

   
 strat nTimesSubstNF : ChannelName ChannelName @ ProtocolConfig .
 sd nTimesSubstNF(C1, C2) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nTimesSubstNF(C1, C2)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeTwo P C1 C2, 
                             P1:Protocol <- keepTwo P C1 C2]{
          SUBST-nf[o1:ChannelName <- C1, 
                   o2:ChannelName <- C2]
                   } .
                   
 strat nTimesSubstNFProtocol : Protocol ChannelName ChannelName @ ProtocolConfig .
 sd nTimesSubstNFProtocol(P, C1, C2) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nTimesSubstNFProtocol(P, C1, C2)} 
     : CONG-COMP-RIGHT-nocheck[P1:Protocol <- P]{
          SUBST-nf[o1:ChannelName <- C1, 
                   o2:ChannelName <- C2]
                   } .                  
                                
 strat nTimesSubstNFRead : ChannelName ChannelName @ ProtocolConfig .
 sd nTimesSubstNFRead(C1, C2) := 
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nTimesSubstNFRead(C1, C2)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeTwo P C1 C2, 
                             P1:Protocol <- keepTwo P C1 C2]{
         SUBST-nf-read[o1:ChannelName <- C1, 
                       o2:ChannelName <- C2] } . 
                       
 strat nTimesUnusedNF : ChannelName ChannelName @ ProtocolConfig .
 sd nTimesUnusedNF(C1, C2) := 
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nTimesUnusedNF(C1, C2)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeTwo P C1 C2, 
                             P1:Protocol <- keepTwo P C1 C2]{
         UNUSED-nf[o1:ChannelName <- C1, 
                   o2:ChannelName <- C2] } . 
                   
 strat nTimesUnusedPreNF : ChannelName ChannelName @ ProtocolConfig .
 sd nTimesUnusedPreNF(C1, C2) := 
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nTimesUnusedPreNF(C1, C2)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeTwo P C1 C2, 
                             P1:Protocol <- keepTwo P C1 C2]{
         UNUSED-pre-nf[o1:ChannelName <- C1, 
                   o2:ChannelName <- C2] } .                                            
                         
                           
 var X : ChannelName .                          
                                
 strat liftInnerBindsNF : ChannelName @ ProtocolConfig .
 sd liftInnerBindsNF(X) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{liftInnerBindsNF(X)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using
        CONG-COMP-RIGHT[Q:Protocol  <- removeOne P X, 
                        P1:Protocol <- keepOne P X]{
         CONG-REACT[o:ChannelName <- X]
         { (  bind-bind-pre 
          ; (read-det-pre !)
           )
           or-else idle
         }
        } 
       . *** as third step was ; merge-pre
                   
 strat removeDuplicateReadsNF : ChannelName @ ProtocolConfig .
 sd removeDuplicateReadsNF(C1) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{removeDuplicateReadsNF(C1)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using
        CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C1, 
                        P1:Protocol <- keepOne P C1]{
         CONG-REACT[o:ChannelName <- C1]{read-det-pre !}
       } . 
       
 strat handleRNF : ChannelName @ ProtocolConfig .  
 sd handleRNF(C1) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{handleRNF(C1)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C1, 
                             P1:Protocol <- keepOne P C1]{
         CONG-REACT[o:ChannelName <- C1]
                   {(samp-over-if or-else 
                     (read2Binds or-else
                      (bind-ret-2-pre
                        or-else (merge-pre ; cong-pre-nf{bindFreeS})
                      )
                     )
                    ) 
                    ; simplifyNF
                   }
       } .  
       
 strat handleRpreNF : ChannelName @ ProtocolConfig .  
 sd handleRpreNF(C1) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{handleRpreNF(C1)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using
        CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C1, 
                        P1:Protocol <- keepOne P C1]{
         CONG-REACT[o:ChannelName <- C1]
                   {merge-pre}
       } .        
       
 strat simplifyNF @ ReactionConfig .
 sd simplifyNF :=  
   cong-pre-nf{same-reaction-if} or-else idle 
 .  
 
 var BRL : BRList . 
 var ltq : TypedCNameList .
 var ql' : QidList .
 
 strat substAll : ChannelName @ ProtocolConfig .
 sd substAll(C) := substNFOne(C) ! .
 
 strat substAllAndAbsorb : ChannelName @ ProtocolConfig .
 sd substAllAndAbsorb(C) := substAll(C) ; absorbChannel(C) .
      
 strat substNFOne : ChannelName @ ProtocolConfig .
 sd substNFOne(C1) := 
    sugar-newNF ; 
    (
     matchrew pConf 
         s.t. pConfig(Sigma, Delta,   
                      newNF(ltq,
                             P || (C1 ::= R1) || 
                                  (C2 ::= nf( (x1 : T1 <- read C1) BRL , R2, ql
                                            )
                                  ),
                       ql'), I, O) := pConf 
         by pConf 
       using (desugar-newNF ; substNF(C1, C2))
    )   
 .         
      
 strat substNF : ChannelName ChannelName @ ProtocolConfig .
 sd substNF(C1, C2) :=  
     nTimesSubstNF(C1, C2) 
   ; liftInnerBindsNF(C2)
   ; handleRNF(C2)
   ; (pre2Nf or-else idle) 
   .   
   
 strat substNFProtocol : Protocol ChannelName ChannelName @ ProtocolConfig .
 sd substNFProtocol(P, C1, C2) :=  
     nTimesSubstNFProtocol(P, C1, C2) 
   ; liftInnerBindsNF(C2)
   ; handleRNF(C2)
   ; pre2Nf 
   .  
   
 strat smart-subst-nf : ChannelName ChannelName @ ProtocolConfig . 
 sd smart-subst-nf(C1, C2) :=                        
   nTimesSubstNFRead(C1, C2)
   ? idle
   : substNF(C1, C2) 
   . 
                            
 strat bindFreeS @ ReactionConfig .
 sd bindFreeS := 
     ((smart-ret-bind ; (if-left ? idle : (if-right ? idle : idle)) ) or-else
       (if-over-bind  
        ; cong-branch-refl{bindFreeS, bindFreeS}
       )
       ) or-else idle .
       
  strat smart-ret-bind @ ReactionConfig .
  sd smart-ret-bind :=
     if-over-bind-same-2 
     ? (cong-branch-refl
        {cong-branch-refl{ret-bind , ret-bind},
         cong-branch-refl{ret-bind , ret-bind}} 
        ? idle
        : fail)  
     : (if-over-bind-same 
       ? (cong-branch-refl{ret-bind, ret-bind} ? idle : idle) 
       : ret-bind) 
       .         

 strat nTimesSubstSampFree : ChannelName ChannelName @ ProtocolConfig .
 sd nTimesSubstSampFree(C1, C2) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nTimesSubstSampFree(C1, C2)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeTwo P C1 C2, 
                             P1:Protocol <- keepTwo P C1 C2]
                             {SUBST[x2:Qid <- 'x2, 
                             o1:ChannelName <- C1, 
                             o2:ChannelName <- C2]{samp-free}} .
     
 strat nTimesSubst2SampFree : ChannelName ChannelName @ ProtocolConfig .
 sd nTimesSubst2SampFree(C1, C2) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nTimesSubst2SampFree(C1, C2)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeTwo P C1 C2, 
                             P1:Protocol <- keepTwo P C1 C2]
                             {SUBST-2[x2:Qid <- 'x2, 
                               o1:ChannelName <- C1, 
                               o2:ChannelName <- C2]{samp-free}} .   
                               
              
 *** this handles a particular proof that isn't part of a strategy                              
 strat localProof : ChannelName @ ProtocolConfig .
 sd localProof(C) := 
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW{localProof(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]{ 
         CONG-REACT[o:ChannelName <- C]
          {cong-pre-nf{
            cong-branch-refl{exchange ; 
                              alpha[x:Qid <- 'k1 , y:Qid <- 't] ;
                              exchange ; 
                              alpha[x:Qid <- 'k0 , y:Qid <- 'k1] ;
                              exchange ; 
                              alpha[x:Qid <- 't , y:Qid <- 'k0] , 
                             idle} ;
            same-reaction-if                 
           }
          }
         } .
         
 var c' : Qid .        
         
 *** turn a nf to prenf 
 strat nf2PreNF : ChannelName Qid @ ProtocolConfig .
 sd nf2PreNF(C, c') := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nf2PreNF(C, c')} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using
        CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                        P1:Protocol <- keepOne P C]
        {CONG-REACT[o:ChannelName <- C]{nf2Pre[c:Qid <- c']}} 
 .      
         
 strat moveBindInPre : ChannelName Qid @ ProtocolConfig .
 sd moveBindInPre(C, Q) :=      
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW{moveBindInPre(C, Q)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{bind2R-pre[x:Qid <- Q] }}
    .
    
 strat nTimesReadInsideIfPre : ChannelName @ ProtocolConfig .
 sd nTimesReadInsideIfPre(C) :=      
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nTimesReadInsideIfPre(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
       {CONG-REACT[o:ChannelName <- C]
        {cong-pre-nf{read-inside-if
                    } 
         *** ; read-inside-if
        }
       }
    .    
     
 strat ifOverBindAfterBinds @ ReactionConfig .
 sd ifOverBindAfterBinds :=  
     match rConf s.t. rBindRead(rConf) 
      ? cong-bind{idle, ifOverBindAfterBinds}
      : if-over-bind .  
 
 strat nTimesIfOverBind : ChannelName @ ProtocolConfig .
 sd nTimesIfOverBind(C) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nTimesIfOverBind(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{ifOverBindAfterBinds}} .
     
 strat ifOverBindInBranch @ ReactionConfig .  
 sd ifOverBindInBranch :=  
     match rConf s.t. rBindRead(rConf) 
      ? cong-bind{idle, ifOverBindInBranch}
      : cong-branch-refl{if-over-bind, if-over-bind} . 
      
 strat ifOverBindInBranch2 @ ReactionConfig .  
 sd ifOverBindInBranch2 :=  
     match rConf s.t. rBindRead(rConf) 
      ? cong-bind{idle, ifOverBindInBranch2}
      : cong-branch-refl{ifOverBindInBranch, ifOverBindInBranch} . 
     
      
 strat ifLeftOverBind @ ReactionConfig .
 sd ifLeftOverBind := 
    match rConf s.t. rBind(rConf) 
    ? cong-bind{idle, ifLeftOverBind}
    : if-left .
    
 strat ifRightOverBind @ ReactionConfig .
 sd ifRightOverBind := 
    match rConf s.t. rBind(rConf) 
    ? cong-bind{idle, ifRightOverBind}
    : if-right .   
     
 strat nTimesIfOverBindBranch : ChannelName @ ProtocolConfig .
 sd nTimesIfOverBindBranch(C) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nTimesIfOverBindBranch(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{ifOverBindInBranch}} .    
     
 strat nTimesIfOverBindBranch2 : ChannelName @ ProtocolConfig .
 sd nTimesIfOverBindBranch2(C) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nTimesIfOverBindBranch2(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{ifOverBindInBranch2}} .    
     
 strat bindRetInBranchTwiceIOB @ ReactionConfig .
 sd bindRetInBranchTwiceIOB := 
    match rConf s.t. rBindRead(rConf)
    ? cong-bind{idle, bindRetInBranchTwiceIOB}
    : cong-branch-refl
        {cong-branch-refl{ret-bind ; ifRightOverBind, ret-bind ; ifLeftOverBind},
         cong-branch-refl{ret-bind ; ifLeftOverBind, ret-bind ; ifRightOverBind}} .
 
 strat bindRetInBranchTwice @ ReactionConfig .
 sd bindRetInBranchTwice := 
    match rConf s.t. rBindRead(rConf)
    ? cong-bind{idle, bindRetInBranchTwice}
    : cong-branch-refl
        {cong-branch-refl{ret-bind , ret-bind},
         cong-branch-refl{ret-bind , ret-bind}} .
         
 strat moveInsideIf : Qid ChannelName @ ProtocolConfig .
 sd moveInsideIf(Q, C) :=  *** first what var and then the channel
    moveCertainBindLastProtocol(Q, C) ;
    applyReadOverIf(Q, C) .
        
 strat applyReadOverInnerIf : Qid ChannelName @ ProtocolConfig .
 sd applyReadOverInnerIf(Q, C) :=
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW{applyReadOverInnerIf(Q, C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]
              {moveLastBindInsideInnerIf(Q)}
             } .
 
 strat applyReadOverIf : Qid ChannelName @ ProtocolConfig .
 sd applyReadOverIf(Q, C) :=
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW{applyReadOverIf(Q, C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{moveLastBindInsideIf(Q)}} .

 
 strat moveLastBindInsideIf : Qid @ ReactionConfig .
 sd moveLastBindInsideIf(Q) :=
    match rConf s.t. Q =/= firstBind(rConf)
    ? cong-bind{idle, moveLastBindInsideIf(Q)}
    : read-inside-if . 
    
 strat moveLastBindInsideInnerIf : Qid @ ReactionConfig .
 sd moveLastBindInsideInnerIf(Q) :=
    match rConf s.t. rBind(rConf)
    ? cong-bind{idle, moveLastBindInsideInnerIf(Q)}
    : cong-branch-refl{read-inside-if, read-inside-if} .   
           
         
 strat bindRetInBranch @ ReactionConfig .
 sd bindRetInBranch :=  
     match rConf s.t. rBindRead(rConf) *** TODO: allow any bind?
    ? cong-bind{idle, bindRetInBranch}
    : cong-branch-refl{ret-bind , ret-bind} . 
    
 strat nTimesBindRetBranch : ChannelName @ ProtocolConfig .
 sd nTimesBindRetBranch(C) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nTimesBindRetBranch(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{bindRetInBranch}} . 
         
 
 strat nTimesBindRetBranchTwiceIOB : ChannelName @ ProtocolConfig .
 sd nTimesBindRetBranchTwiceIOB(C) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nTimesBindRetBranchTwiceIOB(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{bindRetInBranchTwiceIOB}} . 
   
 strat nTimesBindRetBranchTwice : ChannelName @ ProtocolConfig .
 sd nTimesBindRetBranchTwice(C) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{nTimesBindRetBranchTwice(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{bindRetInBranchTwice}} . 
  
     
 strat moveAllBindsToFrontIf @ ReactionConfig .
 sd moveAllBindsToFrontIf :=
     match rConf s.t. rBind(rConf)
     ? cong-bind{idle, moveAllBindsToFrontIf}
     : match rConf s.t. startsWithIfRead(rConf) 
       ? if-over-read ; moveAllBindsToFrontIf
       : idle .
        
 strat moveAllBindsTwoIfs @ ReactionConfig .
 sd moveAllBindsTwoIfs := 
    match rConf s.t. rBind(rConf)
     ? cong-bind{idle, moveAllBindsTwoIfs}
     : cong-branch-refl{ moveAllBindsToFrontIf, moveAllBindsToFrontIf} .
    
 strat moveBinds : ChannelName @ ProtocolConfig .
 sd moveBinds(C) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{moveBinds(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{moveAllBindsTwoIfs}} . 

 strat moveBindsOne : ChannelName @ ProtocolConfig .
 sd moveBindsOne(C) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{moveBindsOne(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{moveAllBindsToFrontIf}} .
   
    
 op canApplyIfBindSame : Reaction -> Bool .
 eq canApplyIfBindSame(x1 : T1 <- if M then R1 else R2 ; if M then R3 else R4) = true .
 eq canApplyIfBindSame(R) = false [owise] .  
 

 op canApplyIfBindSameC : ReactionConfig -> Bool .
 eq canApplyIfBindSameC(rConfig(S, D, G, R, I, T)) = canApplyIfBindSame(R) .
 
 strat ifBindSame @ ReactionConfig .
 sd ifBindSame :=
  match rConf s.t. canApplyIfBindSameC(rConf) 
  ? if-over-bind-same
  : match rConf s.t. rBind(rConf)
     ? cong-bind{idle, ifBindSame}
     : idle .
     
 strat ifBindSame2 @ ReactionConfig .
 sd ifBindSame2 :=
  match rConf s.t. canApplyIfBindSameC(rConf) 
  ? if-over-bind-same-2
  : match rConf s.t. rBind(rConf)
     ? cong-bind{idle, ifBindSame2}
     : idle .    
     
 strat ifBindSamePr : ChannelName @ ProtocolConfig .
 sd ifBindSamePr(C) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{ifBindSamePr(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{ifBindSame}} .
    
 strat ifBindSame2Pr : ChannelName @ ProtocolConfig .
 sd ifBindSame2Pr(C) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{ifBindSame2Pr(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{ifBindSame2}} .
     
 strat recursiveReadDet @ ReactionConfig .
 sd recursiveReadDet := 
   match rConf s.t. rBindRead(rConf)
     ? (read-det
          ? recursiveReadDet
          : (exchange ? cong-bind{idle, recursiveReadDet} : idle)) 
     : idle . 
  
 strat recReadDet : ChannelName Nat @ ProtocolConfig .
 sd recReadDet(C, 0) := idle .
 sd recReadDet(C, s(N)) :=
     (match pConf s.t. startsWithNew pConf
     ? CONG-NEW{recReadDet(C, s(N))} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{recursiveReadDet}}) ; recReadDet(C, N) .
    
 strat readOutsideIf2 : ChannelName @ ProtocolConfig .
 sd readOutsideIf2(C) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{readOutsideIf2(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]
                       {moveAllBindsTwoIfs ; moveAllBindsToFrontIf}} .
 
 strat sameReactionIfAfterBinds @ ReactionConfig .
 sd sameReactionIfAfterBinds := 
   match rConf s.t. rBindRead(rConf)
     ? cong-bind{idle, sameReactionIfAfterBinds} 
     : same-reaction-if .
 
 strat sameReactionIf : ChannelName @ ProtocolConfig .
 sd sameReactionIf(C) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{sameReactionIf(C)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{sameReactionIfAfterBinds}} .
     
 strat removeUnused : ChannelName ChannelName @ ProtocolConfig .
 sd removeUnused(C1, C2) := 
 match pConf s.t. startsWithNew pConf
     ? CONG-NEW{removeUnused(C1, C2)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeTwo P C1 C2, 
                             P1:Protocol <- keepTwo P C1 C2]
             {UNUSED[o1:ChannelName <- C1, o2:ChannelName <- C2]{samp-pure}} .
            
 strat addNewChannel : Protocol @ ProtocolConfig .
 sd addNewChannel(P) :=
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW{addNewChannel(P)}
     : ABSORB-LEFT-2[P2:Protocol <- P] ; COMP-NEW .  
     
 var Msg1 Msg2 : Message .    
 
***(     
 strat applyCongRetBranch : Message Message @ ReactionConfig .
 sd applyCongRetBranch(Msg1, Msg2) :=
    match rConf s.t. rBindRead(rConf) 
    ? cong-bind{idle, applyCongRetBranch(Msg1, Msg2)}
    : cong-branch-refl{cong-ret[M2 <- Msg1],
                      cong-ret[M2 <- Msg2]} .
   
                     
 strat applyCongRetBranchPr : ChannelName Message Message @ ProtocolConfig .
 sd applyCongRetBranchPr(C, M1, M2) := 
     match pConf s.t. startsWithNew pConf
     ? CONG-NEW{applyCongRetBranchPr(C, M1, M2)} 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{applyCongRetBranch(M1, M2)}} .  
     
)
     
 var q1 q2 : Qid .  
 sort QidPair .
 op <<_,_>> : Qid Qid -> QidPair [ctor] .
 op getFst : QidPair -> Qid .
 op getSnd : QidPair -> Qid .
 eq getFst(<< q1, q2 >>) = q1 .
 eq getSnd(<< q1, q2 >>) = q2 .
 
 sort QidPairList .
 subsort QidPair < QidPairList .
 op emptyQidPairList : -> QidPairList [ctor] .
 op __ : QidPair QidPairList -> QidPairList [ctor] . 
 
 var QL : QidPairList .
 var QP : QidPair .
 
 strat alphaOverList : QidPairList @ ReactionConfig .
 sd alphaOverList(emptyQidPairList) := idle .
 sd alphaOverList(QP QL) := alpha [x:Qid <- getFst(QP), y:Qid <- getSnd(QP)] ; 
                            cong-bind{idle, alphaOverList(QL)} .     
     
 strat applyAlphaPr : ChannelName QidPairList @ ProtocolConfig .
 sd applyAlphaPr(C, QL) :=                                 
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW{applyAlphaPr(C, QL) } 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{alphaOverList(QL)}} .
     
 var x : Qid .    
     
 strat retBind2OverIf : Type Message Message Reaction Qid @ ReactionConfig .
 sd retBind2OverIf(T, M1, M2 , R, x) := 
    match rConf s.t. rBind(rConf) 
    ? cong-bind{idle, retBind2OverIf(T, M1, M2, R, x) }
    : cong-branch-refl{
           ret-bind-2[M1:Message <- M1 , T1:Type <- T, R2:Reaction <- R , x:Qid <- x],
           ret-bind-2[M1:Message <- M2 , T1:Type <- T, R2:Reaction <- R , x:Qid <- x]} .
     
 strat applyRetBind2OverIf : ChannelName Type Message Message Reaction Qid @ ProtocolConfig .
 sd applyRetBind2OverIf(C, T, M1, M2, R, x) :=                                 
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW{applyRetBind2OverIf(C, T, M1, M2, R, x) } 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{retBind2OverIf(T, M1, M2, R, x)}} .
     
 strat symOverIf : Reaction Message Message @ ReactionConfig .
 sd symOverIf(R, Msg1, Msg2) :=
    sym[R1:Reaction <- R]
      {liftAllInnerBinds ; 
       ifOverBindAfterBinds ;
       bindRetInBranch ; idle
       *** applyCongRetBranch(Msg1, Msg2)
       } .   
       
 strat applySymOverIf : ChannelName Reaction Message Message @ ProtocolConfig .      
 sd applySymOverIf(C, R, Msg1, Msg2) := 
    match pConf s.t. startsWithNew pConf
     ? CONG-NEW{applySymOverIf(C, R, Msg1, Msg2) } 
     : matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using CONG-COMP-RIGHT[Q:Protocol  <- removeOne P C, 
                             P1:Protocol <- keepOne P C]
             {CONG-REACT[o:ChannelName <- C]{symOverIf(R, Msg1, Msg2)}} .
  
***(             
 strat addChannelP : ChannelName Type Reaction @ ProtocolConfig .
 sd addChannelP(C, T, R) := 
    sugar-newNF ;
    (matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using rewrite-protocol[P2:Protocol <- addChannel C T R P] ) ;
    desugar-newNF .
       
 strat replaceChannelP : ChannelName Reaction @ ProtocolConfig .
 sd replaceChannelP(C, R) := 
    sugar-newNF ;
    ( matchrew pConf s.t. pConfig(Sigma, Delta, P, I, O) := pConf by pConf 
       using rewrite-protocol[P2:Protocol <- alterChannel C R P] ) ;
    desugar-newNF .                  
)            
endsm

