Milestone 0: 

 Maude 
 - fast rewriting
 - declarative style of specification, close to the original notation
 - control of non-determinism with a strategy language, allowing to specify
   which rewrite rule applies. 
   
doc/tech-report.pdf
 syntax, typing, exact equality 
   
src/syntax.maude
 specifications of the main constituents of IPDL:
  types, messages, distributions, reactions, protocols
  - for each of these, typing rules and exact equality
  - for messages, we are only interested if two messages are equal, so we kept the
    judgment style
  - in the case of reactions and protocols, we want to transform a reaction/protocol
    using the equality rules, and the judgment style would rewrite an equality to true
    or false. Therefore, we do rewriting over a configuration
    keeping the current value of the parameters (signature, contexts, inputs, outputs, type).
    The equality rules get oriented, sometimes in both directions to be able to apply
    a rule from left to right and from right to left when needed.
  - the properties of the rewriting relation allowed us to leave out rules like
    reflexivity and transitivity.  
  - as the focus was to get to a state where we can experiment with proofs, we work with 
    an abstract syntax. A more user-friendly concrete syntax and a tranformation from the
    concrete syntax to the abstract syntax are planned.
  - in practice, families of protocols have one or two indices. The types of the methods
    dealing with them have a more general formulation, allowing in principle more indices,
    but we have only implemented support for these cases. Generalizing to the n-ary case 
    is possible.
  - in our implementation, applying a proof rule over a configuration amounts to
    specifying the rules that apply using their labels, e.g. in the simplest case
    srew <CONFIGURATION> using <RULE>  
    The strategy language of Maude allows us to compose rules into more complex tactics,
    using e.g. sequencing, alternative, matching against the current configuration etc. 
    
src/strategies.maude
 The configuration stores the whole protocol and applying rules requires navigating the 
 syntax tree to the place where the rule applies. As the examples in testing.maude show, 
 doing low-level proofs is very tedious, as congruence rules must be applied explicitly.
 Compare having to write 
 
  CONG-NEW{CONG-NEW{CONG-NEW{CONG-COMP-RIGHT{CONG-REACT[o <- 'a]{bind-ret-2[x <- 'x]}}}}} ;
 
 with calling a strategy that applies CONG-NEW as many times as needed, then CONG-COMP
 and CONG-REACT followed by the actual reaction rewrite. Typically, the tactics in this file
 contain a reaction-level rewrite combined with a protocol-level rewrite that follows the 
 pattern above.
 
 This improves matters, but doing the proof using only this kind of tactics still has a very
 manual flair, and the tactics that we will design for the next milestone will provide a 
 larger degree of automation.
  
lib/testing.maude
 contains simple tests for each of the modules, to ensure that changes don't break
 existing functionality.
 
The lib folder contains the examples in the technical report, formalized in our system.
 We have attempted to write a proof for one of the examples, 
 see the comment in lib/preProcessing.maude, 
 but this proved very tedious, demonstrating the need of more elaborate strategies.
 
 
  
